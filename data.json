{"ld": {"1": "", "2": "", "3": "", "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj5Vbml0IDQKCiAgICAgICAgPGJyPlRlY2hub2xvZ3k8L2NlbnRlcj4KCiAgICA8YnI+CiAgICA8YnI+CiAgICA8aDM+V29ya2luZyB3aXRoIHdvcmRzIDwvaDM+CgogICAgPGJyPgogICAgPHNwYW4+QS4gQ2hvb3NlIHRoZSBjb3JyZWN0IHdvcmRzIGZyb20gdGhlIGJveCB0byBjb21wbGV0ZSB0aGUgZm9sbG93aW5nIHNlbnRlbmNlcy48L3NwYW4+CiAgICA8YnI+CgogICAgPGJyPgogICAgYS4gSSB0aGluayB0aGF0IGNvdmVyaW5nIHVwIHRoZSBmYWN0cyBpcyA8Yj48dT5lcXVpdmFsZW50PC91PjwvYj4gdG8gbHlpbmcgcmVhbGx5LgogICAgPGJyPgoKICAgIDxicj4KICAgIGIuIElmIHRoZXJlIGlzIG5vdCBhIHN1YnN0YW50aWFsIG1vdmUgdG8gcHVibGljIHRyYW5zcG9ydCwgd2Ugd2lsbCBoYXZlIDxiPjx1PmRlY2VsZXJhdGlvbjwvdT48L2I+IGFuZCB0aGUgd2hvbGUgcmVnZW5lcmF0aW9uIHdpbGwKICAgIG5vdCB3b3JrLgogICAgPGJyPgoKICAgIDxicj4KICAgIGMuIEVhY2ggbmV3IGxlYWRlciB3b3VsZCBibGFtZSBoaXMgPGI+PHU+cHJlZGVjZXNzb3I8L3U+PC9iPiBmb3IgYWxsIHRoZSBldmlscyBvZiB0aGUgcGFzdC4KICAgIDxicj4KCiAgICA8YnI+CiAgICBkLiBXZSBoYXZlLCBpbiBmYWN0LCA8Yj48dT5lbnZpc2lvbmVkPC91PjwvYj4gYSBiZXR0ZXIgd29ybGQgYW5kIGhhdmUgbWFkZSBpdCBoYXBwZW4uCiAgICA8YnI+CgogICAgPGJyPgogICAgZS4gVGhlIG1haW4gbGluZWFyIGFjdHVhdG9ycyBvZiB0aGUgPGI+PHU+cG5ldW1hdGljPC91PjwvYj4gc3lzdGVtcyBhcmUgY3lsaW5kZXJzLgogICAgPGJyPgoKICAgIDxicj4KICAgIGYuIFRoZSBiYXJyZWwgd2FzIHNob3J0IGFuZCB0aGUgYnVsbGV0IGVtZXJnZWQgYXQgPGI+PHU+c3Vic29uaWM8L3U+PC9iPiBzcGVlZC4KICAgIDxicj4KCiAgICA8YnI+CiAgICBnLiBUaGUgY2l0eSBpcyBzYWlkIHRvIHJlY2VpdmUgdHdvLWZpZnRocyBvZiB0aGUgdG90YWwgPGI+PHU+ZnJlaWdodDwvdT48L2I+IGRlbGl2ZXJlZCBpbiB0aGUgY291bnRyeS4KICAgIDxicj4KCiAgICA8YnI+CiAgICBoLiBJdCB3b3VsZCBzdGlsbCB0YWtlIGZvdXIgaG91cnMgdG8gZ2V0IGRvd24sIGluIGEgc3BpcmFsIG9mIDxiPjx1PmdyaWRsb2NrPC91PjwvYj4uCiAgICA8YnI+CgogICAgPGJyPgogICAgaS4gQXBwYXJlbnRseSwgdGhlIG1hZ2ljaWFuIHdpbGwgYmUgZG9pbmcgc29tZSA8Yj48dT5sZXZpdGF0aW9uPC91PjwvYj4gb24gdGhlIHN0YWdlIHRvbW9ycm93LgogICAgPGJyPgoKICAgIDxicj4KICAgIGouIFdlIG1pZ2h0IGJlIGV4cGVyaWVuY2luZyBzb21lIDxiPjx1PnR1cmJ1bGVuY2U8L3U+PC9iPiBvbiB0aGlzIGZsaWdodCBkdWUgdG8gYW4gYXBwcm9hY2hpbmcgZWxlY3RyaWNhbCBzdG9ybS4KICAgIDxicj4KCiAgICA8YnI+CgogICAgPGJyPgoKICAgIDxicj4KICAgIDxzcGFuPkIuIEFkZCB0aHJlZSBtb3JlIHdvcmRzIHRoYXQgYXJlIGZvcm1lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJlZml4ZXMuPC9zcGFuPgogICAgPGJyPgoKICAgIDxicj4KICAgIDxzcGFuPmEuIGh5cGVyPC9zcGFuPgogICAgPGJyPgogICAgaHlwZXJsb29wLCBoeXBlcnNlbnNpdGl2ZSwgaHlwZXJsaXBpZGFlbWlhLCBoeXBlcmluZmxhdGlvbi4KICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5iLiB1bHRyYTwvc3Bhbj4KICAgIDxicj4KICAgIHVsdHJhaGlnaCwgdWx0cmFsaWdodCwgdWx0cmFzaG9ydCwgdWx0cmFiYXNpYywgdWx0cmFmaWNoZS4KICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5jLiB1cDwvc3Bhbj4KICAgIDxicj4KICAgIHVwaGlsbCwgVXB3b3JrLCB1cHNpZGUsIHVwbGlmdAogICAgPGJyPgoKICAgIDxicj4KICAgIDxzcGFuPmQuIG92ZXI8L3NwYW4+CiAgICA8YnI+CiAgICBvdmVyY29taW5nLCBvdmVyd2hlbG0sIG92ZXJkcnVuaywgb3ZlcnNpemVkCiAgICA8YnI+CgogICAgPGJyPgogICAgPHNwYW4+ZS4gbXVsdGk8L3NwYW4+CiAgICA8YnI+CiAgICBtdWx0aWJpbGxpb24sIG11bHRpbmF0aW9uYWwsIG11bHRpY3VsdHVyYWwsIG11bHRpcGx5CiAgICA8YnI+CgogICAgPGJyPgoKICAgIDxicj4KCiAgICA8YnI+CiAgICA8aDM+Q29tcHJlaGVuc2lvbjwvaDM+CiAgICA8YnI+CgogICAgPGJyPgogICAgPHNwYW4+QW5zd2VyIHRoZSBmb2xsb3dpbmcgcXVlc3Rpb25zLjwvc3Bhbj4KICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5hLiBXaGF0IGlzIGEgaHlwZXJsb29wPyBIb3cgZG9lcyBpdCB3b3JrPzwvc3Bhbj4KICAgIDxicj4KCiAgICA8YnI+CiAgICBIeXBlcmxvb3AgaXMgYSBwbGFubmVkIHRyYWluIHRoYXQgd291bGQgYmUgY2FwYWJsZSBvZiB0cmF2ZWxsaW5nIGF0IGluY3JlZGlibGUgc3BlZWRzLiBJdCdzIHN1cGVyZmFzdCBiZWNhdXNlIGl0J3MKICAgIGVuY2xvc2VkIGluIGEgdHViZSB3aXRoIG5vIGFpciBpbiBpdC4gQXMgYSByZXN1bHQgb2YgdGhlIGxhY2sgb2YgYWlyLCB0aGVyZSB3aWxsIGJlIG5vIGZyaWN0aW9uIHRvIHNsb3cgdGhlIHRyYWluCiAgICBkb3duLgogICAgPGJyPgoKICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5iLiBIb3cgaXMgaHlwZXJsb29wIG1vcmUgYmVuZWZpY2lhbCB0aGFuIHRoZSB0cmFkaXRpb25hbCB0cmFpbnM/PC9zcGFuPgogICAgPGJyPgogICAgSHlwZXJsb29wIGlzIG11Y2ggYmVuZWZpY2lhbCBhbmQgc3VwZXJpb3IgdGhhbiBhbnkgdHJhZGl0aW9uYWwgb3IgYSBoaWdoLXNwZWVkIHJhaWwuIEl0J3MgbGVzcyBleHBlbnNpdmUgYW5kIHVzZXMKICAgIGxlc3MgZW5lcmd5IHNpbmNlIHRoZSB0cmFjayBkb2Vzbid0IGhhdmUgdG8gcHJvdmlkZSBlbGVjdHJpY2l0eSB0byB0aGUgcG9kcyBjb25zdGFudGx5IGFuZCBiZWNhdXNlIHRoZSBwb2RzIG1heQogICAgZGVwYXJ0IGV2ZXJ5IDMwIHNlY29uZHMsIGl0J3MgbW9yZSBsaWtlIGEgZGVtYW5kLWJhc2VkIHNlcnZpY2UuCiAgICA8YnI+CgogICAgPGJyPgoKICAgIDxicj4KICAgIDxzcGFuPmMuIERvZXMgaHlwZXJsb29wIGhhdmUgYSBzdWNjZXNzZnVsIGhpc3Rvcnk/IEhvdz88L3NwYW4+CiAgICA8YnI+CiAgICBObywgaXQgZG9lcyBub3QgaGF2ZSBhIHN1Y2Nlc3NmdWwgaGlzdG9yeSBzaW5jZSB0aGUgb3JpZ2luYWwgY29uY2VwdCBmb3IgaHlwZXJsb29wIHdhcyB0byB1c2Ugd2FnZ29ucyBhbmQgcG5ldW1hdGljCiAgICB0dWJlcyB0byB0cmFuc3BvcnQgbWFpbCBhbmQgcGFyY2VscyBiZXR3ZWVuIGJ1aWxkaW5ncy4KICAgIDxicj4KCiAgICA8YnI+CgogICAgPGJyPgogICAgPHNwYW4+ZC4gV3JpdGUgdGhlIGNvbnRyaWJ1dGlvbnMgb2YgUm9iZXJ0IEdvZGRhcmQgYW5kIEVsb24gTXVzayBmb3IgdGhlIGRldmVsb3BtZW50IG9mIGh5cGVybG9vcC48L3NwYW4+CiAgICA8YnI+CiAgICBJbiBvcmRlciB0byBwcm92aWRlIHVsdHJhLWZhc3QgaW50ZXJjaXR5IHRyYW5zcG9ydCwgU3BhY2UgWCBhbmQgVGVzbGEgZm91bmRlciBFbG9uIE11c2sgY3JlYXRlZCB0aGUgaHlwZXJsb29wIGlkZWEuCiAgICBJbiBhZGRpdGlvbiB0byBhdXRvbW9iaWxlcywgYWlyY3JhZnQsIGJvYXRzLCBhbmQgdHJhaW5zLCBFbG9uIGVudmlzaW9ucyBhICZxdW90O2ZpZnRoIG1vZGUmcXVvdDsgb2YgdHJhbnNwb3J0YXRpb24KICAgIHRoYXQgdXRpbGlzZXMgdHJhdmVsIHBvZHMgaG91c2VkIHdpdGhpbiBzdGVlbCB0dWJlcy4gSGUgcmV2aXZlZCBpbnRlcmVzdCBpbiB0aGUgaWRlYSBvZiBoeXBlcmxvb3AgaW4gQXVndXN0IDIwMTMKICAgIHdpdGggaGlzICdIeXBlcmxvb3AgQWxwaGEnIHBhcGVyLgogICAgPGJyPgoKICAgIDxicj4KICAgIFRoZSAndmFjdHJhaW4nIGlkZWEsIGNyZWF0ZWQgYnkgUm9iZXJ0IEdvZGRhcmQgaW4gdGhlIGVhcmx5IDIwdGggY2VudHVyeSwgaXMgY2xlYXJseSBhIHByb3RvdHlwZSBvZiB0aGUgaHlwZXJsb29wLgogICAgU2luY2UgdGhlbiwgYSBzbGV3IG9mIHNpbWlsYXIgY29uY2VwdHMgaGF2ZSBiZWVuIHByb3Bvc2VkLgogICAgPGJyPgoKICAgIDxicj4KCiAgICA8YnI+CgogICAgPGJyPgogICAgPHNwYW4+ZS4gV2hhdCByZWxhdGlvbiBkb2VzIHNwZWVkIGhhdmUgd2l0aCBhaXIgcmVzaXN0YW5jZT8gRXhwbGFpbi48L3NwYW4+CiAgICA8YnI+CiAgICBNb3JlIEFpciByZXNpc3RhbmNlIGRlY3JlYXNlcyB0aGUgc3BlZWQgb2YgYSBtb3ZpbmcgYm9keSBhbmQgdmljZSB2ZXJzYS4gU2luY2UsIEh5cGVybG9vcCB3aWxsIHRyYXZlbCB0aHJvdWdoIHRoZQogICAgdmFjdXVtIHR1YmVzLCB0aGUgc3BlZWQgd2lsbCBkcmFzdGljYWxseSBpbmNyZWFzZSBhcyB0aGUgcmVzdWx0IG9mIG5vLWFpciByZXNpc3RhbmNlLgogICAgPGJyPgoKICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5mLiBXaGF0IGFyZSBoeXBlcmxvb3AgY2Fwc3VsZXMgY29tcGFyZWQgd2l0aD8gSG93IGFyZSB0aGV5IHNpbWlsYXI/PC9zcGFuPgogICAgPGJyPgogICAgQmVjYXVzZSBib3RoIEh5cGVybG9vcCBhbmQgQm9laW5nIDc0NyBhY2NlbGVyYXRlIGF0IHRoZSBzYW1lIG1lYXN1cmUgb2YgYWNjZWxlcmF0aW9uLCBIeXBlcmxvb3AgY2Fwc3VsZXMgYXJlIGxpa2VuZWQKICAgIHRvIEJvZWluZyA3NDcuCiAgICA8YnI+CgogICAgPGJyPgoKICAgIDxicj4KICAgIDxzcGFuPmcuIEhvdyBkbyB0aGUgcGFzc2VuZ2VycyBmZWVsIHdoaWxlIHRyYXZlbGxpbmcgdmlhIGh5cGVybG9vcD8gV2hhdCB3aWxsIGJlIGRvbmUgdG8gbWFrZSBpdCBsdXh1cmlvdXM/PC9zcGFuPgogICAgPGJyPgogICAgT24gYSBoeXBlcmxvb3AsIHRoZSBwYXNzZW5nZXJzIGZlZWwgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBhcyByaWRpbmcgYSBsaWZ0IG9yIGEgcGFzc2VuZ2VyIGFpcmNyYWZ0LiBUaGUgY2FiaW4gc2hvd3MKICAgIGJlYXV0aWZ1bCBzY2VuZXJ5IGFuZCBlYWNoIHBhc3NlbmdlciBoYXMgYWNjZXNzIHRvIGhpcyBvciBoZXIgb3duIHByaXZhdGUgYW11c2VtZW50IHN5c3RlbXMsIHRvIGxldCB0aGVtIGhhdmUgYQogICAgZWFzZWZ1bCB0cmF2ZWwuCiAgICA8YnI+CgogICAgPGJyPgoKICAgIDxicj4KICAgIDxzcGFuPmguIFdoeSBkb2VzIHRoZSB3cml0ZXIgZG91YnQgYWJvdXQgdGhlIHN1Y2Nlc3Mgb2YgaHlwZXJsb29wPyBXaGF0IGRvZXMgdGhlIHN1Y2Nlc3MgZGVwZW5kIG9uPzwvc3Bhbj4KICAgIDxicj4KICAgIEh5cGVybG9vcCdzIHN1Y2Nlc3Mgd2lsbCBiZSBkZXRlcm1pbmVkIG9uIHRoZSBkZXN0aW5hdGlvbnMsIHRoZSBsb2NhbCBlY29ub215LCBhbmQgdGhlIGdlb2dyYXBoaWNhbCBsb2NhdGlvbi4gVGhlCiAgICBhdXRob3IgaGFzIGNvbmNlcm5zIHJlZ2FyZGluZyBoeXBlcmxvb3AncyB2aWFiaWxpdHkgYmVjYXVzZSBvZiB0aGUgZW5vcm1vdXMgbXVsdGliaWxsaW9uLWRvbGxhciBleHBlbmRpdHVyZSBhbmQgdGhlCiAgICBmYWN0IHRoYXQgdGhlIHByb2plY3RzIGFyZSBzdGlsbCBpbiB0aGUgcGlsb3QgYW5kIGV4cGVyaW1lbnRhbCBwaGFzZXMuIEluIHRoZSBwYXN0LCBOaWtvbGEgVGVzbGEgYW5kIEVsb24gTXVzayBoYWQKICAgIGFscmVhZHkgY2xvc2VkIHRoZSBzYW1lIGNvbmNlcHQgcHJvZ3JhbSwgZHVlIHRvIG5vIHJlc3BvbnNlIGZyb20gZ292ZXJubWVudCBhdXRob3JpdGllcy4KICAgIDxicj4KCiAgICA8YnI+CgogICAgPGJyPgoKICAgIDxicj4KICAgIDxoMz5Dcml0aWNhbCB0aGlua2luZzwvaDM+CiAgICA8YnI+CgogICAgPGJyPgogICAgPHNwYW4+CiAgICAgICAgYS4gSXMgdGhlIGh5cGVybG9vcCB0aGUgZnV0dXJlIG9mIHRyYW5zcG9ydGF0aW9uIG9yIGp1c3QgYSBkcmVhbT8gV2hhdCBkbyB5b3UgdGhpbms/IEp1c3RpZnkgeW91ciBvcGluaW9uIHdpdGgKICAgICAgICBzdWl0YWJsZSByZWFzb25zLgogICAgPC9zcGFuPgogICAgPGJyPgoKICAgIDxicj4KICAgIEJhc2ljYWxseSwgSHlwZXJsb29wIGlzIGEgY29uY2VwdHVhbCB0cmFuc3BvcnQgc3lzdGVtIGluIHdoaWNoIHBhc3NlbmdlcnMgYXJlIGxvYWRlZCBpbnRvIHBvZHMgYW5kIGZpcmVkIHRocm91Z2gKICAgIHZhY3V1bSB0dWJlcyBhbGwgYXQgYSBzdXBlcnNvbmljIHNwZWVkLiBIeXBlcmxvb3AgaXNuJ3QganVzdCBhYm91dCBzcGVlZDsgaXQgYWxzbyBhaW1zIHRvIGJlIGVudmlyb25tZW50YWxseQogICAgZnJpZW5kbHkuCiAgICA8YnI+CiAgICBUaGUgY29uY2VwdCBqdXN0IGxpa2Ugb2YgSHlwZXJsb29wIGlzIG5vdCBuZXcgdGhvdWdoLiBQbmV1bWF0aWMgdHViZXMgZm9yIHRoZSBwYXJjZWwsIG1haWwsIGFuZCBtb25leSB0cmFuc2ZlcnMKICAgIGZvdW5kIHdpZGVzcHJlYWQgYWNjZXB0YW5jZSBpbiB0aGUgMTl0aCBjZW50dXJ5IGFuZCBhcmUgc3RpbGwgdXNlZCBhdCBzdXBlcm1hcmtldHMsIHBvc3RhbCBzb3J0aW5nIHN0YXRpb25zLCBhbmQKICAgIGJhbmtzIHRvZGF5LiBIeXBlcmxvb3AncyBjb25jZXB0IHJlc2VtYmxlcyB0aGUgcG5ldW1hdGljIG1haWwgZGVsaXZlcnkgc3lzdGVtcy4gRXZlbiBmbHlpbmcgb24gdGhlIGFpciBzZWVtZWQgdG8gYmUKICAgIGltcG9zc2libGUgb24gcGFzdCBkYXlzIGJ1dCBub3cgdHJhdmVsbGluZyB2aWEgYWlyIGlzIGNvbW1vbiBmb3IgdXMuIFNvIG5vIG9uZSBjYW4gc2F5IHRoYXQgaXQmcnNxdW87cyBub3QgcG9zc2libGUKICAgIGJlY2F1c2UgZXZlcnl0aGluZyB3aGljaCB3YXMgYSBkcmVhbSBvbmNlLCBpcyByZWFsaXR5IG5vdy4KICAgIDxicj4KCiAgICA8YnI+CiAgICBJbiBjb25jbHVzaW9uLCB3ZSBjYW4gc2VlIHRoYXQgSHlwZXJsb29wIG1heSBiZWNvbWUgdGhlIGZ1dHVyZSBvZiB0cmFuc3BvcnRhdGlvbiBzeXN0ZW1zIHdvcmxkd2lkZS4gSWYgdGhpcyBiZWNvbWVzCiAgICBhIHJlYWxpdHksIGV2ZW4gdGhvdWdoIGl0IGlzIG5vdCBleHBlY3RlZCBmb3IgZGVjYWRlcywgdGhlcmUgd2lsbCBiZSBhbiBpbW1lbnNlIGltcGFjdCBvbiBvcmRpbmFyeSBwZW9wbGUncyBsaXZlcy4KICAgIEFwYXJ0IGZyb20gdGhlIGNvbnZlbmllbmNlIGFuZCB0aGUgZ3JlZW4gaW1wYWN0LCB3ZSBjYW4gYWxzbyBob3BlIGZvciBlY29ub21pYyBzdWNjZXNzLgogICAgPGJyPgoKICAgIDxicj4KICAgIEhvd2V2ZXIsIGRlc3BpdGUgdGhlIGltbWVuc2UgcHJvbWlzZSwgbmV3IHRlY2hub2xvZ2llcyB0YWtlIHRpbWUsIGFuZCB3aWxsIGJlIGEgd2hpbGUgdW50aWwgd2UgY2FuIHRyYXZlbCBpbiBhIHBvZAogICAgaW5zaWRlIGEgc2VhbGVkIHR1YmUgd2l0aCBhIHNvdW5kIG9ubHkgYXMgbG91ZCBhcyBhIGdlbnRsZSAnU1dPT1NILicKICAgIDxicj4KCiAgICA8YnI+CgogICAgPGJyPgogICAgPHNwYW4+CiAgICAgICAgYi4gVGhlIG51bWJlciBvZiBwcml2YXRlIHZlaGljbGVzIGlzIGluY3JlYXNpbmcgZGF5IGJ5IGRheSBpbiBOZXBhbCBiZXlvbmQgdGhlIGNhcGFjaXR5IG9mIG91ciBpbmZyYXN0cnVjdHVyZS4gV2hhdCBkbyB5b3UgdGhpbmsgc2hvdWxkIGJlIGRvbmUgdG8gY3VyYiB0aGUgZXZlci1ncm93aW5nIG51bWJlciBvZiBwcml2YXRlIHZlaGljbGVzPyBEaXNjdXNzLgogICAgPC9zcGFuPgogICAgPGJyPgoKICAgIDxicj4KICAgIFRoZSBudW1iZXIgb2YgcHJpdmF0ZSB2ZWhpY2xlcyBpcyBpbmNyZWFzaW5nIGRheSBieSBkYXkgaW4gTmVwYWwgYmV5b25kIHRoZSBjYXBhY2l0eSBvZiBvdXIgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzCiAgICBvdXRwYWNpbmcgdGhlIGNvdW50cnkncyBpbmZyYXN0cnVjdHVyZS4gVGhlIG51bWJlciBvZiBOZXBhbGVzZSB3aG8gb3duIHBlcnNvbmFsIGNhcnMgaXMgc3RlYWRpbHkgaW5jcmVhc2luZy4gRGVzcGl0ZQogICAgdGhlIGZhY3QgdGhhdCBpdCBlYXNlcyB0aGVpciBkYXkgdG8gZGF5IGxpZmUsIGl0cyBjYXVzaW5nIGdyZWF0IGVudmlyb25tZW50YWwgbG9zZXMuIFByaXZhdGUgdmVoaWNsZXMgc2hvdWxkIGJlCiAgICBwcm9oaWJpdGVkIHNpbmNlIHRoZWlyIHdpZGVzcHJlYWQgdXNhZ2UgZGVncmFkZXMgdGhlIGVudmlyb25tZW50IGFuZCBpbmNyZWFzZXMgZW1pc3Npb25zIG9mIGhhemFyZG91cyBnYXNlcyB0aGF0CiAgICB3aWxsIGNyZWF0ZSBtYWpvciBwcm9ibGVtcyBpbiB0aGUgZnV0dXJlLiBUbyBjb250cm9sIHRoaXMgY3JpdGljYWwgc2l0dWF0aW9uIHNvbWUgc2FmZXR5IG1lYXN1cmVzIGhhZCB0byBiZQogICAgdGFrZW4uCiAgICA8YnI+CgogICAgPGJyPgogICAgVGhlIGJlc3QgYXBwcm9hY2ggaXMgdG8gZGlzY291cmFnZSBwZW9wbGUgZnJvbSBvcHRpbmcgdG8gYnV5IGNhcnMuIFRoaXMgY2FuIGJlIGVmZmVjdGl2ZWx5IGRvbmUgYnkgaW5jcmVhc2luZyB0b2xsCiAgICBmYXJlIGZvciBjYXJzIGFuZCBieSBkZXZpc2luZyBhIHN5c3RlbSBvZiBwcm9ncmVzc2l2ZSB0YXhhdGlvbiBvbiBjYXJzLiBUaGUgc3lzdGVtIGNhbiBoYXZlIGFuIHVwcGVyIGxpbWl0IG9uIHRoZQogICAgbnVtYmVyIG9mIGNhcnMgb3duZWQgcGVyIGZhbWlseSBhbmQgdGhlIHJhdGUgb2YgdGF4IG9uIGVhY2ggY2FyIGNhbiBiZSBpbmNyZWFzZWQgYXMgdGhlIG51bWJlciBvZiBjYXJzIGJvdWdodCBrZWVwCiAgICByaXNpbmcuCiAgICA8YnI+CgogICAgPGJyPgogICAgQnV0IHRoZXNlIGVmZm9ydHMgd291bGQgYmUgbWVhbmluZ2xlc3MgdW5sZXNzIHRoZXkgYXJlIGFjY29tcGFuaWVkIGJ5IG1lYXN1cmVzIHRvIGVuY291cmFnZSBwZW9wbGUgdG8gdXNlIHB1YmxpYwogICAgdHJhbnNwb3J0IGJ5IHJldmFtcGluZyB0aGUgZGlzbWFsIHB1YmxpYyB0cmFuc2l0IHN5c3RlbSBpbiBOZXBhbC4gTW9yZSBidXNlcyBuZWVkIHRvIHBseSBkdXJpbmcgcnVzaCBob3VyIGFuZCB0aGUKICAgIGJ1c2VzIG11c3QgYmUgbWFkZSBtb3JlIGNvbWZvcnRhYmxlIChieSB1c2luZyBiZXR0ZXIgY3VzaGlvbnMsIGFpciBjb25kaXRpb25pbmcsIGJldHRlciBzdXNwZW5zaW9uLCBldGMuLi4pLgogICAgUHVuY3R1YWxpdHkgYW5kIHJlbGlhYmlsaXR5IG9mIHB1YmxpYyB0cmFuc3BvcnQgc3lzdGVtcyBtdXN0IGJlIHVwaGVsZC4gQ2xlYW5saW5lc3MgYW5kIGh5Z2llbmUgbXVzdCBiZSBrZXB0IGluIG1pbmQKICAgIHdoaWxlIG1haW50YWluaW5nIGJ1cyBhbmQgdHJhaW4gc3RhdGlvbnMuCiAgICA8YnI+CgogICAgPGJyPgogICAgVGhlIGFib3ZlIGFwcHJvYWNoZXMgbXVzdCBiZSBjb21wbGVtZW50ZWQgd2l0aCBlZmZvcnRzIHRvIGNoYW5nZSB0aGUgZmFsc2Ugbm90aW9uIHRoZSB1c2luZyBwdWJsaWMgdHJhbnNwb3J0IGlzCiAgICBjb250ZW1wdGlibGUuIFRoZSBiZXN0IHdlYXBvbiB0byBkZWFsIHdpdGggdGhpcyBpcyB0byBtYWtlIHB1YmxpYyB0cmFuc3BvcnQgYXMgZGlnbmlmaWVkIGFuZCBwbGVhc2FudCBhcwogICAgcG9zc2libGUuCiAgICA8YnI+CgogICAgPGJyPgoKICAgIDxicj4KCiAgICA8YnI+CiAgICA8aDM+R3JhbW1hcjwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5CLiBSZXdyaXRlIHRoZSBmb2xsb3dpbmcgc2VudGVuY2VzIHdpdGggdGhlIGNvcnJlY3QgZm9ybSBvZiB0aGUgdmVyYnMgaW4gdGhlIGJyYWNrZXRzLjwvc3Bhbj4KICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5hLiBUaGUgaW52aXRhdGlvbiBpcyBmb3Igb25lIHBlcnNvbi4gSSBkb24mcnNxdW87dCBtaW5kIHdoZXRoZXIgeW91IG9yIHNoZSAoY29tZSkgdG8gdGhlIHBhcnR5Ljwvc3Bhbj4KICAgIDxicj4KICAgIFRoZSBpbnZpdGF0aW9uIGlzIGZvciBvbmUgcGVyc29uLiBJIGRvbiZyc3F1bzt0IG1pbmQgd2hldGhlciB5b3Ugb3Igc2hlIGNvbWVzIHRvIHRoZSBwYXJ0eS4KICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5iLiBOZWl0aGVyIHRoZSBNUHMgbm9yIHRoZSBQcmltZSBNaW5pc3RlciAoaGF2ZSkgZmVsdCByZWdyZXQgZm9yIHRoZSBwYXJ0eSBzcGxpdC48L3NwYW4+CiAgICA8YnI+CiAgICBOZWl0aGVyIHRoZSBNUHMgbm9yIHRoZSBQcmltZSBNaW5pc3RlciBoYXMgZmVsdCByZWdyZXQgZm9yIHRoZSBwYXJ0eSBzcGxpdC4KICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5jLiBJIGRvbiZyc3F1bzt0IGNhcmUgd2hldGhlciBoZSBvciBzaGUgKHdpbikgdGhlIGxvdHRlcnkuPC9zcGFuPgogICAgPGJyPgogICAgSSBkb24mcnNxdW87dCBjYXJlIHdoZXRoZXIgaGUgb3Igc2hlIHdpbnMgdGhlIGxvdHRlcnkuCiAgICA8YnI+CgogICAgPGJyPgogICAgPHNwYW4+ZC4gRWl0aGVyIHRoZSBLYW50aXB1ciBvciB0aGUgUmVwdWJsaWNhIChiZSkgdXNlZCBmb3IgdGhlIGFkdmVydGlzZW1lbnQuPC9zcGFuPgogICAgPGJyPgogICAgRWl0aGVyIHRoZSBLYW50aXB1ciBvciB0aGUgUmVwdWJsaWNhIGlzIHVzZWQgZm9yIHRoZSBhZHZlcnRpc2VtZW50LgogICAgPGJyPgoKICAgIDxicj4KICAgIDxzcGFuPmUuIFNoZSBzcGVha3MgaW4gYSBzdHJhbmdlIGFjY2VudC4gTmVpdGhlciBJIG5vciBteSBzaXN0ZXIgKHVuZGVyc3RhbmQpIGhlci48L3NwYW4+CiAgICA8YnI+CiAgICBTaGUgc3BlYWtzIGluIGEgc3RyYW5nZSBhY2NlbnQuIE5laXRoZXIgSSBub3IgbXkgc2lzdGVyIHVuZGVyc3RhbmRzIGhlci4KICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5mLiBJIGZvcmdvdCB3aGV0aGVyIHRoZSBzaW5nZXJzIG9yIHRoZSBhY3RyZXNzIChiZSkgZ2l2ZW4gdGhlIEZpbG0gRmFpciBBd2FyZCBsYXN0IHllYXIuPC9zcGFuPgogICAgPGJyPgogICAgSSBmb3Jnb3Qgd2hldGhlciB0aGUgc2luZ2VycyBvciB0aGUgYWN0cmVzcyB3YXMgZ2l2ZW4gdGhlIEZpbG0gRmFpciBBd2FyZCBsYXN0IHllYXIuCiAgICA8YnI+CgogICAgPGJyPgogICAgPHNwYW4+Zy4gTmVpdGhlciB0aGUgdHJhY2tzdWl0IG5vciB0aGUgcGFqYW1hcyAoZml0KSBtZSBwZXJmZWN0bHkuPC9zcGFuPgogICAgPGJyPgogICAgTmVpdGhlciB0aGUgdHJhY2tzdWl0IG5vciB0aGUgcGFqYW1hcyBmaXQgbWUgcGVyZmVjdGx5LgogICAgPGJyPgoKICAgIDxicj4KICAgIDxzcGFuPmguIE5laXRoZXIgdGhlIGdhcyBmaXJlIG5vciB0aGUgZWxlY3RyaWMgaGVhdGVycyAoYmUpIHN1aXRhYmxlIGZvciByb29tIGhlYXRpbmcuPC9zcGFuPgogICAgPGJyPgogICAgTmVpdGhlciB0aGUgZ2FzIGZpcmUgbm9yIHRoZSBlbGVjdHJpYyBoZWF0ZXJzIGFyZSBzdWl0YWJsZSBmb3Igcm9vbSBoZWF0aW5nLgogICAgPGJyPgoKICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5DLiBUaGlzIHBhc3NhZ2UgY29udGFpbnMgdGhlIGFncmVlbWVudCBlcnJvcnMuIENvcnJlY3QgdGhlIHN1YmplY3RzIG9yIHZlcmJzIHRoYXQgZG9uJnJzcXVvO3QgYWdyZWUgd2l0aCBlYWNoIG90aGVyLiBSZW1lbWJlciB0byB1c2UgcHJlc2VudCB0ZW5zZSBpbiB5b3VyIGNvcnJlY3Rpb25zLjwvc3Bhbj4KICAgIDxicj4KCiAgICA8YnI+CiAgICA8Yj5Db3JyZWN0ZWQgUGFzc2FnZTo8L2I+CiAgICA8YnI+CgogICAgPGJyPgogICAgV2l0aGluIHRoZSBzdGF0ZSBvZiBBcml6b25hLCBSb2IsIGFsb25nIHdpdGggaGlzIGZhbWlseSwgbW92ZXMgZnJlcXVlbnRseSBmcm9tIGNpdHkgdG8gY2l0eS4gQWZ0ZXIgaGlzIGFycml2YWwsIG9uZQogICAgb2YgaGlzIGZpcnN0IHRhc2tzIHdhcyB0byBmaW5kIGFuIGFwYXJ0bWVudCBjbG9zZSB0byB3b3JrLCBhcyBoZSBkaWQgbm90IGhhdmUgYSBjYXIuIFVzdWFsbHksIHRoZXJlIGFyZSBtYW55CiAgICBkaWZmZXJlbnQgcGxhY2VzIHRvIGNob29zZSBmcm9tLCBhbmQgaGUgY29uc2lkZXJzIGNvc3QsIGxvY2F0aW9uLCBhbmQgbHV4dXJ5LiBJZiBvbmUgYXBhcnRtZW50IGhhcyBhIHdhc2hpbmcgbWFjaGluZQogICAgYW5kIGRyeWVyIGFuZCBjb3N0cyBmb3VyIGh1bmRyZWQgZG9sbGFycyBhIG1vbnRoLCBoZSBwcmVmZXJzIHRvIHJlbnQgaXQgb3ZlciBhbm90aGVyIGFwYXJ0bWVudCB3aGljaCBoYXMKICAgIHNpZ25pZmljYW50bHkgbGVzcyByZW50IGFuZCBpcyBsb2NhdGVkIHR3byBibG9ja3MgZnJvbSBhIExhdW5kcm9tYXQuIFJvYidzIGZhbWlseSBuZXZlciB3YW50ZWQgdG8gbGl2ZSBpbiBhbgogICAgYXBhcnRtZW50IG9uIHRoZSB0aGlydGVlbnRoIGZsb29yLCBzaW5jZSBhbGwgb2YgdGhlbSBmZWFyIGhlaWdodHMuIEhlIGFsc28gdHJpZWQgdG8gY2hvb3NlIGFuIGFwYXJ0bWVudCB3aXRoIGEKICAgIGxhbmRsb3JkIHJlY29tbWVuZGVkIGJ5IGZvcm1lciB0ZW5hbnRzLiBFdmVyeWJvZHkga25vd3MgdGhhdCBpdCBpcyBpbXBvcnRhbnQgdG8gZmluZCBhIHJlc3BvbnNpYmxlIGxhbmRsb3JkLiBSb2IgYW5kCiAgICBoaXMgd2lmZSBsb3ZlIHRvIGNvb2sgdG9nZXRoZXIgd2hlbiBib3RoIGFyZSBmcmVlLCBzbyB0aGV5IG5lZWQgYSBzcGFjaW91cywgd2VsbC1lcXVpcHBlZCBraXRjaGVuLiBSb2Igb2Z0ZW4gbG9va3MKICAgIGZvciBhIHBsYWNlIHdpdGggYW4gYWlyIGNvbmRpdGlvbmVyIGJlY2F1c2UgdGhlcmUgYXJlIHNvIG1hbnkgc2NvcmNoaW5nIGRheXMgYW5kIG5pZ2h0cyBpbiBBcml6b25hLiBXaGVuZXZlciBSb2IKICAgIGZpbmRzIGEgbmV3IGFwYXJ0bWVudCwgYWxsIG9mIGhpcyBjb25jZXJucyBkaXNhcHBlYXIuIEhlIGZlbHQgcmVsaWV2ZWQgYW5kIGNhbGxlZCBoaXMgbW90aGVyLiBTb21lb25lCiAgICB1bmRlcnN0YW5kcyEKICAgIDxicj4KICAgIDxicj4KCiAgICA8YnI+CgogICAgPGJyPgoKICAgIDxicj4KICAgIDxzcGFuPklmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tPC9zcGFuPgogICAgPGJyPgoKICAgIDxicj4KPC9ib2R5PgoKPC9odG1sPg==", "5": "", "6": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "7": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "8": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "9": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "10": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "11": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "12": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "13": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "14": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "15": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "16": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "17": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "18": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "19": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "20": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="}, "ss": {"1": "", "2": "", "3": "", "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "5": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "6": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "7": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="}, "poems": {"1": "", "2": "", "3": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "5": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="}, "essays": {"1": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "2": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "3": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "5": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="}, "oap": {"1": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "2": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=", "3": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="}}