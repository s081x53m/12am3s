{"ld": {"1": "", "2": "", "3": "", "4": "", "5": "", "6": "", "7": "", "8": "", "9": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgoKICAgIDxicj4KICAgIDxjZW50ZXI+VW5pdCA5CiAgICAgICAgPGJyPgogICAgICAgIEVjb2xvZ3kgYW5kIEVudmlyb25tZW50PC9jZW50ZXI+CgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPldvcmtpbmcgd2l0aCB3b3JkcyA8L2gzPgoKICAgIDxicj4KCiAgICA8c3Bhbj4KICAgICAgICBBLiBUaGUgd29yZHMvcGhyYXNlcyBpbiB0aGUgYm94IGFyZSBmcm9tIHRoZSB0ZXh0LiBDaGVjayB0aGVpciBtZWFuaW5ncyBpbiBhIGRpY3Rpb25hcnkgYW5kIHVzZSB0aGVzZSB3b3JkcyB0bwogICAgICAgIGNvbXBsZXRlIHRoZSBnaXZlbiBzZW50ZW5jZXMuCiAgICA8L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBhLiA8Yj5Mb2dnaW5nPC9iPiBpcyBvbmUgb2YgdGhlIG1haW4gcmVhc29ucyBiZWhpbmQgdGhlIHJhcGlkIGRlZm9yZXN0YXRpb24gaW4gdGhlIHdvcmxkLgogICAgPGJyPgogICAgPGJyPgogICAgYi4gVGhhdCdzIG9uZSBleGFtcGxlIG9mIGhvdyB0aGUgcGFuZGVtaWMgc2hvdWxkIGJlIGEgPGI+d2FrZS11cCBjYWxsPC9iPi4KICAgIDxicj4KICAgIDxicj4KICAgIGMuIDxiPlByb3BhbmU8L2I+IGlzIGEgZ2FzIHVzZWQgYXMgYSBmdWVsIGZvciBjb29raW5nIGFuZCBoZWF0aW5nLgogICAgPGJyPgogICAgPGJyPgogICAgZC4gRW1lcmdlbmN5IHRlYW1zIGFyZSBzdGlsbCBjbGVhcmluZyB0aGUgPGI+ZGVicmlzPC9iPiBmcm9tIHRoZSBwbGFuZSBjcmFzaC4KICAgIDxicj4KICAgIDxicj4KICAgIGUuIFdoYXQgYSA8Yj50cmFuc2Zvcm1hdGlvbiE8L2I+IFlvdSBsb29rIGdyZWF0LgogICAgPGJyPgogICAgPGJyPgogICAgZi4gTXkgZmF0aGVyIG1hZGUgYSBOZXcgWWVhciA8Yj5yZXNvbHV0aW9uPC9iPiB0byBnaXZlIHVwIHNtb2tpbmcuCiAgICA8YnI+CiAgICA8YnI+CiAgICBnLiBIZSBoYXMgd29ya2VkIGluIHRoZSBBcm15IGZvciB0d28geWVhcnMuIEhlIGhhdGVzIHRoYXQgdHdvLXllYXIgPGI+ZGV0cmltZW50YWw8L2I+LgogICAgPGJyPgogICAgPGJyPgogICAgaC4gRW1pc3Npb25zIGZyb20gdGhlIGZhY3RvcnkgYXJlIHdpZGVseSBzdXNwZWN0ZWQgb2YgaGF2aW5nIGEvYW4gPGI+c3RpbnQ8L2I+IGVmZmVjdCBvbiBoZWFsdGguCiAgICA8YnI+CiAgICA8YnI+CiAgICBpLiBNeSBmYXRoZXIgaXMgYW4gPGI+b2NjYXNpb25hbDwvYj4gc21va2VyLiBIZSBkb2Vzbid0IHNtb2tlIG9mdGVuLgogICAgPGJyPgogICAgPGJyPgogICAgai4gPGI+UmVkd29vZDwvYj4gaXMgYSB2ZXJ5IHRhbGwgdHlwZSBvZiB0cmVlIHRoYXQgZ3Jvd3MgZXNwZWNpYWxseSBpbiBDYWxpZm9ybmlhIGFuZCBPcmVnYW4uCiAgICA8YnI+CiAgICA8YnI+CgoKICAgIDxicj4KICAgIDxzcGFuPkIuIENob29zZSBvbmUgd29yZCBmcm9tIGVhY2ggYm94IHRvIG1ha2Ugc2Vuc2libGUgY29tcG91bmQgd29yZHMuPC9zcGFuPgogICAgPGJyPgogICAgUmF0dGxlOiBSYXR0bGVzbmFrZQogICAgPGJyPgogICAgU3VuOiBTdW5mbG93ZXIKICAgIDxicj4KICAgIFRvdWNoOiBUb3VjaGRvd24KICAgIDxicj4KICAgIE1vb246IE1vb25saWdodAogICAgPGJyPgogICAgRGF5OiBEYXlkcmVhbQogICAgPGJyPgogICAgRmlyZTogRmlyZXdvcmtzCiAgICA8YnI+CiAgICBXYXRlcjogV2F0ZXJtZWxvbgogICAgPGJyPgogICAgQmFza2V0OiBCYXNrZXRiYWxsCiAgICA8YnI+CiAgICBQYXNzOiBQYXNzcG9ydAogICAgPGJyPgogICAgV2FzaDogV2FzaGNsb3RoCiAgICA8YnI+CiAgICBXZWF0aGVyOiBXZWF0aGVybWFuCiAgICA8YnI+CiAgICBHcmFuZDogR3JhbmRtb3RoZXIKICAgIDxicj4KICAgIENyb3NzOiBDcm9zc3dhbGsKICAgIDxicj4KICAgIDxicj4KCgogICAgPGJyPgogICAgPHNwYW4+Qy4gTWF0Y2ggdGhlIGZvbGxvd2luZyB3b3Jkcy9waHJhc2VzIHJlbGF0ZWQgdG8gdGhlIGVjb2xvZ3kgd2l0aCB0aGVpciBtZWFuaW5ncy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CgogICAgPGI+U3VzdGFpbmFiaWxpdHk8L2I+CiAgICA8YnI+CiAgICB0byBrZWVwIGluIGV4aXN0ZW5jZTsgbWFpbnRhaW4uIFRvIHN1cHBseSB3aXRoIG5lY2Vzc2l0aWVzIG9yIG5vdXJpc2htZW50CiAgICA8YnI+CiAgICA8YnI+CgogICAgPGI+VHJlZSBsaW5lPC9iPgogICAgPGJyPgogICAgdGhlIGhlaWdodCBvbiBhIG1vdW50YWluIGFib3ZlIHdoaWNoIHRoZSBjbGltYXRlIGlzIHRvbyBjb2xkIGZvciB0cmVlcyB0byBncm93CiAgICA8YnI+CiAgICA8YnI+CgogICAgPGI+UHJlY2lwaXRhdGlvbjwvYj4KICAgIDxicj4KICAgIHdhdGVyIHRoYXQgcmV0dXJucyB0byB0aGUgZWFydGggYXMgcmFpbiwgaGFpbCwgc2xlZXQsIG9yIHNub3cKICAgIDxicj4KICAgIDxicj4KCiAgICA8Yj5Ucm9waWNhbCBab25lPC9iPgogICAgPGJyPgogICAgdGhlIHJlZ2lvbiBiZXR3ZWVuIGxhdGl0dWRlcyAyMy41IGRlZ3JlZXMgUyBhbmQgMjMuNSBkZWdyZWVzIE4KICAgIDxicj4KICAgIDxicj4KCiAgICA8Yj5LeW90byBQcm90b2NvbDwvYj4KICAgIDxicj4KICAgIGFuIGFncmVlbWVudCBiZXR3ZWVuIGNvdW50cmllcyB0byByZWR1Y2UgdGhlaXIgZ3JlZW5ob3VzZSBnYXMgZW1pc3Npb25zLiBJdCB3YXMgZXN0YWJsaXNoZWQgaW4gSmFwYW4gaW4gMTk5NyBidXQKICAgIGRpZG4ndCBiZWNvbWUgaW50ZXJuYXRpb25hbCBsYXcgdW50aWwgMjAwNAogICAgPGJyPgogICAgPGJyPgoKICAgIDxiPlBvbGx1dGFudHM8L2I+CiAgICA8YnI+CiAgICBzdWJzdGFuY2VzIHRoYXQgZGVzdHJveSB0aGUgcHVyaXR5IG9mIGFpciwgd2F0ZXIsIG9yIGxhbmQKICAgIDxicj4KICAgIDxicj4KCiAgICA8Yj5HZW9zcGhlcmU8L2I+CiAgICA8YnI+CiAgICB0aGUgc29pbHMsIHNlZGltZW50cywgYW5kIHJvY2sgbGF5ZXJzIG9mIHRoZSBFYXJ0aCdzIGNydXN0LCBib3RoIGNvbnRpbmVudGFsIGFuZCBiZW5lYXRoIHRoZSBvY2VhbiBmbG9vcnMKICAgIDxicj4KICAgIDxicj4KCiAgICA8Yj5EZWNpZHVvdXM8L2I+CiAgICA8YnI+CiAgICBhIHBsYW50IHRoYXQgc2hlZHMgYWxsIG9yIG5lYXJseSBhbGwgaXRzIGxlYXZlcyBlYWNoIHllYXIKICAgIDxicj4KICAgIDxicj4KCiAgICA8Yj5FcGhlbWVyYWw8L2I+CiAgICA8YnI+CiAgICBhbiBvcmdhbmlzbSB0aGF0IGhhcyBhIHNob3J0IGxpZmUgY3ljbGUKICAgIDxicj4KICAgIDxicj4KCiAgICA8Yj5UcmFzaDwvYj4KICAgIDxicj4KICAgIGl0ZW1zIHRoYXQgYXJlIGRpc2NhcmRlZAogICAgPGJyPgogICAgPGJyPgoKCiAgICA8YnI+CiAgICA8YnI+CiAgICA8aDM+Q29tcHJlaGVuc2lvbjwvaDM+CiAgICA8YnI+CgogICAgPHNwYW4+QS4gQ2hvb3NlIHRoZSBiZXN0IGFuc3dlci48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBhLiBUaGUgYXV0aG9yIG9mIHRoZSB0ZXh0IGFib3ZlIGhhcyB0aGUgb3BpbmlvbiB0aGF0IEp1bGlhIEhpbGwgPGI+CiAgICAgICAgbWFkZSBoZXIgcGFzdGltZSBpbiBhIHRyZWUgZm9yIHR3byB5ZWFycwogICAgICAgIG1vcmUuCiAgICA8L2I+CiAgICA8YnI+CiAgICA8YnI+CiAgICBiLiBUaGUgc2VudGVuY2UgJmxzcXVvO0p1bGlhIGhhZCBvY2Nhc2lvbmFsIHZpc2l0b3JzJnJzcXVvOyBpbmRpY2F0ZXMgc2hlIGhhZCA8Yj5hIGZldyB2aXNpdG9ycyBub3cgYW5kIHRoZW4uPC9iPgogICAgPGJyPgogICAgPGJyPgogICAgYy4gVGhlIGxvZ2dpbmcgY29tcGFueSBtYW5hZ2VkIDI0IGhvdXIgc2VjdXJpdHkgc2VydmljZSBhcm91bmQgdGhlIHRyZWUgdG8gPGI+ZGlzY291cmFnZSBoZXIgZnJvbSBoZXIgY2FtcGFpZ24uPC9iPgogICAgPGJyPgogICAgPGJyPgogICAgZC4gTXMuIEhpbGwgYmVnYW4gdG8gcmVzcG9uZCB0aGUgbG9nZ2VycyB3aXRoIHNvbmdzIGFuZCBjb252ZW50aW9uYWwgY29udmVyc2F0aW9ucyBiZWNhdXNlIHNoZSA8Yj4KICAgICAgICBoYWQgdW5jb25kaXRpb25hbAogICAgICAgIGxvdmUgZm9yIGFsbCBuYXR1cmUmcnNxdW87cyBjcmVhdGlvbnMuCiAgICA8L2I+CiAgICA8YnI+CiAgICA8YnI+CiAgICBlLiBKdWxpYSBIaWxsIGNsaW1iZWQgZG93biB0aGUgdHJlZSBhZnRlciA3MzggZGF5cyB3aGVuIGhlciBkZW1hbmRzIHdlcmUgPGI+YWJvdXQgdG8gYmUgZnVsZmlsbGVkLjwvYj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KCiAgICA8c3Bhbj5CLiBBbnN3ZXIgdGhlIGZvbGxvd2luZyBxdWVzdGlvbnMuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+YS4gV2hvIHdhcyBKdWxpYSBCdXR0ZXJmbHkgSGlsbD8gSG93IGRpZCBIaWxsJnJzcXVvO3MgY2FtcGFpZ24gZ2FpbiBwb3B1bGFyaXR5Pzwvc3Bhbj4KICAgIDxicj4KICAgIEp1bGlhIEJ1dHRlciBKaWxsIHdhcyBhIHBlcnNvbiB3aG8gbGl2ZWQgaW4gYSAyMDAtZnQtdGFsbCByZWR3b29kIHRyZWUgZm9yIG1vcmUgdGhhbiB0d28geWVhcnMgdG8gZHJhdyBhdHRlbnRpb24KICAgIHRvIHRoZSBjb250aW51ZWQgY2xlYXJjdXR0aW5nIG9mIENhbGlmb3JuaWEmcnNxdW87cyByZW1haW5pbmcgcmVkd29vZCBmb3Jlc3RzLiBIZXIgY2FtcGFpZ24gZ2FpbmVkIHBvcHVsYXJpdHkKICAgIHdoZW4gc2hlIHN0YXJ0ZWQgdG8gaGF2ZSBvY2Nhc2lvbmFsIHZpc2l0b3JzLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Yi4gV2hhdCBtYWRlIEhpbGwgc3RhcnQgaGVyIG1lZ2EgY2FtcGFpZ24gdG8gc2F2ZSByZWR3b29kIHRyZWVzPzwvc3Bhbj4KICAgIDxicj4KICAgIFdoZW4gc2hlIGFycml2ZWQgaW4gdGhlIHJlZHdvb2QgZm9yZXN0LCBzaGUgd2FzIGdyaXBwZWQgYnkgdGhlIHNwaXJpdCBvZiB0aGUgZm9yZXN0LiBTaGUgZHJvcHBlZCB0byBoZXIga25lZXMKICAgIGFuZCBiZWdhbiB0byBzb2Igc2VlaW5nIHRoZSBjbGVhcmN1dHRpbmcgb2YgcmVkd29vZCB0cmVlcy4gU2hlIHNhdCBhbmQgY3JpZWQgZm9yIGEgbG9uZyB0aW1lIGFuZCBmaW5hbGx5IGRlY2lkZWQKICAgIHRvIHN0YXJ0IGhlciBtZWdhIGNhbXBhaWduIHRvIHNhdmUgcmVkd29vZCB0cmVlcy4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmMuIFdoYXQga2luZHMgb2YgYW1lbml0aWVzIHdlcmUgdGhlcmUgdG8gc3VwcG9ydCBIaWxsJnJzcXVvO3MgbGlmZSBpbiB0aGUgdHJlZT88L3NwYW4+CiAgICA8YnI+CiAgICBIaWxsIGhhZCBhIHNsZWVwaW5nIGJhZywgYSBzb2xhci1wb3dlcmVkIGNlbGwgcGhvbmUgZm9yIG1lZGlhIGludGVydmlld3MsIGFuZCBhIHNpbmdsZS1idXJuZXIgcHJvcGFuZSBzdG92ZSB0bwogICAgY29vayBhbmQgaGVhdCB3YXRlciB0byBzdXBwb3J0IGhlciBsaWZlIGluIHRoZSB0cmVlLiBTaGUgaGFkIGZldyBuZWNlc3NpdGllcywgYW5kIG5vIGx1eHVyaWVzLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZC4gRGlkIEhpbGwncyB2YWx1ZSBvZiBsaWZlIGNoYW5nZSBhZnRlciBoZXIgY2FyIGFjY2lkZW50PyBIb3c/PC9zcGFuPgogICAgPGJyPgogICAgWWVzLCBIaWxsJnJzcXVvO3MgdmFsdWUgb2YgbGlmZSBjaGFuZ2VkIGFmdGVyIGhlciBjYXIgYWNjaWRlbnQuIFNoZSBzYWlkIHRoZSBleHBlcmllbmNlIHdhcyBhIHdha2UtdXAgY2FsbC4KICAgIEJlZm9yZSBhY2NpZGVudCBoZXIgbWFpbiBmb2N1cyBoYWQgYmVlbiB3b3JrIGJ1dCBsYXRlciBvbiBzaGUgYmVjYW1lIGNsZWFyIHRoYXQgdmFsdWUgYXMgcGVvcGxlIGlzIG5vdCBpbiB0aGVpcgogICAgc3RvY2sgcG9ydGZvbGlvcyBhbmQgYmFuayBhY2NvdW50cywgYnV0IGl0IGlzIGluIHRoZSBsZWdhY2llcyB0aGV5IGxlYXZlIGJlaGluZC4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmUuIERlZm9yZXN0YXRpb24gY2F1c2VzIG5hdHVyYWwgY2FsYW1pdGllcy4gV2hhdCBldmlkZW5jZSBkbyB5b3UgaGF2ZSBpbiB0aGUgdGV4dCB0byBwcm92ZSB0aGlzPzwvc3Bhbj4KICAgIDxicj4KICAgIFllcyBpdCZyc3F1bztzIHRydWUgdGhhdCBkZWZvcmVzdGF0aW9uIGNhdXNlcyBuYXR1cmFsIGNhbGFtaXRpZXMuIEluIHRoZSB0ZXh0IHdlIGNhbiBzZWUgdGhhdCB0aGUgY3V0dGluZyBvZgogICAgcmVkd29vZHMgZGVzdGFiaWxpemVkIHRoZSBoaWxsc2lkZSBhbmQgY2F1c2VkIHRoZSBtdWRzbGlkZSB3aGljaCBjYXJyaWVkIHRyZWVzLCBzdHVtcHMgYW5kIGRlYnJpcyBmcm9tIHRoYXQKICAgIGhpbGxzaWRlIGRvd24gaW50byB0aGUgdG93biwgbGVhdmluZyBzZXZlbiBmYW1pbGllcyB3aXRob3V0IGhvbWVzLgogICAgPGJyPgogICAgPGJyPgoKICAgIDxzcGFuPmYuIEhvdyBkaWQgdGhlIGxvZ2dpbmcgY29tcGFueSB0cnkgdG8gZGlzY291cmFnZSBIaWxsIGluIHRoZSBlYXJseSBkYXlzIG9mIGhlciBzaXQtaW4/PC9zcGFuPgogICAgPGJyPgogICAgVGhlIGxvZ2dpbmcgY29tcGFueSB0cmllZCB0byBkaXNjb3VyYWdlIEhpbGwgaW4gdGhlIGVhcmx5IGRheXMgb2YgaGVyIHNpdC1pbiBieSBoaXJpbmcgMjQtaG91ciBzZWN1cml0eSBndWFyZHMKICAgIHRvIGhhcmFzcyBoZXIgYW5kIHRvIGVuc3VyZSBoZXIgc3VwcG9ydCB0ZWFtIGNvdWxkbiZyc3F1bzt0IGRlbGl2ZXIgaGVyIHN1cHBsaWVzLiBTaGUgd2FzIG1lbmFjZWQgd2l0aCBhCiAgICBoZWxpY29wdGVyIGF0IGEgZGFuZ2Vyb3VzbHkgY2xvc2UgcmFuZ2UuIEEgbmVpZ2hib3JpbmcgdHJlZSB3YXMgZmVsbGVkLCBoaXR0aW5nIEx1bmEmcnNxdW87cyBvdXRlciBicmFuY2hlcyBhbmQKICAgIG5lYXJseSBjYXVzaW5nIEhpbGwgdG8gZmFsbC4gU2hlIHdhcyB2ZXJiYWxseSBhYnVzZWQsIHRocmVhdGVuZWQgd2l0aCB2aW9sZW5jZSwgcmFwZSBhbmQgZGVhdGgsIGtlcHQgYXdha2Ugd2l0aAogICAgZmxvb2RsaWdodHMsIGFuZCBidWdsZXMgYW5kIGFpciBob3JucyB3ZXJlIGJsb3duIHRocm91Z2ggdGhlIG5pZ2h0LgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Zy4gSG93IHdlcmUgdGhlIHZhZ2FyaWVzIG9mIG5hdHVyZSB1bndlbGNvbWluZyB0byBIaWxsPzwvc3Bhbj4KICAgIDxicj4KICAgIFRoZSBsb2dnaW5nIGNvbXBhbnkgd2FzbiZyc3F1bzt0IGhlciBvbmx5IHByb2JsZW0uIE9uZSBvZiBoZXIgc2Nhcmllc3QgdGltZXMgd2FzIGEgMTYtaG91ciwgNzAtbXBoIHdpbmRzdG9ybQogICAgdGhhdCBzaHJlZGRlZCB0aGUgdGFycHMgdGhhdCBzdXJyb3VuZGVkIGhlciwgYW5kIGV2ZW4gcmlwcGVkIGh1Z2UgYnJhbmNoZXMgb2ZmIHRoZSB0cmVlLiBXaGVuIGxpZ2h0bmluZyBzdHJ1Y2sKICAgIG5lYXJieSBkdXJpbmcgYW4gZWxlY3RyaWNhbCBzdG9ybSwgaGVyIGhhaXIgc3Rvb2Qgc3RyYWlnaHQgdXAuIEluIHRoaXMgd2F5IHRoZSB2YWdhcmllcyBvZiBuYXR1cmUgd2VyZQogICAgdW53ZWxjb21pbmcgdG8gSGlsbC4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmguIFdoYXQgaXMgdGhlIHB1cnBvc2Ugb2YgdGhlIGF1dGhvciB0byB3cml0ZSBhIHJldmlldyBvbiBIaWxsJnJzcXVvO3MgYm9vaz8gRG8geW91IHRoaW5rIHRoZSBhdXRob3Igc3RhbmRzCiAgICAgICAgZm9yCiAgICAgICAgZWNvbG9naWNhbCBzdXN0YWluYWJpbGl0eT8gR2l2ZSByZWFzb25zLjwvc3Bhbj4KICAgIDxicj4KICAgIFRoZSBwdXJwb3NlIG9mIHRoZSBhdXRob3IgdG8gd3JpdGUgYSByZXZpZXcgb24gSGlsbCZyc3F1bztzIGJvb2sgaXMgdG8gYnJpbmcgYSBzcG90bGlnaHQgdG8gdGhlIGlzc3VlIG9mCiAgICBkZWZvcmVzdGF0aW9uLiBIZSB3YW50cyBwZW9wbGUgdG8gbGVhcm4gYWJvdXQgdGhlIGRlZm9yZXN0YXRpb24gYW5kIGl0cyBpbGwgZWZmZWN0cyB0aHJvdWdoIGhpcyByZXZpZXcgYW5kIG1ha2UKICAgIHBlb3BsZSBrbm93IGFib3V0IHdoYXQgYSBwZXJzb24gc2hvdWxkIGRvIHRvIHByZXZlbnQgZnJvbSB0aGlzIHNob3VsZC4gWWVzIEkgdGhpbmsgdGhlIGF1dGhvciBzdGFuZHMgZm9yCiAgICBlY29sb2dpY2FsIHN1c3RhaW5hYmlsaXR5LgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgoKICAgIDxoMz5Xcml0aW5nPC9oMz4KICAgIDxicj4KCiAgICA8c3Bhbj5BLiBXcml0ZSBhIHJldmlldyBvZiBhIGJvb2svZmlsbSB3aGljaCB5b3UgaGF2ZSByZWFkL3dhdGNoZWQgcmVjZW50bHkuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPHAgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsgZm9udC13ZWlnaHQ6IGJvbGQ7IGZvbnQtc2l6ZTogbGFyZ2U7Ij5UaGUgVGltZSBNYWNoaW5lPC9wPgogICAgPGJyPgogICAgPGI+MS4gVGl0bGUgb2YgdGhlIEJvb2s6PC9iPiBUaGUgVGltZSBNYWNoaW5lCiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj4yLiBBdXRob3Igb2YgdGhlIEJvb2s6PC9iPiBILkcuIFdlbGxzCiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj4zLiBDb3VudHJ5OjwvYj4gVW5pdGVkIEtpbmdkb20KICAgIDxicj4KICAgIDxicj4KICAgIDxiPjQuIExhbmd1YWdlOjwvYj4gRW5nbGlzaAogICAgPGJyPgogICAgPGJyPgogICAgPGI+NS4gRmlyc3Qgb3JpZ2luYWxseSBwdWJsaXNoZWQgYnk6PC9iPiBXaWxsaWFtIEhlaW5lbWFubiwgTG9uZG9uIGluIDE4OTUuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj42LiBHZW5yZTo8L2I+IFNjaWVuY2UgRmljdGlvbiBOb3ZlbAogICAgPGJyPgogICAgPGJyPgogICAgPGI+Ny4gQ29zdCBvZiB0aGUgQm9vazo8L2I+IFJzLiAzMDAKICAgIDxicj4KICAgIDxicj4KICAgIDxiPjguIE5hbWUgb2YgdGhlIFB1Ymxpc2hlcjo8L2I+IERvdmVyIFB1YmxpY2F0aW9ucwogICAgPGJyPgogICAgPGJyPgogICAgPGI+OS4gRWRpdGlvbiBhbmQgeWVhciBvZiBDb3B5cmlnaHQ6PC9iPiBBcHJpbCAzLCAxOTk1CiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj4xMC4gTm8uIG9mIHBhZ2VzOjwvYj4gODAKICAgIDxicj4KICAgIDxicj4KICAgIDxiPjExLiBXcml0aW5nIHN0eWxlOjwvYj4gTmFycmF0aXZlCiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj4xMi4gQ2hhcmFjdGVyczo8L2I+IFRoZSBOYXJyYXRvci1IaWxseWVyLCBFbG9pLCBNb3Jsb2NrcywgV2VlbmEKICAgIDxicj4KICAgIDxicj4KCiAgICA8Yj4xMy4gUGxvdDo8L2I+IFRoZSBzdG9yeSBmb2xsb3dzIGEgVmljdG9yaWFuIHNjaWVudGlzdCwgd2hvIGNsYWltcyB0aGF0IGhlIGhhcyBpbnZlbnRlZCBhIGRldmljZSB0aGF0IGVuYWJsZXMgaGltCiAgICB0bwogICAgdHJhdmVsIHRocm91Z2ggdGltZSwgYW5kIGhhcyB2aXNpdGVkIHRoZSBmdXR1cmUsIGFycml2aW5nIGluIHRoZSB5ZWFyIDgwMiw3MDEgaW4gd2hhdCBoYWQgb25jZSBiZWVuIExvbmRvbi4gVGhlCiAgICBuYXJyYXRvciByZWNvdW50cyB0aGUgVHJhdmVsZXImcnNxdW87cyBsZWN0dXJlIHRvIGhpcyB3ZWVrbHkgZGlubmVyIGd1ZXN0cyB0aGF0IHRpbWUgaXMgc2ltcGx5IHRoZSBmb3VydGgKICAgIGRpbWVuc2lvbiBhbmQgZGVtb25zdHJhdGVzIGEgdGFibGV0b3AgbW9kZWwgbWFjaGluZSBmb3IgdHJhdmVsbGluZyB0aHJvdWdoIHRoZSBmb3VydGggZGltZW5zaW9uLiBIZSByZXZlYWxzIHRoYXQKICAgIGhlIGhhcyBidWlsdCBhIG1hY2hpbmUgY2FwYWJsZSBvZiBjYXJyeWluZyBhIHBlcnNvbiB0aHJvdWdoIHRpbWUgYW5kIHJldHVybnMgYXQgZGlubmVyIHRoZSBmb2xsb3dpbmcgd2VlayB0bwogICAgcmVjb3VudCBhIHJlbWFya2FibGUgdGFsZSwgYmVjb21pbmcgdGhlIG5ldyBuYXJyYXRvci4KICAgIDxicj4KICAgIDxicj4KCiAgICA8Yj4xNC4gU3VtbWFyeTo8L2I+IEEgZ3JvdXAgb2YgbWVuLCBpbmNsdWRpbmcgdGhlIG5hcnJhdG9yLCBpcyBsaXN0ZW5pbmcgdG8gdGhlIFRpbWUgVHJhdmVsZXIgZGlzY3Vzc2luZyBoaXMgdGhlb3J5CiAgICB0aGF0IHRpbWUgaXMgdGhlIGZvdXJ0aCBkaW1lbnNpb24uIFRoZSBUaW1lIFRyYXZlbGVyIHByb2R1Y2VzIGEgbWluaWF0dXJlIHRpbWUgbWFjaGluZSBhbmQgbWFrZXMgaXQgZGlzYXBwZWFyCiAgICBpbnRvIHRoaW4gYWlyLiBUaGUgbmV4dCB3ZWVrLCB0aGUgZ3Vlc3RzIHJldHVybiwgdG8gZmluZCB0aGVpciBob3N0IHN0dW1ibGUgaW4sIGxvb2tpbmcgZGlzaGV2ZWxlZCBhbmQgdGlyZWQuCiAgICBUaGV5IHNpdCBkb3duIGFmdGVyIGRpbm5lciwgYW5kIHRoZSBUaW1lIFRyYXZlbGVyIGJlZ2lucyBoaXMgc3RvcnkuCiAgICA8YnI+CiAgICA8YnI+CgogICAgPGI+MTUuIE15IEltcHJlc3Npb25zOjwvYj4gVGhlIHRpbWUgdHJhdmVsZXImcnNxdW87cyBtYWNoaW5lIGlzIGRlc2NyaWJlZCBpbiBzdWNoIHNrZXRjaHkgdGVybXMgdGhhdCBpdCBjYW4gc2NhcmNlbHkKICAgIGJlIGJlbGlldmVkIGFzIGFuIGluc3RydW1lbnQgb2Ygc2NpZW5jZSwgYW5kIHRoZSB0aW1lIHRyYXZlbGVyJnJzcXVvO3MgYWNjb3VudCBpcyBzaW1pbGFybHkgc2tldGNoeSBhbmQgYml6YXJyZS4KICAgIFRoZSB2ZXJ5IG5hdHVyZSBvZiB0aW1lIHRyYXZlbCBtZWFucyB0aGF0IGhlJnJzcXVvO3MgYXdheSBmb3Igb25seSBhIHNob3J0IHBlcmlvZCBvZiB0aW1lLCBhbmQgdGhlIG9ubHkKICAgICZsZHF1bztwcm9vZiZyZHF1bzsgb2YgaGlzIHRyYXZlbHMgaXMgYSBjcnVuY2hlZCB1cCBmbG93ZXIuIEFuZCBnaXZlbiB0aGF0IHRoZSBuYXJyYXRpdmUgaXMgdG9sZCBpbiBhCiAgICB0d2ljZS1yZW1vdmVkIG1hbm5lciwgdGhlIHJlYWRlciBjYW4mcnNxdW87dCBoZWxwIGJ1dCB3b25kZXIgd2hldGhlciBhbnkgb2YgdGhlIG5vdmVscyBpcyB0cnVlIGF0IGFsbC4gRGlkIHRoZQogICAgdGltZSB0cmF2ZWxlciB0cnVseSBlbmdhZ2UgaW4gc3VjaCBjaHJvbm9sb2dpY2FsIHNoZW5hbmlnYW5zLCBhbmQgZGlkIGhlIGV4cGVyaWVuY2Ugd2hhdCBoZSBjbGFpbXM/IE9yIGlzIGhlCiAgICBzaW1wbHkgdXNpbmcgYW4gaW1hZ2luZWQgZnV0dXJlIHRvIHByb3ZpZGUgYSB3YXJuaW5nIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlIG9mIHNvY2lldHk/IEJ1dCB0aGUgcmVhbGl0eSBpcyB0aGF0CiAgICBuZWl0aGVyIHRoZSB0cnV0aCBub3IgdGhlIGpvdXJuZXkgbWF0dGVyczogaXQmcnNxdW87cyBvbmx5IHRoZSBvdXRjb21lLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgoKICAgIDxzcGFuPgogICAgICAgIEIuIFlvdXIgc2Nob29sIGlzIGdvaW5nIHRvIG9yZ2FuaXplIGEgc3BlZWNoIGNvbXBldGl0aW9uIG9uIGNvbWluZyBGcmlkYXkuIFRoZSBzdWJqZWN0IG9mIHRoZSBzcGVlY2ggaXMKICAgICAgICAmbGRxdW87TGV0JnJzcXVvO3Mgc2F2ZSB0aGUgdHJlZXMgYW5kIHByb3RlY3Qgb3VyIGVudmlyb25tZW50LiZyZHF1bzsgRHJhZnQgYSBzcGVlY2ggdXNpbmcgdGhlIGZvbGxvd2luZwogICAgICAgIHByb21wdHMuCiAgICA8L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8cCBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyBmb250LXdlaWdodDogYm9sZDsgZm9udC1zaXplOiBsYXJnZTsiPkxldCZyc3F1bztzIFNhdmUgdGhlIFRyZWVzIGFuZCBQcm90ZWN0IE91cgogICAgICAgIEVudmlyb25tZW50PC9wPgogICAgPGJyPgogICAgR29vZCBtb3JuaW5nIGV2ZXJ5b25lLCB0aGFuayB5b3UgZm9yIGdpdmluZyBtZSB0aGUgb3Bwb3J0dW5pdHkgdG8gc3BlYWsgb24gc3VjaCBhbiBpbXBvcnRhbnQgdG9waWMgTGV0JnJzcXVvO3MKICAgIFNhdmUgdGhlIFRyZWVzIGFuZCBQcm90ZWN0IE91ciBFbnZpcm9ubWVudC4gV2hlbiBvbmUgdGhpbmtzIG9mIHRoZSBtb3N0IGltcG9ydGFudCBlbGVtZW50IHRvIHN1cnZpdmUgdGhlIGFuc3dlcgogICAgdGhhdCBhbHdheXMgY29tZXMgdG8gb3VyIG1pbmQgaXMgYWlyLiBBaXIgaXMgaW1wb3J0YW50IGZvciBhbGwgbGl2aW5nIGJlaW5ncyBiZSBpdCBhbmltYWxzIG9yIGh1bWFucy4gVGhlIHRyZWVzCiAgICB3aGljaCBvY2N1cHkgMzIlIG9mIHRoZSBlYXJ0aCZyc3F1bztzIHN1cmZhY2UgcHJvdmlkZSB1cyB3aXRoIHRoaXMgYWlyLgogICAgPGJyPgogICAgPGJyPgogICAgVGhlIHRyZWVzIG9mIHRoZSBwbGFuZXQgYWN0IGFzIHRoZSBsdW5ncyBpbiBvdXIgYm9keSBhbmQgcHVyaWZ5IHRoZSBhaXIgd2UgYnJlYXRoZS4gSXQgaXMgZHVlIHRvIHRoZSBleGlzdGVuY2UKICAgIG9mIHRyZWVzIHdlIGluaGFsZSBmcmVzaCBhaXIuIEFzIHRyZWVzIGluaGFsZSBjYXJib24gZGlveGlkZSBhbmQgZXhoYWxlIG94eWdlbiB3aGljaCBzZXJ2ZXMgYXMgdGhlIGltcG9ydGFudAogICAgbGlmZSBzb3VyY2Ugb2YgYWxsIGxpdmluZyBiZWluZ3MuIFRoZSBtb3JlIHRyZWVzIHRoZSBwbGFuZXQgaGFzIHRoZSBmcmVzaGVyIGFuZCBwdXJlciB0aGUgYWlyIHdlIGJyZWF0aGUuCiAgICA8YnI+CiAgICA8YnI+CiAgICBNYW4mcnNxdW87cyBhdHRlbXB0IHRvIG91dGxpdmUgbmF0dXJlIGlzIGNvc3RpbmcgdXMgYW4gdW5mb3J0dW5hdGUgcHJpY2UuIFRoaXMgZHJpdmUgZm9yIGNpdmlsaXphdGlvbiBhbmQKICAgIG1vZGVybml6YXRpb24gaXMgaGFybWluZyB0aGUgZW52aXJvbm1lbnQgYW5kIHRoZXJlZm9yZSB0aGUgcGxhbmV0IHRvIGFuIGlycmV2ZXJzaWJsZSBleHRlbnQuIFdoZW4gbWFuIHZpb2xhdGVzCiAgICBuYXR1cmUgdGhlIHBsYW5ldCBzdWZmZXJzIGFuZCB3ZSBoYXZlIHRvIGJlYXIgdGhlIGhhcm1mdWwgY29uc2VxdWVuY2VzLiBMZXQmcnNxdW87cyB1bmRlcnN0YW5kIGhvdy4KICAgIDxicj4KICAgIDxicj4KICAgIFRoZSByb2FkIHRvIGNpdmlsaXphdGlvbiBpcyBtb3JlIG9mdGVuIHRocm91Z2ggdGhlIHdheSBieSBkZXN0cm95aW5nIG5hdHVyYWwgcmVzb3VyY2VzLgogICAgPGJyPgogICAgPGJyPgogICAgTWFuIHZpZXdzIHRyZWVzIGFzIHJvYWRibG9ja3MgaW4gbW9kZXJuaXphdGlvbiwgdGhhdCBpcyB0aGV5IHNlZSBpdCBhcyBpdCBjb21lcyBpbiB0aGUgd2F5IG9mIGJ1aWxkaW5nIG1vcmUKICAgIGJ1aWxkaW5ncyBhbmQgcm9hZHMuIFNvIHRoZXkgdGVuZCB0byBkZWZvcmVzdGF0aW9uLCB3aGljaCBpcyBhbiBhY3Qgb2YgY3V0dGluZyBkb3duIHRyZWVzLiBXaGVuIHRyZWVzIGFyZSBjdXQKICAgIHRoZXkgYnVpbGQgbW9yZSBob21lcyBhbmQgb2ZmaWNlcyBpbiB0aGUgbGFuZC4KICAgIDxicj4KICAgIDxicj4KICAgIERlZm9yZXN0YXRpb24gbGVhZHMgdG8gbWFueSB1bm5hdHVyYWwgdGhpbmdzIHRoYXQgZGlzcnVwdCB0aGUgYmFsYW5jZSBvZiBuYXR1cmUuIER1ZSB0byBkZWZvcmVzdGF0aW9uLCBhaXIKICAgIHBvbGx1dGlvbiBpbmNyZWFzZXMsIGFuZCBnbG9iYWwgd2FybWluZyByaXNlcy4gQW5pbWFscyBsb3NlIHRoZWlyIGhvbWUgYW5kIHNoZWx0ZXIsIHRoZSBxdWFsaXR5IG9mIHRoZSBzb2lsCiAgICB3aGVyZSBkZWZvcmVzdGF0aW9uIGlzIHByYWN0aWNlZCBkZXRlcmlvcmF0ZXMgZHVlIHRvIHRoZSB1bnRpbWVseSByZW1vdmFsIG9mIHJvb3RzIG9mIHRyZWVzIGxlYWRpbmcgdG8gc29pbAogICAgZXJvc2lvbi4KICAgIDxicj4KICAgIDxicj4KICAgIEFzIHRoZWlyIHBvcHVsYXRpb24gaXMgb25seSBpbmNyZWFzaW5nLCBpdCBpcyBpbXBlcmF0aXZlIHRvIGhhdmUgbW9yZSB0cmVlcyBzbyB0aGF0IHRoZSBuZXh0IGdlbmVyYXRpb24gbGl2ZXMKICAgIGJyZWF0aGluZyBmcmVzaCBhaXIuIElmIGRlZm9yZXN0YXRpb24gY29udGludWVzIHRoZSBwbGFuZXQgd2lsbCBub3QgYmUgYWJsZSB0byBpbmhhYml0IGZ1dHVyZSBnZW5lcmF0aW9ucwogICAgYmVjYXVzZSBvZiB0aGUgaW1iYWxhbmNlIGl0IGV4cGVyaWVuY2VzLgogICAgPGJyPgogICAgPGJyPgogICAgVGhlIGJlc3Qgd2F5IHRvIHNvbHZlIHRoaXMgcHJvYmxlbSBpcyBieSBhdm9pZGluZyBkZWZvcmVzdGF0aW9uIGFuZCBtb3ZpbmcgdG93YXJkcyBhZmZvcmVzdGF0aW9uIHRoYXQgaXMKICAgIHBsYW50aW5nIHRyZWVzLiBXZSBzaG91bGQgYWxsIHN0cml2ZSB0byBzYXZlIG91ciBob21lIHdoaWNoIGlzIHRoZSBwbGFuZXQuIEV2ZW4gcGxhbnRpbmcgb25lIHRyZWUgY2FuIHNhdmUgc28KICAgIG1hbnkgbGl2ZXMuCiAgICA8YnI+CiAgICA8YnI+CiAgICBJdCBpcyBoaWdoIHRpbWUgdGhhdCB3ZSB0YWtlIGFjdGlvbiBhbmQgcHJvdGVjdCB0aGUgZW52aXJvbm1lbnQgd2hpY2ggbm91cmlzaGVzIGFsbCBsaXZpbmcgYW5kIGJyZWF0aGluZwogICAgY3JlYXR1cmVzLiBXaGVuIHNhdmluZyB0cmVlcyB0aGV5IHNhdmUgbGl2ZXMgYW5kIGluZXZpdGFibHkgc2F2ZSB0aGUgcGxhbmV0LiBTYXZpbmcgdHJlZXMgYW5kIHByb3RlY3RpbmcKICAgIGVudmlyb25tZW50IGlzIHRoZSBtb3R0byB3ZSBzaG91bGQgYWxsIGxpdmUgYnkuIExldCZyc3F1bztzIGxlYXZlIGJlaGluZCBhIGdyZWVuIHBsYW5ldCBmb3IgdGhlIG5leHQgZ2VuZXJhdGlvbi4KICAgIFNwcmVhZCB0aGUgd29yZCBhbmQgdGFrZSBhY3Rpb24gdG8gc2F2ZSB0cmVlcyBhbmQgaW4gdGhhdCB3YXksIHdlIGNhbiBwcm90ZWN0IHRoZSBlbnZpcm9ubWVudC4KICAgIDxicj4KICAgIDxicj4KICAgIFRoYW5rcyBmb3IgdGhlIHBhdGllbnQgaGVhcmluZyEKICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KCiAgICA8aDM+R3JhbW1hcjwvaDM+CiAgICA8YnI+CgogICAgPHNwYW4+CiAgICAgICAgQi4gU29tZW9uZSBzYXlzIHNvbWV0aGluZyB0byB5b3Ugd2hpY2ggY29udHJhZGljdHMgdG8gd2hhdCB0aGV5IHRvbGQgeW91IGVhcmxpZXIuIE1hdGNoIHRoZSBiZWdpbm5pbmdzIG9mIHRoZQogICAgICAgIGNvbnZlcnNhdGlvbnMgd2l0aCB0aGUgY29ycmVjdCBlbmRpbmdzLgogICAgPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgoKICAgIDxzcGFuPmEuIEknbSBnb2luZyB0byBQb2toYXJhIG9uIGhvbGlkYXkuPC9zcGFuPgogICAgPGJyPgogICAgWW91IHNhaWQgeW91IHdlcmUgZ29pbmcgb24gYnVzaW5lc3MuCiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+Yi4gSGUncyBhIGxhd3llci48L3NwYW4+CiAgICA8YnI+CiAgICBZb3UgdG9sZCBtZSBoZSB3YXMgYSB0ZWFjaGVyLgogICAgPGJyPgogICAgPGJyPgoKICAgIDxzcGFuPmMuIFNoZSdzIGhhZCBhIGJhYnkgZ2lybC48L3NwYW4+CiAgICA8YnI+CiAgICBZb3Ugc2FpZCBzaGUnZCBoYWQgYSBib3kuCiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+ZC4gSSBoYXZlbid0IHNlZW4gQmluZXNoIGZvciBhZ2VzLjwvc3Bhbj4KICAgIDxicj4KICAgIFlvdSB0b2xkIG1lIHlvdSdkIHNlZW4gaGltIHByZXZpb3VzIHdlZWsuCiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+ZS4gSSBsb3ZlIHRoZXNlIG5ldyBib290cy48L3NwYW4+CiAgICA8YnI+CiAgICBZb3Ugc2FpZCB5b3UgaGF0ZWQgdGhlbS4KICAgIDxicj4KICAgIDxicj4KCiAgICA8c3Bhbj5mLiBJIG9ubHkgY2hlYXRlZCBpbiBvbmUgZXhhbS48L3NwYW4+CiAgICA8YnI+CiAgICBZb3UgYWRtaXR0ZWQgeW91IGNoZWF0ZWQgaW4gYWxsIHlvdXIgZXhhbXMuCiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+Zy4gU2hlIGRvZXNuJ3Qgc3BlYWsgSGluZGkgb3IgQ2hpbmVzZS48L3NwYW4+CiAgICA8YnI+CiAgICBZb3UgdG9sZCBtZSBzaGUgd2FzIGZsdWVudCBpbiBib3RoLgogICAgPGJyPgogICAgPGJyPgoKICAgIDxzcGFuPmguIEhlIHdvcmtzIGluIEthdGhtYW5kdS48L3NwYW4+CiAgICA8YnI+CiAgICBZb3UgdG9sZCBtZSBoaXMgb2ZmaWNlIHdhcyBpbiBCaXJhdG5hZ2FyLgogICAgPGJyPgogICAgPGJyPgoKCiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+Qy4gUmV3cml0ZSB0aGUgZm9sbG93aW5nIHNlbnRlbmNlcyB3aXRoIHRoZSBzZW50ZW5jZSBiZWdpbm5pbmdzIGdpdmVuIGJlbG93Ljwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KCiAgICA8c3Bhbj5hLiBUaGUgcHJpbmNpcGFsIHNhaWQsICZsZHF1bztZb3UgY2FuIHBob25lIGZyb20gbXkgb2ZmaWNlLCBSaXRhLiZyZHF1bzs8L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgcHJpbmNpcGFsIHNhaWQgdGhhdCBzaGUgY291bGQgcGhvbmUgZnJvbSBoaXMgb2ZmaWNlLgogICAgPGJyPgogICAgPGJyPgoKICAgIDxzcGFuPmIuICZsZHF1bztZb3UgbXVzdCBub3QgbmVnbGVjdCB5b3VyIGR1dHksJnJkcXVvOyBzYWlkIHRoZSB0ZWFjaGVyIHRvIHRoZSBzdHVkZW50Ljwvc3Bhbj4KICAgIDxicj4KICAgIFRoZSB0ZWFjaGVyIHRvbGQgdGhlIHN0dWRlbnQgdGhhdCBoZS9zaGUgbXVzdCBub3QgbmVnbGVjdCBoaXMvaGVyIGR1dHkuCiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+Yy4gVGhlIHN0dWRlbnQgc2FpZCwgJmxkcXVvO1NpciwgcGxlYXNlLCBncmFudCBtZSBhIGxlYXZlIGZvciB0d28gZGF5cy4mcmRxdW87PC9zcGFuPgogICAgPGJyPgogICAgVGhlIHN0dWRlbnQgcmVxdWVzdGVkIHRvIGdyYW50IGhpbSBsZWF2ZSBmb3IgdHdvIGRheXMuCiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+ZC4gSSBzYWlkIHRvIGhlciwgJmxkcXVvO0dvIHRvIHNjaG9vbCBvciB5b3Ugd2lsbCBiZSBmaW5lZC4mcmRxdW87PC9zcGFuPgogICAgPGJyPgogICAgU2hlIHdhcyB0b2xkIHRvIGdvIHRvIHNjaG9vbCBvciBzaGUgd291bGQgYmUgZmluZWQuCiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+ZS4gVGhlIGhlYWRtYXN0ZXIgc2FpZCwgJmxkcXVvO0RvbiZyc3F1bzt0IG1ha2UgYW55IG5vaXNlLCBib3lzLiZyZHF1bzs8L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgaGVhZG1hc3RlciBhc2tlZCBib3lzIG5vdCB0byBtYWtlIGFueSBub2lzZS4KICAgIDxicj4KICAgIDxicj4KCiAgICA8c3Bhbj5mLiAmbGRxdW87V29yayBoYXJkIGlmIHlvdSB3YW50IHRvIHJpc2UgaW4gbGlmZSwmcmRxdW87IHNhaWQgdGhlIG9sZCBtYW4uPC9zcGFuPgogICAgPGJyPgogICAgVGhlIG9sZCBtYW4gc3VnZ2VzdGVkIHdvcmtpbmcgaGFyZCBpZiB0aGV5IHdhbnRlZCB0byByaXNlIGluIGxpZmUuCiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+Zy4gSGUgc2FpZCwgJmxkcXVvO0dvb2RieWUsIG15IGZyaWVuZHMhJnJkcXVvOzwvc3Bhbj4KICAgIDxicj4KICAgIEhlIHNhaWQgZ29vZGJ5ZSB0byBoaXMgZnJpZW5kcy4KICAgIDxicj4KICAgIDxicj4KCiAgICA8c3Bhbj5oLiBTaGUgc2FpZCB0byBtZSwgJmxkcXVvO0hhdmUgYSBwbGVhc2FudCBqb3VybmV5IGFoZWFkLiZyZHF1bzs8L3NwYW4+CiAgICA8YnI+CiAgICBTaGUgdG9sZCBtZSB0byBoYXZlIGEgcGxlYXNhbnQgam91cm5leSBhaGVhZC4KICAgIDxicj4KICAgIDxicj4KCiAgICA8c3Bhbj5pLiAmbGRxdW87RG9uJnJzcXVvO3QgZ2l2ZSBtZSB0aGUgYm9vaywgcGxlYXNlLCZyZHF1bzsgU2hhcm1pbGEgc2FpZC48L3NwYW4+CiAgICA8YnI+CiAgICBTaGFybWlsYSBwbGVhZGVkIG5vdCB0byBnaXZlIGhlciB0aGUgYm9vay4KICAgIDxicj4KICAgIDxicj4KCiAgICA8c3Bhbj5qLiAmbGRxdW87V2hlcmUgaGF2ZSB5b3UgYmVlbiB0aGVzZSBkYXlzPyZyZHF1bzsgc2hlIHNwb2tlIG9uIHRoZSB0ZWxlcGhvbmUuPC9zcGFuPgogICAgPGJyPgogICAgSGUgYXNrZWQgb24gdGhlIHRlbGVwaG9uZSB3aGVyZSBJIGhhZCBiZWVuIHRob3NlIGRheXMuCiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+ay4gVGhlIHRlYWNoZXIgc2FpZCwgJmxkcXVvO0hhdmUgeW91IHN1Ym1pdHRlZCB5b3VyIGFzc2lnbm1lbnRzLCBzdHVkZW50cz8mcmRxdW87PC9zcGFuPgogICAgPGJyPgogICAgVGhlIHRlYWNoZXIgYXNrZWQgc3R1ZGVudHMgaWYgdGhleSBoYWQgc3VibWl0dGVkIHRoZWlyIGFzc2lnbm1lbnRzLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgoKICAgIDxzcGFuPkQuIFRoZXNlIGFyZSB0aGUgZXhhY3Qgd29yZHMgRGluZXNoIHNhaWQgdG8geW91IHllc3RlcmRheS48L3NwYW4+CiAgICA8YnI+CiAgICA8aT4KICAgICAgICAmcXVvdDtJJ3ZlIGp1c3QgZ290IGVuZ2FnZWQhIFdlJ3JlIGdldHRpbmcgbWFycmllZCBuZXh0IG1vbnRoLiBXZSdyZSBnb2luZyB0byBQb2toYXJhIGZvciBvdXIgaG9uZXltb29uLiBJdCdzCiAgICAgICAgYWxsIGdvaW5nIHRvIGJlIHZlcnkgZXhwZW5zaXZlLiBMdWNraWx5LCBteSBmcmllbmQgaXMgYSBwaG90b2dyYXBoZXIgc28gaGUnbGwgdGFrZSB0aGUgcGhvdG9zIGZvciB1cy4gV2UnbGwgYmUKICAgICAgICBoYXZpbmcgdGhlIHJlY2VwdGlvbiBpbiBteSBwYXJlbnRzJyBiYWNrIGdhcmRlbi4gTXkgbXVtIGlzIGJha2luZyB0aGUgY2FrZSBmb3IgdXMgYW5kIG15IHNpc3RlcidzIGJhbmQgaXMKICAgICAgICBwbGF5aW5nIGZyZWUgZm9yIHVzLiBJIGhvcGUgeW91J2xsIGNvbWUgdG8gdGhlIHdlZGRpbmcuJnF1b3Q7CiAgICA8L2k+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5Ob3csIHlvdSdyZSB0ZWxsaW5nIHlvdXIgZnJpZW5kIHdoYXQgRGluZXNoIHRvbGQgeW91LiBDb21wbGV0ZSB0aGUgdGV4dC48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBIZSBzYWlkIGhlICgxKSA8Yj5oYWQ8L2I+IGp1c3QgZ290IGVuZ2FnZWQuIEhlIHRvbGQgbWUgdGhhdCBoZSAoMikgPGI+dGhleSB3ZXJlIGdldHRpbmcgbWFycmllZDwvYj4gbmV4dCBtb250aC4gSGUKICAgIHRvbGQgbWUgKDMpCiAgICB0aGV5IHdlcmUgZ29pbmcgdG8gUG9raGFyYSBmb3IgdGhlaXIgaG9uZXltb29uLiBIZSBtZW50aW9uZWQgdGhhdCBpdCAoNCkgPGI+d2FzIGFsbCBnb2luZyB0byBiZTwvYj4gdmVyeSBleHBlbnNpdmUuCiAgICBIZQogICAgc2FpZCB0aGF0IGhpcyBmcmllbmQgKDUpIDxiPndhcyBhIHBob3RvZ3JhcGhlcjwvYj4gYW5kIGhlICg2KSA8Yj53b3VsZCB0YWtlPC9iPiB0aGUgcGhvdG9zIGZvciB0aGVtLiBIZSBtZW50aW9uZWQKICAgIHRoYXQgdGhleQogICAgKDcpIDxiPndvdWxkIGJlIGhhdmluZzwvYj4gdGhlIHJlY2VwdGlvbiBpbiBoaXMgcGFyZW50cycgZ2FyZGVuLiBIZSBhZG1pdHRlZCB0aGF0ICg4KSA8Yj4KICAgICAgICBoaXMgbXVtIHdhcyBiYWtpbmcgdGhlIGNha2UgZm9yCiAgICAgICAgdGhlbS4KICAgIDwvYj4gSGUgc2FpZCBoaXMgc2lzdGVyJnJzcXVvO3MgYmFuZCAoOSkgPGI+d2FzIHBsYXlpbmcgZnJlZSBmb3IgdGhlbS48L2I+IEhlIHNhaWQgaGUgKDEwKSA8Yj5ob3BlZDwvYj4gSSdkIGNvbWUgdG8KICAgIHRoZQogICAgd2VkZGluZy4KCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CgogICAgTm90ZXMgYnk6IFN1YmFybmEgUG91ZGVsCiAgICA8YnI+PGJyPgoKICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCiAgICA8YnI+PGJyPgo8L2JvZHk+Cgo8L2h0bWw+", "10": "", "11": "", "12": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgoKICAgIDxicj4KICAgIDxjZW50ZXI+VW5pdCAxMgogICAgICAgIDxicj4KICAgICAgICBBbmltYWwgV29ybGQ8L2NlbnRlcj4KCiAgICA8YnI+CiAgICA8YnI+CiAgICA8aDM+V29ya2luZyB3aXRoIHdvcmRzIDwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5BLiBGaW5kIHRoZSB3b3JkcyBmcm9tIHRoZSB0ZXh0IHdoaWNoIGhhdmUgdGhlIGZvbGxvd2luZyBtZWFuaW5ncy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBhLiBQZXJzb25zIHdobyBhcmUgcmVsYXRlZCB0byB5b3UgYW5kIHdobyBsaXZlIGFmdGVyIHlvdSwgc3VjaCBhcyB5b3VyIGNoaWxkIG9yIGdyYW5kY2hpbGQgYXJlIGNhbGxlZCA8Yj5kZXNjZW5kYW50czwvYj4uCiAgICA8YnI+CiAgICA8YnI+CiAgICBiLiA8Yj4mbHNxdW87VHdpcmwmcnNxdW87PC9iPiBtZWFucyB0byB0dXJuIG9yIHNwaW4gYXJvdW5kIGFuZCBhcm91bmQgcXVpY2tseQogICAgPGJyPgogICAgPGJyPgogICAgYy4gPGI+R2x5Y29wcm90ZWluczwvYj4gYXJlIHByb3RlaW5zIHdoaWNoIGNvbnRhaW4gb2xpZ29zYWNjaGFyaWRlIGNoYWlucyAoZ2x5Y2FucykgYXR0YWNoZWQgdG8gYW1pbm8gYWNpZCBzaWRlLWNoYWlucwogICAgPGJyPgogICAgPGJyPgogICAgZC4gPGI+TGVjdGluczwvYj4gYXJlIGNhcmJvaHlkcmF0ZS1iaW5kaW5nIHByb3RlaW5zIHRoYXQgYXJlIGhpZ2hseSBzcGVjaWZpYyBmb3Igc3VnYXIgZ3JvdXBzIHRoYXQgYXJlIHBhcnQgb2Ygb3RoZXIKICAgIG1vbGVjdWxlcyBhbmQgc28gY2F1c2UgYWdnbHV0aW5hdGlvbiBvZiBwYXJ0aWN1bGFyIGNlbGxzLgogICAgPGJyPgogICAgPGJyPgogICAgZS4gPGI+UG9seXBzPC9iPiBhcmUgYWJub3JtYWwgdGlzc3VlIGdyb3d0aHMgdGhhdCBtb3N0IG9mdGVuIGxvb2sgbGlrZSBzbWFsbCwgZmxhdCBidW1wcyBvciB0aW55IG11c2hyb29tIGxpa2Ugc3RhbGtzIGZvdW5kCiAgICBpbiB0aGUgcGh5bHVtIENuaWRhcmlhIGFuZCB0aGUgbWVkdXNhCiAgICA8YnI+CiAgICA8YnI+CiAgICBmLiA8Yj5QcmVkYXRpb248L2I+IGlzIGEgYmlvbG9naWNhbCBpbnRlcmFjdGlvbiB3aGVyZSBvbmUgb3JnYW5pc20sIHRoZSBwcmVkYXRvciwga2lsbHMgYW5kIGVhdHMgYW5vdGhlciBvcmdhbmlzbSwgaXRzCiAgICBwcmV5LgogICAgPGJyPgogICAgPGJyPgogICAgZy4gPGI+QW5lbW9uZTwvYj4gaXMgYSBnZW51cyBvZiBmbG93ZXJpbmcgcGxhbnRzIGluIHRoZSBidXR0ZXJjdXAgZmFtaWx5LgogICAgPGJyPgogICAgPGJyPgogICAgaC4gQS9BbiA8Yj5maW5pY2t5PC9iPiBwZXJzb24gaXMgZXh0cmVtZWx5IG9yIGV4Y2Vzc2l2ZWx5IHBhcnRpY3VsYXIsIGV4YWN0aW5nLCBvciBtZXRpY3Vsb3VzIGluIHRhc3RlIG9yIHN0YW5kYXJkcy4KICAgIDxicj4KICAgIDxicj4KICAgIGkuIDxiPk51ZGlicmFuY2g8L2I+IGlzIGEgZ3JvdXAgb2Ygc29mdC1ib2RpZWQsIG1hcmluZSBnYXN0cm9wb2QgbW9sbHVzY3Mgd2hpY2ggc2hlZCB0aGVpciBzaGVsbHMgYWZ0ZXIgdGhlaXIgbGFydmFsIHN0YWdlLgogICAgPGJyPgogICAgPGJyPgogICAgai4gQSA8Yj5tZWR1c2E8L2I+IGlzIGEgZnJlZS1zd2ltbWluZyBzZXh1YWwgZm9ybSBvZiBhIGNvZWxlbnRlcmF0ZSBzdWNoIGFzIGEgamVsbHlmaXNoLCB0eXBpY2FsbHkgaGF2aW5nIGFuCiAgICB1bWJyZWxsYS1zaGFwZWQgYm9keSB3aXRoIHN0aW5naW5nIHRlbnRhY2xlcyBhcm91bmQgdGhlIGVkZ2UuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+Qi4gTG9vayB1cCBhIGRpY3Rpb25hcnkgYW5kIHdyaXRlIHRoZSBtZWFuaW5ncyBvZiB0aGUgZm9sbG93aW5nIHdvcmRzIHRoZW4gdXNlIHRoZW0gaW4geW91ciBvd24gc2VudGVuY2VzLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIDxiPkFydGhyb3BvZCA6PC9iPjxpPiBhbiBpbnZlcnRlYnJhdGUgYW5pbWFsIG9mIHRoZSBsYXJnZSBwaHlsdW0gQXJ0aHJvcG9kYTwvaT4KICAgIDxicj4KICAgIE1hbnkgYXJ0aHJvcG9kIGFuaW1hbHMgdW5kZXJnbyBwaHlzaW9sb2dpY2FsIGNoYW5nZXMgdGhhdCBzbW9vdGggdGhlaXIgaW50ZWdyYXRpb24uCiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj5HYXN0cm9wb2QgOjwvYj48aT4gYSBtb2xsdXNjIG9mIHRoZSBsYXJnZSBjbGFzcyBHYXN0cm9wb2RhPC9pPgogICAgPGJyPgogICAgVGhlIHByb2JsZW0gb2YgdGhlIGNhdXNlcyBvZiB0aGUgdG9yc2lvbiBvZiB0aGUgR2FzdHJvcG9kIGJvZHkgaGFzIGJlZW4gbXVjaCBkaXNjdXNzZWQuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj5CaW9tYXNzIDo8L2I+PGk+IHRoZSB0b3RhbCBxdWFudGl0eSBvciB3ZWlnaHQgb2Ygb3JnYW5pc21zIGluIGEgZ2l2ZW4gYXJlYSBvciB2b2x1bWU8L2k+CiAgICA8YnI+CiAgICBFbmVyZ3kgZnJvbSBiaW9tYXNzIGlzIGEgZ3Jvd2luZyBzb3VyY2Ugb2YgcmVuZXdhYmxlIGVuZXJneS4KICAgIDxicj4KICAgIDxicj4KICAgIDxiPkNhbGNpZmljYXRpb24gOjwvYj48aT4gdGhlIGhhcmRlbmluZyBvZiB0aXNzdWUgb3Igb3RoZXIgbWF0ZXJpYWwgYnkgdGhlIGRlcG9zaXRpb24gb2YgaW5zb2x1YmxlIGNhbGNpdW0gY29tcG91bmRzPC9pPgogICAgPGJyPgogICAgVGhlIGV4dHJlbWl0aWVzIG9mIHRoZSBjYXJ0aWxhZ2VzIGZyZXF1ZW50bHkgdW5kZXJnbyBjYWxjaWZpY2F0aW9uLgogICAgPGJyPgogICAgPGJyPgogICAgPGI+TWV0YW1vcnBob3NpcyA6PC9iPjxpPiB0aGUgcHJvY2VzcyBvZiB0cmFuc2Zvcm1hdGlvbiBmcm9tIGFuIGltbWF0dXJlIGZvcm0gdG8gYW4gYWR1bHQgZm9ybSBpbiB0d28gb3IgbW9yZSBkaXN0aW5jdCBzdGFnZXM8L2k+CiAgICA8YnI+CiAgICBBIGJ1dHRlcmZseSBpcyBwcm9kdWNlZCBieSBtZXRhbW9ycGhvc2lzIGZyb20gYSBjYXRlcnBpbGxhci4KICAgIDxicj4KICAgIDxicj4KICAgIDxiPlN0dXJnZW9uIDo8L2I+PGk+IGEgdmVyeSBsYXJnZSBwcmltaXRpdmUgZmlzaCB3aXRoIGJvbnkgcGxhdGVzIG9uIHRoZSBib2R5PC9pPgogICAgPGJyPgogICAgQ2F2aWFyIGlzIHN0dXJnZW9uIHJvZSBwcmVwYXJlZCBieSBhIHNwZWNpYWwgcHJvY2Vzcy4mIzgxOTU7CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8aDM+Q29tcHJlaGVuc2lvbjwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5BbnN3ZXIgdGhlIGZvbGxvd2luZyBxdWVzdGlvbnMuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+YS4gV2hhdCBhcmUgdGhlIGluZGljYXRvcnMgb2YgdGhlIGZhY3QgdGhhdCB3ZSBhcmUgdmVyeSBzZWxmLWNvbnNjaW91cyBhYm91dCBvdXJzZWx2ZXMgdGhlc2UgZGF5cz88L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgaW5kaWNhdG9ycyBvZiB0aGUgZmFjdCB0aGF0IHdlIGFyZSB2ZXJ5IHNlbGYtY29uc2Npb3VzIGFib3V0IG91cnNlbHZlcyB0aGVzZSBkYXlzIGFyZSBzZWxmLXJlYWxpemF0aW9uLAogICAgc2VsZi1oZWxwLCBzZWxmLWRldmVsb3BtZW50LCBzZWxmLWF3YXJlbmVzcywgc2VsZi1yZXNwZWN0IGFuZCBzZWxmLWVubGlnaHRlbm1lbnQuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5iLiBIb3cgaGF2ZSB3ZSBjZWxlYnJhdGVkIHRoZSBmYWN0IHRoYXQgd2UgaGF2ZSBvdXIgaW5kaXZpZHVhbCBpZGVudGl0eT88L3NwYW4+CiAgICA8YnI+CiAgICBXZSBoYXZlIGNlbGVicmF0ZWQgdGhlIGZhY3QgdGhhdCB3ZSBoYXZlIG91ciBpbmRpdmlkdWFsIGlkZW50aXR5IGJ5IHByb3ZpZGluZyBvdXJzZWx2ZXMgd2l0aCBhIHJlYWwgbmFtZS4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmMuIEFyZSB3ZSwgaHVtYW4gYmVpbmdzLCByZWFsbHkgdW5pcXVlPyBXaHkvV2h5IG5vdD88L3NwYW4+CiAgICA8YnI+CiAgICBObywgd2UgaHVtYW4gYmVpbmdzLCBhcmVuJnJzcXVvO3QgcmVhbGx5IHVuaXF1ZS4gSXQmcnNxdW87cyBiZWNhdXNlIHVuaXF1ZW5lc3MgaXMgc28gY29tbW9ucGxhY2UgYSBwcm9wZXJ0eSBvZgogICAgbGl2aW5nIHRoaW5ncyB0aGF0IHRoZXJlIGlzIHJlYWxseSBub3RoaW5nIGF0IGFsbCB1bmlxdWUgYWJvdXQgaXQuIFRoZSBwaGVub21lbm9uIGNhbiZyc3F1bzt0IGJlIHVuaXF1ZSBhbmQKICAgIHVuaXZlcnNhbCBhdCB0aGUgc2FtZSB0aW1lLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZC4gSG93IGRvIGZpc2ggcmVjb2duaXplIGVhY2ggb3RoZXI/PC9zcGFuPgogICAgPGJyPgogICAgRmlzaCByZWNvZ25pemUgZWFjaCBvdGhlciBieSB0aGUgc21lbGwgb2YgZWFjaCBvdGhlci4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmUuIFdoYXQgaXMgdGhlIGZ1bmN0aW9uIG9mIGluZGl2aWR1YWxpdHk/PC9zcGFuPgogICAgPGJyPgogICAgVGhlIGZ1bmN0aW9uIG9mIGluZGl2aWR1YWxpdHkgaXMgc2VsZi1wcmVzZXJ2YXRpb24gYW5kIG1haW50YWluaW5nIGluZGl2aWR1YWxpdHkuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5mLiBXaGF0IGRvZXMgdGhlIG1peC11cCBvZiB0d28gc2VsdmVzIHRlbGwgdXMgYWJvdXQgb3VyIGlkZW50aXR5Pzwvc3Bhbj4KICAgIDxicj4KICAgIFRoZSBtaXgtdXAgb2YgdHdvIHNlbHZlcyB0ZWxscyB1cyB1bml0eSBhbmQgY29vcGVyYXRpb24gdG8gZWFjaCBvdGhlciBpcyByZXF1aXJlZCBmb3Igc3Vydml2YWwgYW5kIGV4aXN0ZW5jZS4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmcuIFdoYXQgZG9lcyB0aGUgYXV0aG9yIGlsbHVzdHJhdGUgd2l0aCB0aGUgdGFsZSBvZiB0aGUgbnVkaWJyYW5jaCBhbmQgdGhlIG1lZHVzYT88L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgYXV0aG9yIGlsbHVzdHJhdGVzIHRoZSB2YWx1ZSBvZiBjby1leGlzdGVuY2UsIGNvb3BlcmF0aW9uLCBoZWxwZnVsbmVzcywgY29sbGFib3JhdGlvbiBhbmQgdG9nZXRoZXJuZXNzIHdpdGggdGhlCiAgICB0YWxlIG9mIHRoZSBudWRpYnJhbmNoIGFuZCB0aGUgbWVkdXNhLiBJdCBhbHNvIHByb2plY3RzIHRoZSBzaWduaWZpY2FuY2Ugb2YgZnJpZW5kc2hpcCBhbmQgZGVwZW5kZW5jZSBvbiBlYWNoIG90aGVyCiAgICBmb3Igc3Vydml2YWwgYW5kIGV4aXN0ZW5jZS4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmguIFdoeSBpcyB0aGUgYXV0aG9yIGRpc3R1cmJlZCBieSB0aGUgdGhvdWdodCBvZiB0aGUgY3JlYXR1cmVzIGxpa2UgdGhlIG51ZGlicmFuY2ggYW5kIG1lZHVzYT88L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgYXV0aG9yIGlzIGRpc3R1cmJlZCBieSB0aGUgdGhvdWdodCBvZiB0aGUgY3JlYXR1cmVzIGxpa2UgdGhlIG51ZGlicmFuY2ggYW5kIG1lZHVzYSBiZWNhdXNlIGl0IHByb3ZpZGVzIGhpbSB3aXRoCiAgICBhbiBvZGQgZmVlbGluZyBhbmQgY29uZnVzZXMgaW4gd2l0aCB2YWd1ZSBhbmQgYml6YXJyZSBjb25jZXB0IGxpa2UgYSBkcmVhbS4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmkuIFdoYXQgZG9lcyB0aGUgd3JpdGVyIG1lYW4gYnkgJmxkcXVvO3RoZXkgcmVtaW5kIG1lIG9mIHRoZSB3aG9sZSBlYXJ0aCBhdCBvbmNlPyZyZHF1bzs8L3NwYW4+CiAgICA8YnI+CiAgICBCeSBzYXlpbmcgJnF1b3Q7dGhleSByZW1pbmQgbWUgb2YgdGhlIHdob2xlIGVhcnRoIGF0IG9uY2UnJnF1b3Q7LCB0aGUgd3JpdGVyIG1lYW5zIHRvIHNheSB0aGF0IGl0IGlzIHZlcnkKICAgIGNvbXBsaWNhdGVkIGFuZCBiaXphcnJlIHRvIGp1c3RpZnkgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSBjcmVhdHVyZXMgYW5kIG5vbi1saXZpbmcgdGhpbmdzIG9mIHRoZSB3b3JsZCBhbmQgYXMKICAgIG1vcmUgYXMgb25lIHRyaWVzIHRvIHVuZGVyc3RhbmQsIHRoZSBtb3JlIGhlL3NoZSBnZXRzIGNvbmZ1c2VkLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPkNyaXRpY2FsIHRoaW5raW5nPC9oMz4KICAgIDxicj4KICAgIDxzcGFuPgogICAgICAgIGEuIEhvdyBkb2VzIHRoZSBhdXRob3IgbWFrZSBzYXRpcmUgb24gdGhlIG1vZGVybiBpZGVhIG9mIHRoZSAmbHNxdW87c2VsZiZyc3F1bzsgYmFzZWQgb24gaW5kaXZpZHVhbGl0eSwgaW5kZXBlbmRlbmNlCiAgICAgICAgYW5kIHVuaXF1ZW5lc3M/CiAgICA8L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBUaGUgYXV0aG9yIGluIHRoaXMgZXNzYXkgc2F0aXJlcyBvbiB0aGUgbW9kZXJuIGlkZWEgb2YgJ3NlbGYmcnNxdW87IGJhc2VkIG9uIGluZGl2aWR1YWxpdHksIGluZGVwZW5kZW5jZSBhbmQKICAgIHVuaXF1ZW5lc3MuIFRoaXMgZXNzYXkgaXMgYWJvdXQgdGhlIHNlbGYgYW5kIHdoYXQgbmF0dXJlIGNhbiB0ZWFjaCB1cy4gSW4gdGhlIGJlZ2lubmluZyB0aGUgd3JpdGVyIGJyaW5ncyBhbgogICAgYXR0ZW50aW9uIHRvIHRoZSB0cmVuZCBpbiBodW1hbnMgb24gdXBsaWZ0aW5nIHRoZSBmZWVsaW5nIG9mIHNlbGYtYmFzZWQgb24gaW5kaXZpZHVhbGl0eSwgaW5kZXBlbmRlbmNlIGFuZAogICAgdW5pcXVlbmVzcy4KICAgIDxicj4KICAgIDxicj4KICAgIEhlcmUgdGhlIGF1dGhvciBpcyBwcmVzZW50aW5nIHRoZSBjbG9zZSByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgbnVkaWJyYW5jaCBhbmQgbWVkdXNhIGxpdmluZyBpbiB0aGUgQmF5IG9mIE5hcGxlcy4KICAgIEEgbWF0dXJlIGplbGx5ZmlzaCBlbmd1bGZzIGEgdGlueSBuZXdseS1oYXRjaGVkIHNsdWcgb25seSB0byBiZSBkZXZvdXJlZCBiaXQgYnkgYml0IHVudGlsIHRoZSBzbmFpbCBkb21pbmF0ZXMgYW5kCiAgICB0aGUgamVsbHlmaXNoIGlzIHJlZHVjZWQgdG8gYSByb3VuZCAmcXVvdDtzdWNjZXNzZnVsbHkgZWRpdGVkIHBhcmFzaXRlJnF1b3Q7IGFmZml4ZWQgdG8gdGhlIHNraW4gbmVhciB0aGUgc25haWwncwogICAgbW91dGguIEZpbmFsbHkgdGhlIHRlbnRhY2xlcywgdW50aWwgdGhlIGplbGx5ZmlzaCBiZWNvbWVzIHJlZHVjZWQgaW4gc3Vic3RhbmNlIGJ5IGJlaW5nIGVhdGVuIHdoaWxlIHRoZSBzbmFpbCBncm93cwogICAgY29ycmVzcG9uZGluZ2x5IGluIHNpemUuCiAgICA8YnI+CiAgICA8YnI+CiAgICBUaGlzIGVzc2F5IHByb2plY3RzIGJvdGggY3JlYXR1cmVzIGNhbm5vdCBsaXZlIGluIGFueSBvdGhlciB3YXksIHRoZXkgZGVwZW5kIGZvciB0aGVpciBzdXJ2aXZhbCBvbiBlYWNoIG90aGVyLiBUaGUKICAgIGF1dGhvciBpbGx1c3RyYXRlcyB0aGUgdmFsdWUgb2YgY28tZXhpc3RlbmNlLCBjb29wZXJhdGlvbiwgaGVscGZ1bG5lc3MsIGNvbGxhYm9yYXRpb24gYW5kIHRvZ2V0aGVybmVzcyB3aXRoIHRoZSB0YWxlCiAgICBvZiB0aGUgbnVkaWJyYW5jaCBhbmQgdGhlIG1lZHVzYS4gV2UgYWxsIGFyZSBpbXBvcnRhbnQgYW5kIG9uZSZyc3F1bztzIGxpZmUgaXMgZGV0ZXJtaW5lZCBieSBhbm90aGVyIGxpa2UgdGhlCiAgICByZWxhdGlvbiBiZXR3ZWVuIGFuZW1vbmVzIGFuZCBjcmFicyBhcyB3ZWxsIGFzIG1lZHVzYSBhbmQgc25haWwuIEl0IGFsc28gc2hvd3MgdGhlIHNpZ25pZmljYW5jZSBvZiBmcmllbmRzaGlwIGFuZAogICAgZGVwZW5kZW5jZSBvbiBlYWNoIG90aGVyIGZvciBzdXJ2aXZhbCBhbmQgZXhpc3RlbmNlLiBUaHJvdWdoIHRoaXMsIHRoZSBhdXRob3IganVzdGlmaWVzIHRoYXQgdGhlIG1vZGVybiBwZW9wbGUncwogICAgcHJpZGUgb3ZlciB0aGUgY29uY2VwdCBvZiBpbmRpdmlkdWFsaXR5LCBpbmRlcGVuZGVuY2UgYW5kIHVuaXF1ZW5lc3MgaXMgbm90IGFwcGxpY2FibGUgaW4gdGhlIHJlYWwgYW5kIHByYWN0aWNhbAogICAgbGlmZS4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxoMz5Xcml0aW5nPC9oMz4KICAgIDxicj4KICAgIDxzcGFuPkEuIFdyaXRlIGFuIGVzc2F5IG9uICZsZHF1bztJbmRlcGVuZGVuY2UgdnMuIEludGVyZGVwZW5kZW5jZSZyZHF1bzsgaW4gYWJvdXQgMjUwIHdvcmRzLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIDxwIHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7IGZvbnQtd2VpZ2h0OiBib2xkOyI+SW5kZXBlbmRlbmNlIHZzLiBJbnRlcmRlcGVuZGVuY2U8L3A+CiAgICA8YnI+CiAgICBIdW1hbiBiZWluZ3MgdXN1YWxseSBjYXRlZ29yaXplIHRoZW1zZWx2ZXMgaW50byBpbmRpdmlkdWFsIG9yIGdyb3VwIGVudGl0aWVzLiBUaGVzZSBzZWxmLWNvbmNlcHRpb25zIHVzdWFsbHkgZW1hbmF0ZQogICAgaW4gcGVvcGxlJnJzcXVvO3MgbWluZHMgYW5kIGRldGVybWluZSB0aGVpciBtb3RpdmF0aW9uIGFzIHdlbGwgYXMgY29nbml0aW9ucy4gVGhlcmUgYXJlIHVzdWFsbHkgdHdvIHBlcmNlcHRpb25zIHRoYXQKICAgIHBlb3BsZSBoYXZlIGFib3V0IHRoZW1zZWx2ZXMgcmVnYXJkaW5nIHRoZWlyIHJlbGF0aW9uc2hpcCB3aXRoIG90aGVycy4gVGhlIGZpcnN0IGlzIHRoZSBpbmRlcGVuZGVudCBzZWxmLWNvbmNlcHQKICAgIHdoZXJlIGFuIGluZGl2aWR1YWwmcnNxdW87cyBjb25jZXB0aW9uIGFib3V0IGhpcyBvciBoZXIgZXhpc3RlbmNlIGlzIHRoYXQgaGUgb3Igc2hlIGV4aXN0cyBzZXBhcmF0ZSBmcm9tIG90aGVyCiAgICBwZW9wbGUuIEluZGVwZW5kZW50IHNlbGYtY29uY2VwdCBlbmNvbXBhc3NlcyBiZWhhdmlvdXIgdHJhaXRzLCBwcmVmZXJlbmNlcyBhbmQgYXR0aXR1ZGVzIG9mIGFuIGluZGl2aWR1YWwuIFRoZQogICAgc2Vjb25kIHBlcmNlcHRpb24gaXMgdGhlIGludGVyZGVwZW5kZW50IHNlbGYtY29uY2VwdCB3aGVyZSBhIHBlcnNvbiBpcyBhZmZpbGlhdGVkIG9yIGZlZWxzIGNvbm5lY3RlZCB0byBvdGhlcnMuIFRoaXMKICAgIHBhcGVyIGV4cGxvcmVzIHRoZSBhZHZhbnRhZ2VzIG9mIGludGVyZGVwZW5kZW5jZSBhcyBvcHBvc2VkIHRvIGluZGVwZW5kZW5jZS4gR2lzaCBKZW4gYXJndWVzIHRoYXQgJmxkcXVvO3RoZSBqb3kgb2YKICAgIGEgZnVuY3Rpb25pbmcgaW50ZXJkZXBlbmRlbnQgcmVsYXRpb25zaGlwIGNhbiBiZSB0cmVtZW5kb3VzLiZyZHF1bzsKICAgIDxicj4KICAgIDxicj4KICAgIFVubGlrZSBpbmRlcGVuZGVudC1zZWxmIHdoaWNoIGZvY3VzZXMgb24gaW5kaXZpZHVhbCByZXNwb25zaWJpbGl0eSBzZXBhcmF0ZSBmcm9tIHRoZSBlbnRpcmUgc29jaWV0eSwgaW50ZXJkZXBlbmRlbnQKICAgIHNlbGYtY29uY2VwdCBlbXBoYXNpemVzIHNoYXJlZCByZXNwb25zaWJpbGl0aWVzLiBUaGUgbWFpbiB0ZW5ldCBvZiBpbnRlcmRlcGVuZGVuY2Ugc2VsZi1jb25jZXB0IGlzIHRoZSByZWxpYW5jZSB0aGF0CiAgICBleGlzdHMgYW1vbmcgaW5kaXZpZHVhbHMgaW4gdGhlIHNvY2lldHkgZm9yIHN1cnZpdmFsIGFuZCBtdXR1YWwgZGV2ZWxvcG1lbnQuIEludGVyZGVwZW5kZW5jZSBzZWxmLWluc3RpbHMgdGhlIGlkZWEKICAgIHRoYXQgcGVvcGxlIGFyZSBub3QgYWxvbmUgaW4gdGhlaXIgYXR0ZW1wdHMgYXQgbWVudGFsIGdyb3d0aCBhbmQgZGV2ZWxvcG1lbnQuIFBlb3BsZSBhbHNvIHByb3ZpZGVkIHN1cHBvcnQgZm9yIG9uZQogICAgYW5vdGhlciB0byBncm93IHNvY2lhbGx5LiBJbnRlcmRlcGVuZGVudCBzZWxmLWNvbmNlcHQgYWxzbyBwcm9tb3RlcyByZXNwb25zaWJpbGl0eSBzaGFyaW5nIGJ5IGVuY291cmFnaW5nCiAgICBpbmRpdmlkdWFscyB0byB0YWtlIHZhcmlvdXMgcm9sZXMsIHdoaWNoIGNvbnRyaWJ1dGUgdG8gdGhlIGRldmVsb3BtZW50IGFuZCBncm93dGggb2YgdGhlIHNvY2lldHkuCiAgICA8YnI+CiAgICA8YnI+CiAgICBJbnRlcmRlcGVuZGVudCBzZWxmLWNvbmNlcHQgaXMgYWxzbyBjcnVjaWFsIGZvciBvdmVyY29taW5nIGZlYXIuIFVubGlrZSBpbmRlcGVuZGVuY2UsIHdoaWNoIHB1dHMgYW4gaW5kaXZpZHVhbAogICAgYWdhaW5zdCB0aGUgcmVzdCBvZiBvdGhlciBtZW1iZXJzIG9mIHRoZSBzb2NpZXR5LCBpbnRlcmRlcGVuZGVuY2UgcHJvbW90ZXMgY29oZXNpb24gYW1vbmcgc29jaWV0eSBtZW1iZXJzLCB0aHVzCiAgICBoZWxwaW5nIGluZGl2aWR1YWxzIHRvIGV4cGVyaWVuY2UgbG93ZXIgbGV2ZWxzIG9mIGZlYXIgYW5kIGluc2VjdXJpdHkuIFRoZSByZWNvZ25pdGlvbiBvZiB0aGUgZmFjdCB0aGF0IG9uZSBoYXMKICAgIHN1cHBvcnQgb2Ygb3RoZXJzIHJlbWFpbnMgY3J1Y2lhbCBmb3IgYWxsZXZpYXRpbmcgbmVnYXRpdmUgZmVlbGluZ3MsIHdoaWNoIGNvdWxkIHlpZWxkIGZlYXIgaW4gaW5kaXZpZHVhbHMuIFN1cHBvcnQKICAgIGZvciBlYWNoIG90aGVyIGlzIG9ubHkgcG9zc2libGUgaW4gYSBzb2NpZXR5IHdoZXJlIHBlb3BsZSBmZWVsIGNsb3NlIHRvIGVhY2ggb3RoZXIgYW5kIHRoZSBzb2NpZXR5IGlzIGNoYXJhY3Rlcml6ZWQKICAgIGJ5IGhpZ2ggbGV2ZWwgb2YgaW50ZXJkZXBlbmRlbmNlLgogICAgPGJyPgogICAgPGJyPgogICAgSW50ZXJkZXBlbmRlbmNlIGVtcGhhc2l6ZXMgb24gaG93IHBlb3BsZSByZWxhdGUgd2l0aCBlYWNoIG90aGVyIGFuZCBnZXQgb24gd2VsbCB3aXRoIGV4aXN0aW5nIG5vcm1zIG9mIHRoZSBzb2NpZXR5LAogICAgd2hpY2ggZGljdGF0ZSBob3cgcGVvcGxlIHJlbGF0ZS4gSW50cmluc2ljIGF0dHJpYnV0ZXMgb2YgaW5kaXZpZHVhbHMgcGxheSBubyBtYWpvciByb2xlIGluIHRoZSB3YXkgaW5kaXZpZHVhbHMKICAgIHRoaW5rLCBmZWVsIG9yIGFjdC4gSG93ZXZlciwgSmVuIGFsc28gYXJndWVzIHRoYXQgJmxkcXVvO3dlIG5lZWQgYm90aCB0aGUgaW50ZXJkZXBlbmRlbnQgYW5kIHRoZSBpbmRlcGVuZGVudAogICAgc2VsZiwmcmRxdW87IGFwcGVhbGluZyB0aGF0IHBlb3BsZSBmcm9tIGVpdGhlciBzaWRlIG9mIHNlbGYtY29uY2VwdHMgYWNjb21tb2RhdGVzIGFuZCB1bmRlcnN0YW5kcyBlYWNoIG90aGVyLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPkIuIFdyaXRlIGEgbmV3c3BhcGVyIGFydGljbGUgaGlnaGxpZ2h0aW5nIHRoZSBpbmNyZWFzaW5nIGluZGl2aWR1YWxpc20gaW4gdGhlIG1vZGVybiBOZXBhbGkgc29jaWV0eS48L2gzPgogICAgPGJyPgogICAgPGJyPgogICAgPHAgc3R5bGU9InRleHQtYWxpZ246IGNlbnRlcjsgZm9udC13ZWlnaHQ6IGJvbGQ7Ij5JbmNyZWFzaW5nIEluZGl2aWR1YWxpc20gaW4gdGhlIE1vZGVybjxicj5OZXBhbGkgU29jaWV0eTwvcD4KICAgIDxicj4KICAgIDxiPgogICAgICAgIEJ5IFJhbWVzaCBUaGFwYQogICAgICAgIDxicj4KICAgICAgICBNYXJjaCAxMiwgMjAxOQogICAgPC9iPgogICAgPGJyPgogICAgPGJyPgogICAgSW5kaXZpZHVhbGlzbSBpcyB0aGUgbW9yYWwgc3RhbmNlLCBwb2xpdGljYWwgcGhpbG9zb3BoeSwgaWRlb2xvZ3kgYW5kIHNvY2lhbCBvdXRsb29rIHRoYXQgZW1waGFzaXplcyB0aGUgaW50cmluc2ljCiAgICB3b3J0aCBvZiB0aGUgaW5kaXZpZHVhbC4gSW5kaXZpZHVhbGlzdHMgcHJvbW90ZSB0aGUgZXhlcmNpc2Ugb2Ygb25lJ3MgZ29hbHMgYW5kIGRlc2lyZXMgYW5kIHRvIHZhbHVlIGluZGVwZW5kZW5jZQogICAgYW5kIHNlbGYtcmVsaWFuY2UgYW5kIGFkdm9jYXRlIHRoYXQgaW50ZXJlc3RzIG9mIHRoZSBpbmRpdmlkdWFsIHNob3VsZCBhY2hpZXZlIHByZWNlZGVuY2Ugb3ZlciB0aGUgc3RhdGUgb3IgYSBzb2NpYWwKICAgIGdyb3VwIHdoaWxlIG9wcG9zaW5nIGV4dGVybmFsIGludGVyZmVyZW5jZSB1cG9uIG9uZSdzIG93biBpbnRlcmVzdHMgYnkgc29jaWV0eSBvciBpbnN0aXR1dGlvbnMgc3VjaCBhcyB0aGUKICAgIGdvdmVybm1lbnQuIEluZGl2aWR1YWxpc20gaXMgb2Z0ZW4gZGVmaW5lZCBpbiBjb250cmFzdCB0byB0b3RhbGl0YXJpYW5pc20sIGNvbGxlY3RpdmlzbSBhbmQgbW9yZSBjb3Jwb3JhdGUgc29jaWFsCiAgICBmb3Jtcy4KICAgIDxicj4KICAgIDxicj4KICAgIEluIHRoZSBtb2Rlcm4gTmVwYWxlc2Ugc29jaWV0eSwgaW5kaXZpZHVhbGlzbSBpcyBpbmNyZWFzaW5nIHJhcGlkbHkuIFRoaXMgaW5jcmVhc2UgYXBwZWFycyB0byBiZSBkdWUgbW9zdGx5IHRvCiAgICBpbmNyZWFzaW5nIHNvY2lvLWVjb25vbWljIGRldmVsb3BtZW50LCBpbmNsdWRpbmcgaGlnaGVyIGluY29tZXMsIG1vcmUgZWR1Y2F0aW9uLCB1cmJhbml6YXRpb24sIGFuZCBhIHNoaWZ0IHRvd2FyZAogICAgd2hpdGUtY29sbGFyIGpvYnMuIEluY3JlYXNlcyBpbiB0aGVzZSBmYWN0b3JzIGluIGEgZ2l2ZW4gcmVnaW9uIGFyZSByZWxpYWJseSBmb2xsb3dlZCBieSBnYWlucyBpbiBpbmRpdmlkdWFsaXN0CiAgICBiZWxpZWZzIGFuZCBwcmFjdGljZXMgaW4gdGhlIGVuc3VpbmcgZGVjYWRlIE5lcGFsIGNvbWVzIHVuZGVyIHRob3NlIGZldyBjb3VudHJpZXMgdGhhdCBidWNrZWQgdGhlIGdsb2JhbCB0cmVuZAogICAgdG93YXJkIGluZGl2aWR1YWxpc20uCiAgICA8YnI+CiAgICA8YnI+CiAgICBSaXNpbmcgcHJvc3Blcml0eSBhbmQgZWR1Y2F0aW9uIGFyZSBsYXJnZWx5IHdlbGNvbWUgY2hhbmdlcyB0aGF0IHJlZmxlY3Qgbm90IG1lcmVseSBnYWlucyBpbiB3ZWFsdGggZm9yIHRoZQogICAgYWxyZWFkeS13ZWFsdGh5LCBidXQgZm9yIHRoZSBkZXNwZXJhdGVseSBwb29yIGFzIHdlbGwuIFdlYWx0aCwgYW5kIHRoZSBpbmRpdmlkdWFsaXNtIHRoYXQgZm9sbG93cywgYXJlIG9mdGVuCiAgICBjb25mbGF0ZWQgd2l0aCBzZWxmaXNobmVzcy4gVGhpcyBpcywgaW4gcGFydCwgYmVjYXVzZSBpbmRpdmlkdWFsaXNtJ3MgaW52ZXJzZSAmbWRhc2g7IGNvbGxlY3RpdmlzbSAmbWRhc2g7CiAgICBlbXBoYXNpemVzIGNsb3NlIHNvY2lhbCB0aWVzIGFuZCBhbiBpbnRlcmNvbm5lY3RlZCByYXRoZXIgdGhhbiBpbmRlcGVuZGVudCB2aWV3IG9mIHRoZSBzZWxmLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPkdyYW1tYXI8L2gzPgogICAgPGJyPgogICAgPHNwYW4+QS4gTWFrZSBwYXNzaXZlIHNlbnRlbmNlcyBmcm9tIHRoZSBmb2xsb3dpbmcgaW5mb3JtYXRpb24gYXMgaW4gdGhlIGV4YW1wbGUuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+YS4gdm9sbGV5YmFsbC9ldmVyeS9jb3VudHJ5L3BsYXk8L3NwYW4+CiAgICA8YnI+CiAgICBWb2xsZXliYWxsIGlzIHBsYXllZCBpbiBldmVyeSBjb3VudHJ5LgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Yi4gc3BhZ2hldHRpL2JvaWxpbmcgd2F0ZXIvY29vazwvc3Bhbj4KICAgIDxicj4KICAgIFNwYWdoZXR0aSBpcyBjb29rZWQgaW4gYm9pbGluZyB3YXRlci4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmMuIGVhY2ggbGVzc29uL2FuIGV4ZXJjaXNlL2ZvbGxvdzwvc3Bhbj4KICAgIDxicj4KICAgIEVhY2ggbGVzc29uIGlzIGZvbGxvd2VkIGJ5IGFuIGV4ZXJjaXNlLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZC4gdGF4ZXMvdGhlIHByaWNlL2luY2x1ZGU8L3NwYW4+CiAgICA8YnI+CiAgICBUYXhlcyBhcmUgaW5jbHVkZWQgaW4gdGhlIHByaWNlLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZS4gZXh0ZW5zaXZlIGluZm9ybWF0aW9uL3RoZSBpbnRlcm5ldC9maW5kPC9zcGFuPgogICAgPGJyPgogICAgRXh0ZW5zaXZlIGluZm9ybWF0aW9uIGlzIGZvdW5kIG9uIHRoZSBpbnRlcm5ldC4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmYuIG91ciBvcmRlci90aGUgd2FpdGVyL3Rvb2s8L3NwYW4+CiAgICA8YnI+CiAgICBPdXIgb3JkZXIgd2FzIHRha2VuIGJ5IHRoZSB3YWl0ZXIuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5nLiB0aGUgc2NoZWR1bGUvdGhlIHBhcnRpY2lwYW50cy93aWxsIGRpc3RyaWJ1dGU8L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgc2NoZWR1bGUgd2lsbCBiZSBkaXN0cmlidXRlZCBieSB0aGUgcGFydGljaXBhbnRzLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+aC4gdGhlIHBvbGljZS9mb290cHJpbnQvZm91bmQ8L3NwYW4+CiAgICA8YnI+CiAgICBGb290cHJpbnQgd2FzIGZvdW5kIGJ5IHRoZSBwb2xpY2UuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5pLiB0aGUgY2hpbGRyZW4vdGhlIHNhbmRjYXN0bGVzL2J1aWx0PC9zcGFuPgogICAgPGJyPgogICAgVGhlIHNhbmRjYXN0bGVzIHdlcmUgYnVpbHQgYnkgdGhlIGNoaWxkcmVuLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ai4gdGhlIGZhdGhlci90aGUgd2luZG93L25vdCBnb2luZyB0byBvcGVuPC9zcGFuPgogICAgPGJyPgogICAgVGhlIHdpbmRvdyBpcyBub3QgZ29pbmcgdG8gYmUgb3BlbmVkIGJ5IHRoZSBmYXRoZXIuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CgogICAgPHNwYW4+Qi4gUmV3cml0ZSB0aGUgZm9sbG93aW5nIHNlbnRlbmNlcyBpbiB0aGUgcGFzc2l2ZSB2b2ljZSB1c2luZyB0aGUgY29ycmVjdCBmb3JtIG9mIHZlcmJzIGluIHRoZSBicmFja2V0cy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBhLiBDYWxsIHRoZSBhbWJ1bGFuY2UhIFR3byBib3lzIDxiPmhhdmUgYmVlbiBpbmp1cmVkPC9iPiAoaW5qdXJlKSBpbiBhIG1vdG9yYmlrZSBhY2NpZGVudC4KICAgIDxicj4KICAgIDxicj4KICAgIGIuIFRoZSBjbG9jayA8Yj5oYXMgYmVlbiB1c2VkPC9iPiAodXNlKSBzaW5jZSB0aGUgMTd0aCBjZW50dXJ5LgogICAgPGJyPgogICAgPGJyPgogICAgYy4gSSBoYWQgdG8gd2FpdCBvdXRzaWRlIHRoZSBjbGFzc3Jvb20gd2hpbGUgdGhlIGNsYXNzcm9vbSA8Yj53YXMgYmVpbmcgY2xlYW5lZDwvYj4gKGNsZWFuKS4KICAgIDxicj4KICAgIDxicj4KICAgIGQuIFRoZSBwcm9ibGVtIDxiPmlzIGJlaW5nIGRpc2N1c3NlZDwvYj4gKGRpc2N1c3MpIGJ5IHRoZSBzdWJqZWN0IHNwZWNpYWxpc3RzIGF0IHRoZSBtb21lbnQuCiAgICA8YnI+CiAgICA8YnI+CiAgICBlLiBCeSB0aGUgdGltZSBJIGNhbWUgYmFjaywgdGhlIHRhc2sgPGI+aGFzIGJlZW4gZmluaXNoZWQ8L2I+IChmaW5pc2gpLgogICAgPGJyPgogICAgPGJyPgogICAgZi4gV29tZW4gPGI+YXJlIHNhaWQ8L2I+IChzYXkpIHRvIGJlIGhhcHBpZXIgdGhhbiBtZW4uCiAgICA8YnI+CiAgICA8YnI+CiAgICBnLiBMb29rISBUaGUgaG91c2UgPGI+aGFkIGJlZW4gZGVzdHJveWVkPC9iPiAoZGVzdHJveSkgYnkgdGhlIGZpcmUuCiAgICA8YnI+CiAgICA8YnI+CiAgICBoLiBUaGUgb3RoZXIgdGhyZWUgcmVwb3J0cyA8Yj53aWxsIGJlIHN1Ym1pdHRlZDwvYj4gKHN1Ym1pdCkgYnkgbmV4dCBtb250aC4KICAgIDxicj4KICAgIDxicj4KICAgIGkuIE1hbnkgcGVvcGxlIDxiPmhhdmUgYmVlbiByZXN1Y2VkPC9iPiAocmVzY3VlKSBmcm9tIHRoZSBmbG9vZHMgYnkgdGhlIHNlY3VyaXR5IHBlcnNvbnMgdGhpcyB5ZWFyLgogICAgPGJyPgogICAgPGJyPgogICAgai4gVGhlIHN0YXRlIG9mIEZsb3JpZGEgPGI+d2FzIGhpdDwvYj4gKGhpdCkgYnkgYSBodXJyaWNhbmUgdGhhdCBkaWQgc2VyaW91cyBkYW1hZ2UuCiAgICA8YnI+CgoKICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KCiAgICBJZiB5b3UgaGF2ZSBhbnkgc3VnZ2VzdGlvbnMgb3IgZmVlZGJhY2tzLCBwbGVhc2Ugd3JpdGUgdG8gdXMgYXQgcGx1czJoZWxwQGdtYWlsLmNvbQogICAgPGJyPjxicj4KPC9ib2R5PgoKPC9odG1sPg==", "13": "", "14": "", "15": "", "16": "", "17": "", "18": "", "19": "", "20": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj5Vbml0IDIwPGJyPlBvd2VyIGFuZCBQb2xpdGljczwvY2VudGVyPgogICAgPGJyPgogICAgPGgzPldvcmtpbmcgd2l0aCB3b3JkczwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5BLiBGaW5kIHRoZSB3b3JkcyBmcm9tIHRoZSB0ZXh0IGZvciB0aGVzZSBtZWFuaW5ncy4gVGhlIGZpcnN0IGxldHRlcnMgaGF2ZSBiZWVuIGdpdmVuIGZvciB5b3UuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgYS4gPGI+cmVsdWN0YW5jZTwvYj4gdW53aWxsaW5nbmVzcyBvciBkaXNpbmNsaW5hdGlvbiB0byBkbyBzb21ldGhpbmcKICAgIDxicj4KICAgIDxicj4KICAgIGIuIDxiPnJlcHJlc3NpdmU8L2I+IHByZXZlbnRpbmcgdGhlIGV4cHJlc3Npb24gb3IgYXdhcmVuZXNzIG9mIHRob3VnaHRzIG9yIGRlc2lyZXMKICAgIDxicj4KICAgIDxicj4KICAgIGMuIDxiPm11dGlsYXRpb248L2I+IHRoZSBpbmZsaWN0aW9uIG9mIHNlcmlvdXMgZGFtYWdlIG9uIHNvbWV0aGluZwogICAgPGJyPgogICAgPGJyPgogICAgZC4gPGI+Z2hldHRvaXplZDwvYj4gcmVzdHJpY3RlZCB0byBhbiBpc29sYXRlZCBvciBzZWdyZWdhdGVkIHBsYWNlLCBncm91cCwgb3Igc2l0dWF0aW9uCiAgICA8YnI+CiAgICA8YnI+CiAgICBlLiA8Yj5oaXN0b3J5IGZlbWluaXN0PC9iPiBoaXN0b3J5IHZpZXdlZCBmcm9tIGEgZmVtYWxlIG9yIHNwZWNpZmljYWxseSBmZW1pbmlzdCBwZXJzcGVjdGl2ZQogICAgPGJyPgogICAgPGJyPgogICAgZi4gPGI+Z2VuaXRhbDwvYj4gcmVsYXRpbmcgdG8gdGhlIGh1bWFuIG9yIGFuaW1hbCByZXByb2R1Y3RpdmUgb3JnYW5zCiAgICA8YnI+CiAgICA8YnI+CiAgICBnLiA8Yj5oeXN0ZXJlY3RvbWllczwvYj4gc3VyZ2ljYWwgb3BlcmF0aW9ucyB0byByZW1vdmUgYWxsIG9yIHBhcnQgb2YgdGhlIHV0ZXJ1cwogICAgPGJyPgogICAgPGJyPgogICAgaC4gPGI+cGFyYW5vaWQ8L2I+IG9ic2Vzc2l2ZWx5IGFueGlvdXMsIHN1c3BpY2lvdXMsIG9yIG1pc3RydXN0ZnVsCiAgICA8YnI+CiAgICA8YnI+CiAgICBpLiA8Yj5ldmVudHVhdGlvbjwvYj4gdGhydXN0aW5nIGZvcndhcmQgb2YgYWJkb21pbmFsIG9yZ2FucyB0aHJvdWdoIHRoZSBhYmRvbWluYWwgd2FsbAogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Qi4gQ29tcGxldGUgdGhlIGNoYXJ0Ljwvc3Bhbj4KICAgIDxicj4KICAgIDx0YWJsZSB3aWR0aD0xMDAlPgogICAgICAgIDx0cj4KICAgICAgICAgICAgPHRoPlZlcmI8L3RoPgogICAgICAgICAgICA8dGg+Tm91bjwvdGg+CiAgICAgICAgICAgIDx0aD5BZGplY3RpdmU8L3RoPgogICAgICAgIDwvdHI+CiAgICAgICAgPGJyPgogICAgICAgIDx0cj4KICAgICAgICAgICAgPHRkPmNvbW1pdDwvdGQ+CiAgICAgICAgICAgIDx0ZD5jb21taXRtZW50PC90ZD4KICAgICAgICAgICAgPHRkPmNvbW1pdHRlZDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0ZD5udXJ0dXJlPC90ZD4KICAgICAgICAgICAgPHRkPm51cnR1cmFuY2U8L3RkPgogICAgICAgICAgICA8dGQ+bnVydHVyYWJsZTwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0ZD5sZWdpdGltYXRlZTwvdGQ+CiAgICAgICAgICAgIDx0ZD5sZWdpdGltaXphdGlvbjwvdGQ+CiAgICAgICAgICAgIDx0ZD5sZWdpdGltaXplPC90ZD4KICAgICAgICA8L3RyPgogICAgICAgIDx0cj4KICAgICAgICAgICAgPHRkPm9wcHJlc3M8L3RkPgogICAgICAgICAgICA8dGQ+b3BwcmVzc2lvbjwvdGQ+CiAgICAgICAgICAgIDx0ZD5vcHByZXNzaXZlPC90ZD4KICAgICAgICA8L3RyPgogICAgICAgIDx0cj4KICAgICAgICAgICAgPHRkPmRlZmVuc2U8L3RkPgogICAgICAgICAgICA8dGQ+ZGVmZW5zaXZlbmVzczwvdGQ+CiAgICAgICAgICAgIDx0ZD5kZWZlbnNpdmU8L3RkPgogICAgICAgIDwvdHI+CiAgICAgICAgPHRyPgogICAgICAgICAgICA8dGQ+dmljdGltaXplPC90ZD4KICAgICAgICAgICAgPHRkPnZpY3RpbWl6YXRpb248L3RkPgogICAgICAgICAgICA8dGQ+dmljdGltaXplZDwvdGQ+CiAgICAgICAgPC90cj4KICAgIDwvdGFibGU+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5DLiBDb25zdWx0IGEgZGljdGlvbmFyeSBhbmQgZGVmaW5lIHRoZXNlIHRlcm1zLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIDxiPlJhY2lzbSA6PC9iPiB0aGUgYmVsaWVmIHRoYXQgZGlmZmVyZW50IHJhY2VzIHBvc3Nlc3MgZGlzdGluY3QgY2hhcmFjdGVyaXN0aWNzLCBhYmlsaXRpZXMsIG9yIHF1YWxpdGllcywgZXNwZWNpYWxseSBzbyBhcwogICAgdG8gZGlzdGluZ3Vpc2ggdGhlbSBhcyBpbmZlcmlvciBvciBzdXBlcmlvciB0byBvbmUgYW5vdGhlci4KICAgIDxicj4KICAgIDxicj4KICAgIDxiPkxlc2JpYW4gOjwvYj4gcmVsYXRpbmcgdG8gZ2F5IHdvbWVuIG9yIHRvIGhvbW9zZXh1YWxpdHkgaW4gd29tZW4uCiAgICA8YnI+CiAgICA8YnI+CiAgICA8Yj5SYWRpY2FsIDo8L2I+IGZvcm1pbmcgYW4gaW5oZXJlbnQgb3IgZnVuZGFtZW50YWwgcGFydCBvZiB0aGUgbmF0dXJlIG9mIHNvbWVvbmUgb3Igc29tZXRoaW5nLgogICAgPGJyPgogICAgPGJyPgogICAgPGI+RmVtaW5pc3QgOjwvYj4gdGhlIGFkdm9jYWN5IG9mIHdvbWVuJ3MgcmlnaHRzIG9uIHRoZSBncm91bmQgb2YgdGhlIGVxdWFsaXR5IG9mIHRoZSBzZXhlcy4KICAgIDxicj4KICAgIDxicj4KICAgIDxiPlBhdHJpYXJjaHkgOjwvYj4gYSBzeXN0ZW0gb2Ygc29jaWV0eSBvciBnb3Zlcm5tZW50IGluIHdoaWNoIG1lbiBob2xkIHRoZSBwb3dlciBhbmQgd29tZW4gYXJlIGxhcmdlbHkgZXhjbHVkZWQgZnJvbSBpdC4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPkQuIFVuZGVybGluZSB0aGUgY29uc29uYW50IGNsdXN0ZXJzIGluIHRoZSBmb2xsb3dpbmcgc2VudGVuY2VzLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIGEuIDx1PkZsdWZmeTwvdT4gd2VudCA8dT5mbGlwLWZsb3A8L3U+IGFsbCBvdmVyIHRoZSA8dT5mbG9vcjwvdT4uCiAgICA8YnI+CiAgICBiLiBUaGUgd2hpdGVzIDx1PnNpbmc8L3U+IGEgPHU+c29uZzwvdT4gYWJvdXQgdGhlIDx1PnN0cmlraW5nIHN0YXJzPC91Pi4KICAgIDxicj4KICAgIGMuIEhlcmUgYXJlIHNvbWUgZmxvd2VycyBhbmQgYSBmbGFzayBvZiB0ZWEgb2YgeW91ciA8dT5mYXZvdXJpdGUgZmxhdm91cjwvdT4uCiAgICA8YnI+CiAgICBkLiBTbWl0YSA8dT5mZWxsPC91PiBpbGwgd2l0aCA8dT5mbHU8L3U+LgogICAgPGJyPgogICAgZS4gTXkgPHU+ZnJpZW5kPC91PiBpcyA8dT5mcmlnaHRlbmVkPC91PiBvZiA8dT5mcm9nczwvdT4uCiAgICA8YnI+CiAgICBmLiA8dT5UaHVtYmVsaW5hPC91PiA8dT5zdHVtYmxlZDwvdT4gb3V0IG9mIHRoZSBncmVlbiA8dT5idXNoPC91Pi4KICAgIDxicj4KICAgIGcuIFNoZSA8dT5oZWFyZDwvdT4gYSA8dT5ydW1ibGU8L3U+IGFuZCBhIDx1PmNyeTwvdT4uCiAgICA8YnI+CiAgICBoLiAmbHNxdW87PHU+Q2xpbWI8L3U+IHVwJnJzcXVvOywgc2FpZCA8dT5Ub208L3U+LgogICAgPGJyPgogICAgaS4gPHU+RnJlZWRvbTwvdT4gPHU+bmVlZHM8L3U+IHRvIGJlIDx1PnN0cml2ZWQ8L3U+IGZvci4KICAgIDxicj4KICAgIGouIDx1PkNoaWxkcmVuPC91PiB3ZXJlIDx1Pm11bmNoaW5nPC91PiA8dT5jcnVuY2h5PC91PiA8dT5GcmVuY2g8L3U+IGZyaWVzLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPkNvbXByZWhlbnNpb248L2gzPgogICAgPGJyPgogICAgPHNwYW4+QW5zd2VyIHRoZSBmb2xsb3dpbmcgcXVlc3Rpb25zLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmEuIFdoeSBkb2VzIEF1ZHJlIExvcmRlIHRoaW5rIHRoYXQgTWFyeSBnb3QgYSBzb3J0IG9mIHZpY3RvcnkgaW4gdGhlIFVuaXZlcnNpdHkgb2YgQm9zdG9uPzwvc3Bhbj4KICAgIDxicj4KICAgIEF1ZHJlIExvcmRlIHRob3VnaHQgdGhhdCBNYXJ5IGdvdCBhIHNvcnQgb2YgdmljdG9yeSBpbiB0aGUgVW5pdmVyc2l0eSBvZiBCb3N0b24gYmVjYXVzZSBzaGUgYmVjb21lcyBzbyBnbGFkIHRvIGZpbmQKICAgIG1hbnkgd29tZW4gYXR0ZW5kaW5nIHRoZSBzcGVhayBvdXQsIGFuZCB0aGUgc2hvdyBvZiBqb2luZWQgcG93ZXIgd2lsbCBwcm92aWRlIG1vcmUgc3BhY2UgZm9yIHRoZW0gdG8gZ3JvdyBhbmQgYmUKICAgIHdpdGhpbi4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmIuIFdoeSBpcyBMb3JkZSB0aGFua2Z1bCB0byBNYXJ5Pzwvc3Bhbj4KICAgIDxicj4KICAgIExvcmRlIGlzIHRoYW5rZnVsIHRvIE1hcnkgYmVjYXVzZSBNYXJ5IGhhcyBwcm92aWRlZCBoZXIgYSBib29rIG5hbWVkIEd5bi9FY29sb2d5IHRoYXQgaXMgZnVsbCBvZiBpbXBvcnQsIHVzZWZ1bCwKICAgIGdlbmVyYXRpdmUsIGFuZCBwcm92b2tpbmcuIFRoZSBib29rIGlzIHN0cmVuZ3RoZW5pbmcgYW5kIGhlbHBmdWwgZm9yIGhlci4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmMuIFdoYXQgaW1wcmVzc2lvbiBoYXMgdGhlIHdyaXRlciBoYWQgYWJvdXQgdGhlIHdheSB3aGl0ZSB3b21lbiBsb29rZWQgdXBvbiBibGFjayB3b21lbj88L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgd3JpdGVyIGhhcyBoYWQgYSB2ZXJ5IGJhZCBpbXByZXNzaW9uIGFib3V0IHRoZSB3YXkgd2hpdGUgd29tZW4gbG9va2VkIHVwb24gYmxhY2sgd29tZW4uIEFjY29yZGluZyB0byBoZXIsIHRoZQogICAgd2hpdGUgd29tZW4gd2VyZSB1bmFibGUgdG8gaGVhciBCbGFjayB3b21lbidzIHdvcmRzIG9yIHRvIG1haW50YWluIGRpYWxvZ3VlIHdpdGggdGhlIGJsYWNrIHdvbWVuLiBUaGUgYWN0IG9mIHdoaXRlCiAgICB3b21lbiBpcyBsb25nIGFuZCBkaXNjb3VyYWdpbmcgZm9yIGhlci4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmQuIFdoeSBkaWQgTWFyeSBub3QgY2FzdCBibGFjayB3b21lbiBhcyBnb2RkZXNzZXMgaW4gaGVyIGJvb2sgYWNjb3JkaW5nIHRvIExvcmRlPzwvc3Bhbj4KICAgIDxicj4KICAgIEFjY29yZGluZyB0byBMb3JkZSwgTWFyeSBkaWRuJ3QgY2FzdCBibGFjayB3b21lbiBhcyBnb2RkZXNzZXMgaW4gaGVyIGJvb2sgYmVjYXVzZSBzaGUgaGFkIG1hZGUgYSBjb25zY2lvdXMgZGVjaXNpb24KICAgIHRvIGxpbWl0IGhlciBzY29wZSBhbmQgZGVhbCBvbmx5IHdpdGggdGhlIGVjb2xvZ3kgb2YgV2VzdGVybiBFdXJvcGVhbiB3b21lbi4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmUuIFdoeSBkaWQgTG9yZGUgdGhpbmsgdGhhdCBzaGUgbWlzdXNlZCBoZXIgd29yZHM/PC9zcGFuPgogICAgPGJyPgogICAgTG9yZGUgdGhvdWdodCB0aGF0IHNoZSBtaXN1c2VkIGhlciB3b3JkcyBiZWNhdXNlIHNoZSB1dGlsaXplZCBoZXIgd29yZHMgb25seSB0byB0ZXN0aWZ5IGFnYWluc3QgTG9yZGUgYXMgYSB3b21hbiBvZgogICAgY29sb3VyLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Zi4gRm9yIExvcmRlLCBob3cgd2VyZSB3b21lbiwgZXNwZWNpYWxseSBmcm9tIHRoZSBibGFjayBjb21tdW5pdHksIHVuZGVydmFsdWVkPzwvc3Bhbj4KICAgIDxicj4KICAgIEZvciBMb3JkZSwgd29tZW4sIGVzcGVjaWFsbHkgZnJvbSB0aGUgYmxhY2sgY29tbXVuaXR5IHdlcmUgdW5kZXJ2YWx1ZWQgYXMgdGhleSB3ZXJlIGdoZXR0b2l6ZWQgYnkgYSB3aGl0ZSB3b21hbgogICAgZGVhbGluZyBvbmx5IG91dCBvZiBhIHBhdHJpYXJjaGFsIHdlc3Rlcm4gRXVyb3BlYW4gZnJhbWUgb2YgcmVmZXJlbmNlLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Zy4gSG93IGRvZXMgTWFyeSB0YWtlIHdoaXRlIHdvbWVuIGFzPyBEb2VzIExvcmRlIGFncmVlIHdpdGggTWFyeSZyc3F1bztzIHZpZXc/PC9zcGFuPgogICAgPGJyPgogICAgTWFyeSB0YWtlcyB3aGl0ZSB3b21lbiBhcyBzdXBlcmlvciB0byBub24td2hpdGUgd29tZW4uIEhlciBhc3N1bXB0aW9uIGlzIHRoYXQgdGhlIGhlcnN0b3J5IGFuZCB0aGUgbXl0aCBvZiB3aGl0ZQogICAgd29tZW4gaXMgdGhlIGxlZ2l0aW1hdGUgYW5kIHNvbGUgaGVyc3RvcnkgYW5kIG15dGggb2YgYWxsIHdvbWVuIHRvIGNhbGwgdXBvbiBmb3IgcG93ZXIgYW5kIGJhY2tncm91bmQsIGFuZCB0aGF0CiAgICBub253aGl0ZSB3b21lbiBhbmQgdGhlaXIgaGVyc3RvcmllcyBhcmUgbm90ZXdvcnRoeSBvbmx5IGFzIGRlY29yYXRpb25zLCBvciBleGFtcGxlcyBvZiBmZW1hbGUgdmljdGltaXphdGlvbi4KICAgIDxicj4KICAgIE5vLCBMb3JkZSBkb2VzIG5vdCBhZ3JlZSB3aXRoIE1hcnkncyB2aWV3LiBMb3JkZSBkb2VzIG5vdCBsaWtlZCB0aGUgc3VwcmVtYWN5IG9mIHdoaXRlIGZlbWluaXNtIG92ZXIgYmxhY2sgZmVtaW5pc20KICAgIHNob3duIGJ5IE1hcnkgaW4gaGVyIHZpZXdzIHByZXNlbnRpbmcgYmxhY2tzIGFzIGRlY29yYXRpdmUgYW5kIHVzZWZ1bCB0aGluZ3MgYW5kIGlnbm9yaW5nIHRoZWlyIHBhaW4gYW5kIG9wcHJlc3Npb24uCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5oLiBXaGF0IGlzIEFmcmVrZXRlPyBIb3cgZG9lcyBpdCBjb25uZWN0IHRvIHRoaXMgbGVzc29uPzwvc3Bhbj4KICAgIDxicj4KICAgIEFmcmVrZXRlIGlzIHRoZSBjb2xsZWN0aXZlIHZvaWNlIHRvIHRoZSB0cmFkaXRpb24gb2YgYmxhY2sgbGVzYmlhbiB3cml0aW5nLiBJdCBjb25uZWN0cyB0byB0aGlzIGxlc3NvbiBhcyB0aGUgYXV0aG9yCiAgICB3YW50cyB0byBjb25uZWN0IGFsbCB0aGUgYmxhY2sgd29tZW4gaW4gdGhlIGFyZW5hIG9mIGJsYWNrIHdyaXRpbmcuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8aDM+Q3JpdGljYWwgdGhpbmtpbmc8L2gzPgogICAgPGJyPgogICAgPHNwYW4+YS4gJnF1b3Q7VGhlIG9wcHJlc3Npb24gb2Ygd29tZW4ga25vd3Mgbm8gZXRobmljIG9yIHJhY2lhbCBib3VuZGFyaWVzLiZxdW90OyBEbyB5b3UgYWdyZWUgb3Igbm90PyBKdXN0aWZ5IHdpdGgKICAgICAgICB5b3VyIHJlYXNvbnMuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgJnF1b3Q7VGhlIG9wcHJlc3Npb24gb2Ygd29tZW4ga25vd3Mgbm8gZXRobmljIG9yIHJhY2lhbCBib3VuZGFyaWVzLiZxdW90OyBZZXMsIEkgYWdyZWUgd2l0aCB0aGlzIHN0YXRlbWVudC4KICAgIDxicj4KICAgIDxicj4KICAgIFdvbWVuIGhhdmUgZm91Z2h0IHRvIGJlIHRyZWF0ZWQgZXF1YWwgZm9yIG1hbnkgeWVhcnMgYW5kIGRlc2VydmUgc2FtZSBwYXkgYXMgbWVuLiBNZW4gcmVjZWl2ZSBiZXR0ZXIgdHJlYXRtZW50LAogICAgam9icywgYW5kIGJldHRlciBwYXkgdGhhbiB3b21lbiwgd2hpY2ggc2hvd3MgZGlzY3JpbWluYXRpb24gdG93YXJkcyB0aGVtLiBXb21lbiBjb250aW51ZSB0byBmaWdodCBhZ2FpbnN0IHRoZQogICAgZGlzY3JpbWluYXRpb24gd29ybGR3aWRlLiBUaGUgb3BwcmVzc2lvbiBvZiB3b21lbiBnZXR0aW5nIGRlZmluZWQgZXF1YWxpdHkgY3JlYXRlcyBhIGZvcm0gb2YgaW50b2xlcmFuY2UuIFdvbWVuIG5vdAogICAgaGF2aW5nIHRoZSByaWdodHMgdGhleSBkZXNlcnZlIGNhbiBsZWFkIHRvIHVuY2VydGFpbnR5IHdpdGhpbiBvbmVzZWxmLgogICAgPGJyPgogICAgPGJyPgogICAgSW4gaGlzdG9yeSwgd29tZW4gZGlkIG5vdCBoYXZlIGVxdWFsaXR5IHJpZ2h0cyB3aGljaCBjb25uZWN0cyB0byB3aHkgc29tZSBzdGlsbCBmYWNlIHNleGlzdCBkaXNjcmltaW5hdGlvbiBhZ2FpbnN0CiAgICBtZW4uIERlc3BpdGUgdGhlIHRyZW1lbmRvdXMgcHJvZ3Jlc3MgbWFkZSBpbiB0aGUgc3RydWdnbGUgZm9yIGdlbmRlciBlcXVhbGl0eSwgd29tZW4gc3RpbGwgZmFjZSB2aW9sZW5jZSwKICAgIGRpc2NyaW1pbmF0aW9uLCBhbmQgaW5zdGl0dXRpb25hbCBiYXJyaWVycyB0byBlcXVhbCBwYXJ0aWNpcGF0aW9uIGluIHNvY2lldHkuIFdvbWVuIGFyZSB0cmVhdGVkIGxlc3MgdGhhbiBtZW4KICAgIGJlY2F1c2Ugb2YgZ2VuZGVyIGluZXF1YWxpdHksIHRoaXMgc2hvdyBob3cgd29tZW4gYXJlIG5vdCBsb29rZWQgb24gdGhlIHNhbWUgc29jaWFsIHN0YXR1cy4gSXQgc2hvdWxkIGJlIGVxdWFsIHBheQogICAgZm9yIGVxdWFsIHdvcmssIGJ1dCB1bmZvcnR1bmF0ZWx5IHdvbWVuIGFyZSBsb29rZWQgYXMgbGVzcyB0aGFuIG1lbi4gTWFueSBjb3VudHJpZXMgZG8gbm90IGdpdmUgd29tZW4gdGhlIHJpZ2h0IHRvCiAgICBlZHVjYXRpb24gYmVjYXVzZSB0aGV5IGJlbGlldmUgd29tZW4gc2hvdWxkIG5vdCBiZSBlZHVjYXRlZC4gTWFueSBwb29yIHdvbWVuIGNhbm5vdCBhZmZvcmQgdG8gcGF5IGZvciBlZHVjYXRpb24sCiAgICBsaW1pdGluZyB0aGVtIHRvIHJlY2VpdmluZyBpdC4gTWFueSB0aW1lcyBpdCBpcyBub3QgYW4gb3B0aW9uIGJlY2F1c2UgZ292ZXJubWVudHMgcHJldmVudCB3b21lbiBmcm9tIGFjaGlldmluZyB0aGVpcgogICAgZ29hbCBvZiBlZHVjYXRpb24uIFRodXMsIGR1ZSB0byBhbGwgdGhlc2UgdGhpbmdzLCB3b21lbiBoYXZlIGJlZW4gc3VmZmVyaW5nIGEgbG90LiBUaGVpciBvcHByZXNzaW9uIGtub3dzIG5vIGV0aG5pYwogICAgYW5kIHJhY2lhbCBib3VuZGFyaWVzIGFuZCB0aGV5IGhhdmUgYmVlbiB0aGUgdmljdGltcyBmb3IgYWdlcy4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmIuIFdoeSBpcyBpdCBpbXBvcnRhbnQgdG8gcXVlc3Rpb24gb3VyIGJlbGllZnMgYW5kIHZhbHVlcz8gSG93IGFyZSB0aGV5IHNldCB1cCBpbiBhIHBlcnNvbiZyc3F1bztzCiAgICAgICAgbWluZD88L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBJdCBpcyBpbXBvcnRhbnQgdG8gcXVlc3Rpb24gb3VyIGJlbGllZnMgYW5kIHZhbHVlcyBiZWNhdXNlIGl0IGJ1aWxkcyBjaGFyYWN0ZXIsIGhvbmVzdHksIGNvbXBhc3Npb24sIGFjY2VwdGFuY2UgYW5kCiAgICBzdHJlbmd0aC4gUGVvcGxlIHVzdWFsbHkgdGVuZCB0byBhdm9pZCBxdWVzdGlvbmluZyB0aGVpciBvd24gYmVsaWVmcyBiZWNhdXNlIHRoZXkgYXNzdW1lIHRoYXQgaXQgd2lsbCBkaW1pbmlzaCB0aGVpcgogICAgYmVsaWVmcy4gSWYgd2UgdGhpbmsgdGhpcyB3YXkgaXQncyBiZWNhdXNlIHdlIGFscmVhZHkgZG91YnQgdGhlIHZlcmFjaXR5IG9mIG91ciBjbGFpbXMsIGFuZCB3ZSBhcmUgYmVpbmcgZGlzaG9uZXN0CiAgICB3aXRoIG91cnNlbHZlcy4gUXVlc3Rpb25pbmcgYmVsaWVmcyB0aHJvdWdoIG9iamVjdGl2aXR5IGFuZCBvYnNlcnZpbmcgYXMgYSB0aGlyZCBwYXJ0eS9wZXJzb24gaGVscHMgdXMgdG8gZ2FnZSBub3QKICAgIG9ubHkgaWYgb3VyIGJlbGllZnMgYXJlIHRydWUsIGJ1dCB3aGF0IGFyZSB0aGUgbG9naWNhbCBjb25zZXF1ZW5jZXMgb2Ygb3VyIGlkZWFzIGluIHRoZSB3b3JsZCAocG9zaXRpdmUgYW5kCiAgICBuZWdhdGl2ZSkuIEFzIHNvb24gYXMgd2UgcXVlc3Rpb24gYW5vdGhlciBwZXJzb24ncyBiZWxpZWZzIG9uIGEgdG9waWMsIHdlIHNob3VsZCBldmFsdWF0ZSBvdXIgb3duLiBJZiB3ZSBkaXNjb3ZlciB3ZQogICAgYXJlIHdyb25nLCB0aGlzIGZvc3RlcnMgYWNjZXB0YW5jZS4gSWYgd2UgZGlzY292ZXIgd2UgYXJlIHdyb25nIGFuZCBtb2RpZnkgb3VyIGJlbGllZnMgYW5kIGFkbWl0IG91ciBlcnJvciwgdGhpcwogICAgZm9zdGVycyBzdHJlbmd0aC4gVGh1cywgaXQmcnNxdW87cyBpbXBvcnRhbnQgdG8gcXVlc3Rpb24gb3VyIGJlbGllZnMgYW5kIHZhbHVlcy4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxoMz5Xcml0aW5nPC9oMz4KICAgIDxicj4KICAgIDxzcGFuPkIuIFdyaXRlIGFuIGFydGljbGUgZm9yIGEgbmF0aW9uYWwgZGFpbHkgb24gJnF1b3Q7VGhlIFN0YXR1cyBvZiBXb21lbiBpbiBOZXBhbGkgU29jaWV0eS4mcXVvdDs8L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8cCBzdHlsZT0idGV4dC1hbGlnbjogY2VudGVyOyBmb250LXdlaWdodDogYm9sZDsiPlRoZSBTdGF0dXMgb2YgV29tZW4gaW4gTmVwYWxpIFNvY2lldHk8L3A+CiAgICA8YnI+CiAgICA8Yj4yMDIxLTAxLTI2IDo8L2I+IE5lcGFsIGlzIGEgY291bnRyeSBvZiBncmVhdCBnZW9ncmFwaGljLCBjdWx0dXJhbCwgZXRobmljLCByZWxpZ2lvdXMgZGl2ZXJzaXR5LiBBY3Jvc3MgdGhlIGRpdmVyc2l0eSwKICAgIHRoZSBtYWpvcml0eSBvZiBjb21tdW5pdGllcyBpbiBOZXBhbCBhcmUgcGF0cmlhcmNoYWwuIEEgd29tZW4mcnNxdW87cyBsaWZlIGlzIHN0cm9uZ2x5IGluZmx1ZW5jZWQgYnkgaGVyIGZhdGhlciwKICAgIGh1c2JhbmQgYW5kIHNvbi4gU3VjaCBwYXRyaWFyY2hhbCBwcmFjdGljZXMgYXJlIGZ1cnRoZXIgcmVpbmZvcmNlZCBieSB0aGUgbGVnYWwgc3lzdGVtLiBUaGUgc3RhdHVzIG9mIHdvbWVuIGlzCiAgICBkZXRlcm1pbmVkIGJ5IHRoZSBwYXRyaWFyY2hhbCBzb2NpYWwgc3lzdGVtLCB2YWx1ZXMsIGFuZCB3b21lbiZyc3F1bztzIHJpZ2h0IHByZXNlcnZlZCBhbmQgcHJvdGVjdGVkIGJ5IHRoZSBzdGF0ZSwKICAgIGFuZCBzdGF0ZSBwb2xpY3kgZm9yIHRoZSBkZXZlbG9wbWVudCBvZiB3b21lbi4KICAgIDxicj4KICAgIDxicj4KICAgIFdvbWVuJnJzcXVvO3MgcmVsYXRpdmUgc3RhdHVzLCBob3dldmVyLCB2YXJpZWQgZnJvbSBvbmUgZXRobmljIGdyb3VwIHRvIGFub3RoZXIuIFRoZSBlY29ub21pYyBjb250cmlidXRpb24gb2Ygd29tZW4KICAgIGlzIHN1YnN0YW50aWFsLCBidXQgbGFyZ2VseSB1bm5vdGljZWQgYmVjYXVzZSB0aGVpciB0cmFkaXRpb25hbCByb2xlIHdhcyB0YWtlbiBhcyBmb3IgZ3JhbnRlZC4KICAgIDxicj4KICAgIDxicj4KICAgIFRoZSBoZWFsdGggc3RhdHVzIG9mIE5lcGFsJnJzcXVvO3MgcGVvcGxlIGlzIG9uZSBvZiB0aGUgbG93ZXN0IGluIHRoZSBTb3V0aCBBc2lhbiByZWdpb24gYW5kIHRoaXMgaXMgcGFydGljdWxhcmx5CiAgICB0cnVlIGZvciBmZW1hbGVzLiBPbmUgZmlmdGggb2Ygd29tZW4gZ2V0IG1hcnJpZWQgaW4gdGhlIGVhcmx5IGFnZSBvZiAxNS0xOS4gQXMgYSByZXN1bHQgb2YgdGhlaXIgcHJlbWF0dXJlIHByZWduYW5jeQogICAgdGhlIGRlYXRocyBvZiB3b21lbiBoYXZlIGJlZW4gb2NjdXJyaW5nIGluIGEgdmVyeSBoaWdoLgogICAgPGJyPgogICAgPGJyPgogICAgTmF0aW9uYWwgc3RhdGlzdGljcyBzaG93cyB0aGF0IHdvbWVuJnJzcXVvO3MgbGl0ZXJhY3kgcmF0ZSBpcyAzMCBwZXJjZW50IHdoaWxlIDY2IHBlcmNlbnQgdG8gbWFsZS4gVGhlIGVucm9sbG1lbnQgb2YKICAgIHdvbWVuIGluIGhpZ2hlciBlZHVjYXRpb24gaXMgb25seSAyNC45NSBwZXJjZW50LiBXb21lbiZyc3F1bzsgaW52b2x2ZW1lbnQgaW4gdGVjaG5pY2FsIGFuZCB2b2NhdGlvbmFsIGVkdWNhdGlvbiBpcwogICAgYWxzbyBsb3dlciB0aGFuIG1lbi4gVGhpcyBpcyBkdWUgdG8gdGhlIHNvY2lhbCBub3JtcyBhbmQgY3VsdHVyZSB0aGF0IHdlIGZvbGxvdyBhbHNvLiBBcyBpbiBydXJhbCBhcmVhcyBnaXJscyBhcmUKICAgIGNvbnNpZGVyZWQgYXMgJmxkcXVvO3BhcmF5YSBkaGFuJnJkcXVvOyhvdGhlcnMgcHJvcGVydHkpIGFuZCB0aGV5IGRvbiZyc3F1bzt0IGdldCB0aGUgb3Bwb3J0dW5pdHkgdG8gZ2V0IGVkdWNhdGlvbi4KICAgIDxicj4KICAgIDxicj4KICAgIEEgbGFyZ2UgcGFydCBvZiB3b21lbiZyc3F1bztzIHdvcmsgaXMgbm90IGNvbnNpZGVyZWQgYXMgZWNvbm9taWMgYWN0aXZpdHkuIEFzIGEgcmVzdWx0IG9ubHkgNDUuMiBwZXIgY2VudCBvZiB3b21lbgogICAgYXMgY29tcGFyZWQgdG8gNjguMiBwZXIgY2VudCBvZiBtZW4gYXJlIGNsYXNzaWZpZWQgYXMgZWNvbm9taWNhbGx5IGFjdGl2ZS4gVGhlcmUgYXJlIHZlcnkgZmV3IHdvbWVuIHdvcmtpbmcgaW4KICAgIHByb2Zlc3Npb25hbCB3b3JrIGluIE5lcGFsLiBUaGV5IG1heSBzdHVkeSB0aGUgbGF3LCBidXQgZmV3IGFyZSBhYmxlIHRvIGVudGVyIHRoZSBwcm9mZXNzaW9uLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPkdyYW1tYXI8L2gzPgogICAgPHU+PGJyPjwvdT4KICAgIDxzcGFuPkIuIENob29zZSB0aGUgY29ycmVjdCBhbHRlcm5hdGl2ZS48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5hLiBhbiBvbGQgZm9yZWlnbiBjYXIvYSBmb3JlaWduIG9sZCBjYXI8L3NwYW4+CiAgICA8YnI+CiAgICBhbiBvbGQgZm9yZWlnbiBjYXIKICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmIuIGEgYmVhdXRpZnVsIHdoaXRlIGRyZXNzLyBhIHdoaXRlIGJlYXV0aWZ1bCBkcmVzczwvc3Bhbj4KICAgIDxicj4KICAgIGEgYmVhdXRpZnVsIHdoaXRlIGRyZXNzCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5jLiBhIG5pY2UgdGFsbCB5b3VuZyBtYW4vYSB0YWxsIG5pY2UgeW91bmcgbWFuIDwvc3Bhbj4KICAgIDxicj4KICAgIGEgbmljZSB0YWxsIHlvdW5nIG1hbgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZC4gYSBiaWcgYmxhY2sgd29vZGVuIGRlc2svIGEgYmxhY2sgd29vZGVuIGJpZyBkZXNrPC9zcGFuPgogICAgPGJyPgogICAgYSBiaWcgYmxhY2sgd29vZGVuIGRlc2sKICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmUuIGEgZGVsaWNpb3VzIEl0YWxpYW4gcGl6emEvIGFuIEl0YWxpYW4gZGVsaWNpb3VzIHBpenphIDwvc3Bhbj4KICAgIDxicj4KICAgIGEgZGVsaWNpb3VzIEl0YWxpYW4gcGl6emEKICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmYuIGEgaHVnZSBicm93biBiZWFyL2EgYnJvd24gaHVnZSBiZWFyIDwvc3Bhbj4KICAgIDxicj4KICAgIGEgaHVnZSBicm93biBiZWFyCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5nLiBhIHB1cnBsZSBjb3R0b24gc2xlZXBpbmcgYmFnLyBhIGNvdHRvbiBwdXJwbGUgc2xlZXBpbmcgYmFnIDwvc3Bhbj4KICAgIDxicj4KICAgIGEgcHVycGxlIGNvdHRvbiBzbGVlcGluZyBiYWcKICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmguIGEgYmVhdXRpZnVsIG9sZCBJbmRpYW4gdmlsbGFnZS9hbiBvbGQgYmVhdXRpZnVsIEluZGlhbiB2aWxsYWdlPC9zcGFuPgogICAgPGJyPgogICAgYW4gb2xkIGJlYXV0aWZ1bCBJbmRpYW4gdmlsbGFnZQogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+aS4gYSBjdXRlIGxpdHRsZSBraXR0ZW4vIGEgbGl0dGxlIGN1dGUga2l0dGVuIDwvc3Bhbj4KICAgIDxicj4KICAgIGEgY3V0ZSBsaXR0bGUga2l0dGVuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5qLiBhbiBleHBlbnNpdmUgYW50aXF1ZSAvYW4gYW50aXF1ZSBleHBlbnNpdmUgdGFibGUgPC9zcGFuPgogICAgPGJyPgogICAgYW4gYW50aXF1ZSBleHBlbnNpdmUgdGFibGUKICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPkMuIFB1dCB0aGUgYWRqZWN0aXZlcyBpbiB0aGUgZm9sbG93aW5nIHNlbnRlbmNlcyBpbiB0aGUgY29ycmVjdCBvcmRlci4gPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+YS4gSSBib3VnaHQgKHJlZC8gYSAvY29tZm9ydGFibGUvbmV3KSBzY29vdGVyLiA8L3NwYW4+CiAgICA8YnI+CiAgICBJIGJvdWdodCBhIGNvbWZvcnRhYmxlIG5ldyBzY29vdGVyLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Yi4gU2hlIHJlYWNoZWQgaG9tZSBhbmQgc2F0IG9uIChyZWxheGluZy9vbGQvaGVyL3dvb2RlbikgY2hhaXIuIDwvc3Bhbj4KICAgIDxicj4KICAgIFNoZSByZWFjaGVkIGhvbWUgYW5kIHNhdCBvbiBoZXIgb2xkIHJlbGF4aW5nIHdvb2RlbiBjaGFpci4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmMuIFdlIGF0ZSAoQ2hpbmVzZS9kZWxpY2lvdXMvc29tZSkgZm9vZC4gPC9zcGFuPgogICAgPGJyPgogICAgd2UgYXRlIHNvbWUgZGVsaWNpb3VzIENoaW5lc2UgZm9vZC4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmQuIEkgbmVlZCAoZ29sZGVuL2RlbGljaW91cy9zb21lL3JvdW5kKSBhcHBsZXMuIDwvc3Bhbj4KICAgIDxicj4KICAgIEkgbmVlZCBzb21lIGRlbGljaW91cyByb3VuZCBnb2xkZW4gYXBwbGVzLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZS4gV2UgbGlrZSB0byBsaXZlIGluIGEgKGNhbG0vdW5tZWRpYXRlZC9yZW1vdGUpIHBsYWNlIGZvciBzb21lIHRpbWUuIDwvc3Bhbj4KICAgIDxicj4KICAgIFdlIGxpa2UgdG8gbGl2ZSBpbiBhIGNhbG0gdW5tZWRpYXRlZCByZW1vdGUgcGxhY2UgZm9yIHNvbWUgdGltZS4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmYuIFNoZSBpcyB3ZWFyaW5nIChzaWx2ZXIvYmVhdXRpZnVsIC8gYShuKS8gb2xkKSByaW5nLiA8L3NwYW4+CiAgICA8YnI+CiAgICBTaGUgaXMgd2VhcmluZyBhbiBvbGQgYmVhdXRpZnVsIHNpbHZlciByaW5nLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Zy4gSSBhbSBsb29raW5nIGZvciAoZ29sZGVuL3N0eWxpc2gvYS9KYXBhbmVzZSkgd2F0Y2guIDwvc3Bhbj4KICAgIDxicj4KICAgIEkgYW0gbG9va2luZyBmb3IgYSBzdHlsaXNoIEphcGFuZXNlIGdvbGRlbiB3YXRjaC4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmguIFNoZSBkcm9wcGVkIChvbGQvY2hpbmEvYXR0cmFjdGl2ZS9hKG4pKSBjdXAgYW5kIHNtYXNoZWQgaXQuIDwvc3Bhbj4KICAgIDxicj4KICAgIFNoZSBkcm9wcGVkIGFuIG9sZCBhdHRyYWN0aXZlIENoaW5hIGN1cCBhbmQgc21hc2hlZCBpdC4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmkuIEhlIHdhbnRzIHRvIG1hcnJ5ICh5b3VuZy9wcmV0dHkvZWR1Y2F0ZWQvYShuKS9ydXN0aWMpIGdpcmwuIDwvc3Bhbj4KICAgIDxicj4KICAgIEhlIHdhbnRzIHRvIG1hcnJ5IGEgcHJldHR5IHlvdW5nIGVkdWNhdGVkIHJ1c3RpYyBnaXJsLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ai4gV2Ugc3RheWVkIGluIGEgKGx1eHVyaW91cy9maXZlIHN0YXIvbmV3KSBob3RlbCBpbiBEdWJhaS4gPC9zcGFuPgogICAgPGJyPgogICAgV2Ugc3RheWVkIGluIGEgbmV3IGx1eHVyaW91cyBmaXZlLXN0YXIgaG90ZWwgaW4gRHViYWkuCiAgICA8YnI+CgoKICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KCiAgICA8c3Bhbj5JZiB5b3UgaGF2ZSBhbnkgc3VnZ2VzdGlvbnMgb3IgZmVlZGJhY2tzLCBwbGVhc2Ugd3JpdGUgdG8gdXMgYXQgcGx1czJoZWxwQGdtYWlsLmNvbTwvc3Bhbj4KCiAgICA8YnI+CiAgICA8YnI+CjwvYm9keT4KCjwvaHRtbD4="}, "ss": {"1": "", "2": "", "3": "", "4": "", "5": "", "6": "", "7": ""}, "poems": {"1": "", "2": "", "3": "", "4": "", "5": ""}, "essays": {"1": "", "2": "", "3": "", "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgoKICAgIDxicj4KICAgIDxjZW50ZXI+SHVtaWxpdHk8L2NlbnRlcj4KICAgIDxicj4KICAgIDxwIHN0eWxlPSJmb250LXdlaWdodDogYm9sZDsgIGNvbG9yOiBncmV5OyI+Tm90ZXMgQnk6IFNpZGRoYW50IFBvdWRlbDwvcD4KICAgIDxicj4KICAgIDxoMz5VbmRlcnN0YW5kaW5nIHRoZSB0ZXh0IDwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5BbnN3ZXIgdGhlIGZvbGxvd2luZyBxdWVzdGlvbnMuIDwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmEuIERlc2NyaWJlIHRoZSBjbGFpbSBvZiB0aGUgQ2hpbmVzZSBuYXRpb25hbGlzdHMgYWJvdXQgaHVtYW4gaGlzdG9yeS48L3NwYW4+CiAgICA8YnI+CiAgICBDaGluZXNlIG5hdGlvbmFsaXN0cyBjbGFpbSB0aGF0IGhpc3RvcnkgYmVnYW4gd2l0aCB0aGUgWWVsbG93IEVtcGVyb3IgYW5kIHRoZSBYaWEgYW5kIFNoYW5nIGR5bmFzdGllcy4gVGhleSBiZWxpZXZlCiAgICB0aGF0IGFueXRoaW5nIHRoYXQgd2FzIGFjY29tcGxpc2hlZCBieSBvdGhlciBydWxlcnMgbGlrZSB3ZXN0ZXJuZXJzLCBNdXNsaW1zIG9yIEluZGlhbnMgaXMgYSBiaXQgaW1pdGF0aW9uIG9mCiAgICBDaGluZXNlIGFjaGlldmVtZW50LgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Yi4gV2hhdCBkbyBwaW91cyBNdXNsaW1zIGJlbGlldmUgYWJvdXQgaHVtYW4gaGlzdG9yeT88L3NwYW4+CiAgICA8YnI+CiAgICBQaW91cyBNdXNsaW1zIGJlbGlldmUgdGhhdCBhbGwgaGlzdG9yeSBmb2xsb3dzIHRoZSBRdXJhbi4gQWxsIHRoZSBoaXN0b3J5IGJlZm9yZSBQcm9waGV0IE11aGFtbWFkIHdhcyBtb3N0bHkKICAgIG1lYW5pbmdsZXNzIGFuZCBhbGwgaGlzdG9yeSBhZnRlciB0aGF0IGZvbGxvd2luZyBRdXJhbidzIHJldmVsYXRpb24gcmV2b2x2ZXMgYXJvdW5kIHRoZSBNdXNsaW0gdW1tYWguCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5jLiBXaGF0IGRpZCB0aGUgQXp0ZWNzIGZpcm1seSBiZWxpZXZlIGFib3V0IHRoZSB1bml2ZXJzZT88L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgQXp0ZWNzIGZpcm1seSBiZWxpZXZlZCBhYm91dCB0aGUgdW5pdmVyc2UgdGhhdCBhbm51YWwgc2FjcmlmaWNlIGlzIHRoZSByZWFzb24gYmVoaW5kIHRoZSBleGlzdGVuY2Ugb2YgdGhlCiAgICB1bml2ZXJzZS4gV2l0aG91dCBhbm51YWwgc2FjcmlmaWNlLCB0aGUgc3VuIHdvdWxkbid0IHJpc2UgYW5kIHRoZSB3aG9sZSBjb3Ntb3Mgd291bGQgY29sbGFwc2UuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5kLiBXaGF0LCBhY2NvcmRpbmcgdG8gdGhlIGVzc2F5LCBhcmUgdGhlIHVuaXZlcnNhbCBodW1hbiBhYmlsaXRpZXM/PC9zcGFuPgogICAgPGJyPgogICAgQWNjb3JkaW5nIHRvIHRoZSBlc3NheSwgdGhlIHVuaXZlcnNhbCBodW1hbiBhYmlsaXRpZXMgYXJlIGFydCwgY3JlYXRpdml0eSwgc3Bpcml0dWFsaXR5IGFuZCBtb3J0YWxpdHkuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5lLiBIb3cgYXJlIHRoZSBiYXNpYyB5b2dhIHBvc3R1cmVzIGRlcml2ZWQgZnJvbSB0aGUgc2hhcGUgb2YgdGhlIGxldHRlcnMgb2YgdGhlIEhlYnJldyBhbHBoYWJldD8gPC9zcGFuPgogICAgPGJyPgogICAgVGhlIGJhc2ljIHlvZ2EgcG9zdHVyZXMgZGVyaXZlZCBmcm9tIHRoZSBzaGFwZSBvZiBsZXR0ZXJzIG9mIHRoZSBIZWJyZXcgYWxwaGFiZXQgYXMgdGhlIHlvZ2EgcG9zdHVyZSBUdWxhZGFuZGFzYW5hCiAgICBpbWl0YXRlcyB0aGUgbGV0dGVyICdkYWxlZCcsIFRyaWtvbmFzYW5hIGltaXRhdGVkIHRoZSBmb3JtIG9mIHRoZSBIZWJyZXcgbGV0dGVyICdhbGVwaCcgYW5kIHNvIG9uLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPlJlZmVyZW5jZSB0byB0aGUgY29udGV4dCA8L2gzPgogICAgPGJyPgogICAgPHNwYW4+YS4gSG93IGRvIEhpbmR1IG5hdGlvbmFsaXN0cyByZWZ1dGUgdGhlIENoaW5lc2UgY2xhaW0gdGhhdCBodW1hbiBoaXN0b3J5IGJlZ2FuIHdpdGggdGhlIFllbGxvdyBFbXBlcm9yIGFuZCB0aGUKICAgICAgICBYaWEgYW5kIFNoYW5nIGR5bmFzdGllcz8gV2hvIGRvIHlvdSBhZ3JlZSB3aXRoLCBhbmQgd2h5Pzwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIEhpbmR1IG5hdGlvbmFsaXN0cyByZWZ1dGUgdGhlIENoaW5lc2UgY2xhaW0gdGhhdCBodW1hbnMgYmVnYW4gd2l0aCB0aGUgWWVsbG93IEVtcGVyb3IgYW5kIHRoZSBYaWEgYW5kIFNoYW5nCiAgICBkeW5hc3RpZXMgYnkgY2xhaW1pbmcgdGhhdCBJbmRpYW4gc2FnZXMgZGV2ZWxvcGVkIHRoZSB0aGVvcnkgb2YgcGxhbmVzIGFuZCBudWNsZWFyIHdlYXBvbnMgbG9uZyBiZWZvcmUgUGxhdG8sCiAgICBDb25mdWNpdXMgb3IgRWluc3RlaW4gYW5kIHRoZSBXcmlnaHQgYnJvdGhlcnMuCiAgICA8YnI+CiAgICA8YnI+CiAgICBJbiB0aGUgSGluZHUgaG9seSBib29rcyBvZiBIaW5kdXMsIGRpZmZlcmVudCBldmlkZW5jZSBvZiBkaXNjb3ZlcmllcyBhbmQgaW52ZW50aW9ucyBhcmUgZm91bmQgbG9uZyBiZWZvcmUgYW55CiAgICBzY2llbnRpc3RzIHByb3ZlZCB0aGVtLiBIaW5kdWlzbSBpcyBmb3VuZCB0byBiZSB0aGUgb2xkZXN0IHJlbGlnaW9uIGluIHRoZSB3b3JsZCBhY2NvcmRpbmcgdG8gdmFyaW91cyBzY2llbnRpZmljIGFzCiAgICB3ZWxsIGFzIGFyY2hhZW9sb2dpY2FsIHN0dWRpZXMuIFRodXMgSSBhZ3JlZSB3aXRoIHRoZSBIaW5kdSBuYXRpb25hbGlzdHMgb3ZlciBDaGluZXNlIGNsYWltcyB0aHJvdWdoIGRpZmZlcmVudAogICAgZXZpZGVuY2UgdGhhdCB3YXMgZm91bmQgaW4gSGluZHVpc20uCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5iLiBUaGUgYXV0aG9yIGhhcyBkZWFsdCB3aXRoIGEgY29udHJvdmVyc2lhbCBkZWJhdGUgb24gaHVtYW4gaGlzdG9yeS4gV2h5IGRvIHlvdSB0aGluayBoaXN0b3J5IGhhcyBiZWVuIGEKICAgICAgICBtYWpvciBjb250ZXN0ZWQgaXNzdWUgaW4gdGhlIHByZXNlbnQgd29ybGQ/PC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgVGhlIGVzc2F5ICdIdW1pbGl0eScgd3JpdHRlbiBieSBZdXZhbCBOb2FoIEhhcmFyaSBpcyBhYm91dCB0aGUgZGlmZmVyZW50IGNvbnRyb3ZlcnNpZXMgYWJvdXQgaHVtYW4gaGlzdG9yeS4gVGhlCiAgICBlc3NheSBwcmVzZW50cyB0aGUgdGhvdWdodHMgYW5kIHBlb3BsZSdzIGJlbGllZnMgaW4gaHVtYW4gaGlzdG9yeSBhY2NvcmRpbmcgdG8gdGhlaXIgcmVsaWdpb24uCiAgICA8YnI+CiAgICA8YnI+CiAgICBJbiBteSBvcGluaW9uLCBoaXN0b3J5IGhhcyBiZWVuIGEgbWFqb3IgY29udGVzdGVkIGlzc3VlIGluIHRoZSBwcmVzZW50IHdvcmxkIGR1ZSB0byBlZ29pc20uIEkgd291bGQgbGlrZSB0byBjYWxsCiAgICBlZ29pc20gdGhlIHN1cHJlbWFjeSBvZiB0aGVpciBiZWxpZWYgaW4gdGhlaXIgcmVsaWdpb24gb25seSByYXRoZXIgdGhhbiB1bmRlcnN0YW5kaW5nIG90aGVycy4gTW9zdCBpbmRpdmlkdWFscwogICAgYmVsaWV2ZSB0aGF0IHRoZWlyIHJlbGlnaW9uIGlzIHRoZSBvbGRlc3QgYW5kIHRoZXkgYXJlIHRoZSBjZW50ZXIgb2YgdGhlIHVuaXZlcnNlLiBUaGV5IGJlbGlldmUgdGhhdCB0aGVpciBjdWx0dXJlCiAgICBpcyBzdXBlcmlvciB0byBhbGwgb3RoZXJzLiBBY2NvcmRpbmcgdG8gdGhlbSwgZXZlcnl0aGluZyBvcmlnaW5hdGVkIGZyb20gdGhlaXIgY3VsdHVyZS4gU28gYmVjYXVzZSBvZiBlZ29pc20gaHVtYW4KICAgIGhpc3RvcnkgaGFzIGJlZW4gYSBtYWpvciBjb250ZXN0ZWQgaXNzdWUuIFRoZSBhdXRob3Igd2lzaGVzIHRvIHJlbW92ZSBhIHNlbnNlIG9mIHN1cGVyaW9yaXR5IGFuZCBkb21pbmF0aW9uIGZyb20KICAgIGh1bWFuaXR5LgogICAgPGJyPgoKICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPklmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tPC9zcGFuPgoKICAgIDxicj4KICAgIDxicj4KPC9ib2R5PgoKPC9odG1sPg==", "5": ""}, "oap": {"1": "", "2": "", "3": ""}}
