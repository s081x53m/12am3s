{
    "ld": {
        "1": "",
        "2": "",
        "3": "",
        "4": "",
        "5": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj5Vbml0IDQKCiAgICAgICAgPGJyPkVkdWNhdGlvbjwvY2VudGVyPgoKICAgIDxicj4KICAgIDxicj4KICAgIDxoMz5Xb3JraW5nIHdpdGggd29yZHMgPC9oMz4KICAgIDxicj4KICAgIAogICAgPHNwYW4+QS4gTWF0Y2ggdGhlIHdvcmRzIGluIGNvbHVtbiAmbHNxdW87QSZyc3F1bzsgd2l0aCB0aGVpciBtZWFuaW5ncyBpbiBjb2x1bW4gJmxzcXVvO0ImcnNxdW87Ljwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmEuIGV4cGVjdGFudGx5PC9zcGFuPgogICAgPGJyPgogICAgaW4gYSB3YXkgdGhhdCBzaG93cyB5b3UgYXJlIGhvcGluZyBmb3Igc29tZXRoaW5nLCBlc3BlY2lhbGx5IHNvbWV0aGluZyBnb29kIG9yIGV4Y2l0aW5nCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5iLiBiZWNrb248L3NwYW4+CiAgICA8YnI+CiAgICB0byBnaXZlIHNpZ25hbCB0byBzb21lYm9keSB0byBtb3ZlIG5lYXJlciBvciB0byBmb2xsb3cgeW91CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5jLiBncmFwcGxlPC9zcGFuPgogICAgPGJyPgogICAgdG8gdHJ5IGhhcmQgdG8gZmluZCBhIHNvbHV0aW9uIHRvIGEgcHJvYmxlbQogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZC4gdGV4dHVyZTwvc3Bhbj4KICAgIDxicj4KICAgIHRoZSB3YXkgZm9vZCBvciBkcmluayB0YXN0ZXMgb3IgZmVlbHMgaW4geW91ciBtb3V0aAogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZS4gY29iYmxlZDwvc3Bhbj4KICAgIDxicj4KICAgIGhhdmluZyBhIHN1cmZhY2UgdGhhdCBpcyBtYWRlIG9mIHNtYWxsIHJvdW5kIHN0b25lcwogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Zi4gZmxpbXN5PC9zcGFuPgogICAgPGJyPgogICAgdGhpbiBhbmQgZWFzaWx5IHRvcm4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmcuIGF0dGlyZTwvc3Bhbj4KICAgIDxicj4KICAgIGNsb3RoZXMsIGVzcGVjaWFsbHkgZmluZSBvciBmb3JtYWwgb25lcwogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+aC4gbWFydmVsb3VzPC9zcGFuPgogICAgPGJyPgogICAgZXh0cmVtZWx5IGdvb2Q7IHdvbmRlcmZ1bAogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+aS4gZHluYW1pY3M8L3NwYW4+CiAgICA8YnI+CiAgICB0aGUgc2NpZW5jZSBvZiB0aGUgZm9yY2VzIGludm9sdmVkIGluIG1vdmVtZW50CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5CLiBBbiBhdXRvYmlvZ3JhcGh5IGlzIGEgc3Rvcnkgb2YgYSBwZXJzb24mcnNxdW87cyBsaWZlLCB3cml0dGVuIGJ5IGhpbXNlbGYvaGVyc2VsZi4gVXNlIGEgZGljdGlvbmFyeSBhbmQgZmluZCB0aGUgbWVhbmluZ3Mgb2YgdGhlIGZvbGxvd2luZyB3b3JkcyByZWxhdGVkIHRvIHBlb3BsZSZyc3F1bztzIGxpZmUgc3Rvcmllcy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5IYWdpb2dyYXBoeTwvc3Bhbj4KICAgIDxicj4KICAgIHRoZSB3cml0aW5nIG9mIHRoZSBsaXZlcyBvZiBzYWludHMuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5Qc3ljaG9iaW9ncmFwaHk8L3NwYW4+CiAgICA8YnI+CiAgICBhIGJpb2dyYXBoaWNhbCBzdHVkeSBmb2N1c2luZyBvbiBwc3ljaG9sb2dpY2FsIGZhY3RvcnMsIGFzIGNoaWxkaG9vZCB0cmF1bWFzIGFuZCB1bmNvbnNjaW91cyBtb3RpdmVzLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+UGF0aG9ncmFwaHk8L3NwYW4+CiAgICA8YnI+CiAgICB0aGUgc3R1ZHkgb2YgdGhlIGxpZmUgb2YgYW4gaW5kaXZpZHVhbCBvciB0aGUgaGlzdG9yeSBvZiBhIGNvbW11bml0eSB3aXRoIHJlZ2FyZCB0byB0aGUgaW5mbHVlbmNlIG9mIGEgcGFydGljdWxhcgogICAgZGlzZWFzZSBvciBwc3ljaG9sb2dpY2FsIGRpc29yZGVyLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Q2hyb25pY2xlPC9zcGFuPgogICAgPGJyPgogICAgYSBmYWN0dWFsIHdyaXR0ZW4gYWNjb3VudCBvZiBpbXBvcnRhbnQgb3IgaGlzdG9yaWNhbCBldmVudHMgaW4gdGhlIG9yZGVyIG9mIHRoZWlyIG9jY3VycmVuY2UuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5PYml0dWFyeTwvc3Bhbj4KICAgIDxicj4KICAgIGEgbm90aWNlIG9mIGEgZGVhdGgsIGVzcGVjaWFsbHkgaW4gYSBuZXdzcGFwZXIsIHR5cGljYWxseSBpbmNsdWRpbmcgYSBicmllZiBiaW9ncmFwaHkgb2YgdGhlIGRlY2Vhc2VkIHBlcnNvbi4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPkNoYXJhY3RlciBza2V0Y2g8L3NwYW4+CiAgICA8YnI+CiAgICBhIGJyaWVmIHdyaXR0ZW4gZGVzY3JpcHRpb24gb2YgYSBwZXJzb24ncyBxdWFsaXRpZXMuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5Qcm9maWxlPC9zcGFuPgogICAgPGJyPgogICAgYSBzaG9ydCBhcnRpY2xlIGdpdmluZyBhIGRlc2NyaXB0aW9uIG9mIGEgcGVyc29uIG9yIG9yZ2FuaXphdGlvbi4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPk1lbW9pcjwvc3Bhbj4KICAgIDxicj4KICAgIGEgaGlzdG9yaWNhbCBhY2NvdW50IG9yIGJpb2dyYXBoeSB3cml0dGVuIGZyb20gcGVyc29uYWwga25vd2xlZGdlLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPkNvbXByZWhlbnNpb248L2gzPgogICAgPGJyPgogICAgPHNwYW4+QS4gUHV0IHRoZSBmb2xsb3dpbmcgZXZlbnRzIGluIHRoZSBsaWZlIG9mIEFiZHVsIEthbGFtIGluIGEgY2hyb25vbG9naWNhbCBvcmRlci48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBjLiBBYmR1bCBLYWxhbSBhdHRlbmRlZCBhbiBlbGVtZW50YXJ5IHNjaG9vbCBhdCBSYW1lc3dhcmFtLgogICAgPGJyPgogICAgPGJyPgogICAgZi4gT25lIGRheSBBYmR1bCBLYWxhbSZyc3F1bztzIHRlYWNoZXIgdmlzaXRlZCB0aGVtIHRvIHNoYXJlIGhpcyBwcmlkZSBhbmQgcGxlYXN1cmUgYWJvdXQgaGlzIHBlcmZvcm1hbmNlLgogICAgPGJyPgogICAgPGJyPgogICAgYS4gVGhleSBjZWxlYnJhdGVkIGhhcHBpbmVzcyB3aXRoIHBvbGkuCiAgICA8YnI+CiAgICA8YnI+CiAgICBnLiBBIG5ldyB0ZWFjaGVyIGluIHRoZSBzY2hvb2wgZm9yYmFkZSBBYmR1bCBLYWxhbSB0byBzaXQgdG9nZXRoZXIgd2l0aCBoaXMgQnJhbWhpbiBmcmllbmQuCiAgICA8YnI+CiAgICA8YnI+CiAgICBlLiBNYW55IHN0dWRlbnRzIGRpZCBub3QgdW5kZXJzdGFuZCB3ZWxsIG9mIFNpdmFzdWJyYW1hbmlhIEl5ZXImcnNxdW87cyBsZWN0dXJlLgogICAgPGJyPgogICAgPGJyPgogICAgZC4gSGUgdGhlbiB0b29rIHRoZSBzdHVkZW50cyB0byB0aGUgc2Vhc2hvcmUgZm9yIGEgcHJhY3RpY2FsIGNsYXNzLgogICAgPGJyPgogICAgPGJyPgogICAgYi4gQWJkdWwgS2FsYW0gd2FzIGRldGVybWluZWQgdGhhdCBoZSB3b3VsZCBtYWtlIGEgZnV0dXJlIHN0dWR5IGFib3V0IGZsaWdodCBhbmQgZmxpZ2h0IHN5c3RlbXMuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5CLiBBbnN3ZXIgdGhlIGZvbGxvd2luZyBxdWVzdGlvbnMuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+YS4gV2hhdCB3ZXJlIHRoZSBjYXVzZXMgb2YgQWJkdWwgS2FsYW0mcnNxdW87cyBoYXBwaW5lc3M/PC9zcGFuPgogICAgPGJyPgogICAgVGhlIGNhdXNlcyBvZiBBYmR1bCBLYWxhbSZyc3F1bztzIGhhcHBpbmVzcyB3ZXJlIGhpcyBzdXBwb3J0aXZlIGZhdGhlciwgbG92aW5nIG1vdGhlciwgaW5zcGlyYXRpb25hbCBhbmQKICAgIG1vdGl2YXRpb25hbCB0ZWFjaGVycyBhdCBzY2hvb2xzLCBoaXMga2VlbiBpbnRlcmVzdCBpbiBtYXRoZW1hdGljcyBhbmQgaGlzIGxhYm91ciBhbmQgZGVkaWNhdGlvbiB0byBoaXMgc3R1ZHkuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5iLiBXaGljaCB0d28gcGxhY2VzIGRpZCBBYmR1bCBLYWxhbSB2aXNpdCBiZWZvcmUgZ29pbmcgdG8gc2Nob29sPzwvc3Bhbj4KICAgIDxicj4KICAgIEFiZHVsIEthbGFtIHZpc2l0ZWQgdG8gaGlzIEFyYWJpYyB0dXRvcmluZyBjbGFzcyBhbmQgaGlzIG1hdGhlbWF0aWNzIHRlYWNoZXIncyBob21lIGJlZm9yZSBoZWFkaW5nIHRvIHNjaG9vbC4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmMuIFdoYXQgZGlkIGhlIGxpa2UgYWJvdXQgbWF0aGVtYXRpY3M/PC9zcGFuPgogICAgPGJyPgogICAgSGUgbGlrZWQgdG8gbGVhcm4gcnVsZXMgYW5kIHByaW5jaXBsZXMgb2YgbWF0aGVtYXRpY3MgYW5kIHNvbHZpbmcgY29tcGxleCBudW1iZXIgcHJvYmxlbXMgZm9yIGhvdXJzLgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+ZC4gV2h5IHdhcyB0aGUgbmV3IHRlYWNoZXIgdW5oYXBweT88L3NwYW4+CiAgICA8YnI+CiAgICBUaGUgbmV3IHRlYWNoZXIgd2FzIHVuaGFwcHkgYmVjYXVzZSBoZSBzYXcgdGhhdCBhIEJyYWhtaW4gYm95IFJhbWFuYWRoYW4gU2FzdHJ5IGFuZCBhIE11c2xpbSBib3kgQWJkdWwgS2FsYW0gc2l0dGluZwogICAgdG9nZXRoZXIgaW4gYSBzYW1lIGJlbmNoIGluIHRoZSBjbGFzc3Jvb20uCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5lLiBXaHkgZGlkIEFiZHVsIEthbGFtIGhhdmUgdG8gc3BsaXQgd2l0aCBoaXMgaW50aW1hdGUgZnJpZW5kPzwvc3Bhbj4KICAgIDxicj4KICAgIEFiZHVsIEthbGFtIGhhZCB0byBzcGxpdCB3aXRoIGhpcyBpbnRpbWF0ZSBmcmllbmQgYmVjYXVzZSBvZiB0aGUgZGlzY3JpbWluYXRpbmcgYmVoYXZpb3VyIG9mIGhpcyBuZXcgdGVhY2hlciBpbgogICAgdGVybXMgb2YgcmVsaWdpb24gaW4gUmFtZXN3YXJhbSBFbGVtZW50YXJ5IFNjaG9vbC4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmYuIFdoYXQgd2FzIHRoZSB0b3BpYyBvZiBTaXZhc3VicmFtYW5pYSBJeWVyJnJzcXVvO3MgY2xhc3M/PC9zcGFuPgogICAgPGJyPgogICAgVGhlIHRvcGljIG9mIFNpdmFzdWJyYW1hbmlhIEl5ZXImcnNxdW87cyBjbGFzcyB3YXMgaG93IHRoZSBiaXJkcyBjb3VsZCBmbHkgaW4gdGhlIHNreS4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmcuIEhvdyB3YXMgdGhlIHRlYWNoZXImcnNxdW87cyByZWFjdGlvbiB3aGVuIHRoZSBzdHVkZW50cyB0b2xkIGhpbSB0aGF0IHRoZXkgZGlkIG5vdCB1bmRlcnN0YW5kIGhpcyBsZWN0dXJlPzwvc3Bhbj4KICAgIDxicj4KICAgIFRlYWNoZXIgZGlkbiZyc3F1bzt0IGJlY29tZSB1cHNldCB3aGVuIHRoZSBzdHVkZW50cyB0b2xkIGhpbSB0aGF0IHRoZXkgZGlkbid0IHVuZGVyc3RhbmQgaGlzIGxlY3R1cmUuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5oLiBXaHkgZGlkIFNpdmFzdWJyYW1hbmlhIEl5ZXIgdGFrZSBoaXMgc3R1ZGVudHMgdG8gdGhlIHNlYXNob3JlPzwvc3Bhbj4KICAgIDxicj4KICAgIFNpdmFzdWJyYW1hbmlhIEl5ZXIgdG9vayBoaXMgc3R1ZGVudHMgdG8gdGhlIHNlYXNob3JlIGJlY2F1c2UgaGUgd2FudGVkIHRvIGRlbW9uc3RyYXRlIHRoZSBtZWNoYW5pc20gb2YgYmlyZCBmbGlnaHQKICAgIHRvIHRoZSBzdHVkZW50cy4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxoMz5Dcml0aWNhbCBUaGlua2luZzwvaDM+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5hLiBBUEogQWJkdWwgS2FsYW0gYmVjYW1lIGEgcmVub3duZWQgYWVyb3NwYWNlIHNjaWVudGlzdCBpbiBoaXMgbGF0ZXIgbGlmZS4gRG8geW91IGZpbmQgYW55IGFzc29jaWF0aW9uIG9mIGhpcyBjaGlsZGhvb2QgZGF5cyBpbiBzaGFwaW5nIGhpcyBjYXJlZXI/IEV4cGxhaW4gd2l0aCBzcGVjaWZpYyBpbnN0YW5jZXMgZnJvbSB0aGUgdGV4dC48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBBUEogKEF2dWwgUGFraXIgSmFpbnVsYWJkZWVuaSkgQWJkdWwgS2FsYW0gaXMgYSB3ZWxsLWtub3duIGFlcm9zcGFjZSBzY2llbnRpc3Qgb2YgSW5kaWEuIEhlIGJlY2FtZSBhIGZhbW91cwogICAgYWVyb3NwYWNlIHNjaWVudGlzdCBiZWNhdXNlIGhlIHdhcyBpbnNwaXJlZCBhbmQgbW90aXZhdGVkIGJ5IHRoZSBleHBsYW5hdGlvbiBvZiB0aGUgZmxpZ2h0IGR5bmFtaWNzIG9mIGJpcmRzCiAgICBwcmFjdGljYWxseSBnaXZlbiBieSBoaXMgdGVhY2hlciBTaXZhc3VicmFtYW5pYSBseWVyIGluIGhpcyBzY2hvb2wuIFRoZXJlIGlzIHRoZSBncmVhdCBhc3NvY2lhdGlvbnMgb2YgaGlzIGNoaWxkaG9vZAogICAgZGF5cyBpbiBzaGFwaW5nIGhpcyBjYXJlZXIuIEhlIHdhcyBhIGtlZW4gc3R1ZGVudCBvZiBtYXRoZW1hdGljcyBhbmQgYWx3YXlzIHNjb3JlZCBmdWxsIG1hcmtzIGluIGl0LiBIZSBhbHNvIHNjb3JlZAogICAgZnVsbCBtYXJrcyBpbiBTY2llbmNlIGluIGhpcyBzdHVkeSB0aW1lLiBCZXNpZGUgdGhpcyBoZSB3b3VsZCB0YWtlIGV4dHJhIGNsYXNzZXMgb2YgbWF0aGVtYXRpY3MgYXQgaGlzCiAgICB0ZWFjaGVyJnJzcXVvO3MgaG9tZS4gSGUga2VwdCBoaW1zZWxmIGFsd2F5cyBidXN5IGluIHNvbHZpbmcgY29tcGxleCBudW1iZXIgcHJvYmxlbXMuIFRoZSBtb3N0IGltcHJlc3NpbmcgdGhpbmcgdG8KICAgIGhpbSB3YXMgdGhlIHByYWN0aWNhbCBsZWN0dXJlIG9mIGhpcyB0ZWFjaGVyIFNpdmFzdWJyYW1hbmlhIGx5ZXIuIEhlLCBhbG9uZyB3aXRoIGhpcyBmcmllbmRzLCB3YXMgdGFrZW4gdG8gdGhlCiAgICBzZWFzaG9yZSBvZiBSYW1lc3dhcmFtIHRvIGhhdmUgYSBwcmFjdGljYWwgZGVtb25zdHJhdGlvbiBvbiBmbGlnaHQgZHluYW1pY3Mgb2YgdGhlIGJpcmRzLiBUaGUgcmVhbCB0ZWFjaGluZyBvZiBoaXMKICAgIHRlYWNoZXIgaGFkIGxlZnQgaGltIGFuIGluZmx1ZW50aWFsIHJlbWFya3MuIEhlIGxlYXJudCBob3cgYmlyZHMgY291bGQgZmx5IHVzaW5nIHRoZWlyIHdpbmdzIGFuZCB0YWlscyBpbiBhIHByb3BlcgogICAgYmFsYW5jZS4gV2hlbiBoZSBsZWFybnQgZmxpZ2h0IHN5c3RlbXMgb2YgdGhlIGJpcmRzIGhlIHdhcyBkZXRlcm1pbmVkIHRvIHN0dWR5IGZsaWdodCBkeW5hbWljcyBhbmQgZm9sbG93aW5nIGV2ZXJ5CiAgICBzdGVwcyBzdWdnZXN0ZWQgYnkgaGlzIHRlYWNoZXIsIGFuZCBoZW5jZSBoZSBiZWNhbWUgYW4gYWVyb3NwYWNlIHNjaWVudGlzdC4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmIuIEthbGFtIG1lbnRpb25zIGFuIGluc3RhbmNlIG9mIGRpc2NyaW1pbmF0aW9uIGFnYWluc3QgaGltIGluIGhpcyBzY2hvb2wgbGlmZS4gV2hhdCBwaWN0dXJlIG9mIHNvY2lldHkgZG9lcyBoZSB3YW50IHRvIGRlcGljdCBieSBtZW50aW9uaW5nIHRoZSBpbmNpZGVudD8gRGlzY3Vzcy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBJbiBoaXMgbWVtb2lyLCBoZSBtZW50aW9ucyBhIHNhZCBldmVudCBvZiByZWxpZ2lvdXMgZGlzY3JpbWluYXRpb24gaW4gaGlzIHNjaG9vbC4gSGlzIG5ldyB0ZWFjaGVyIHNob3dlZCBoaXMKICAgIGRpc2NyaW1pbmF0aW5nIGJlaGF2aW91ciB3aGVuIGhlIHNhdyBhIE11c2xpbSBib3kgKEFiZHVsKSBhbmQgYSBIaW5kdSBib3kgKFJhbWVzd2FyYW0pIHNpdHRpbmcgdG9nZXRoZXIgaW4gYSBzYW1lCiAgICBiZW5jaCBpbiB0aGUgY2xhc3Nyb29tLiBSYW1lc3dhcmFtIFNhc3RyeSB3YXMgYW4gaW50aW1hdGUgZnJpZW5kIG9mIGhpbSBiZWxvbmdpbmcgdG8gSGluZHUgY29tbXVuaXR5LiBBYmR1bCB3YXMKICAgIGlnbm9yYW50IGFib3V0IHRoZSByZWxpZ2lvdXMgZGlzY3JpbWluYXRpb24gYmV0d2VlbiBIaW5kdSBhbmQgTXVzbGltLiBEdXJpbmcgdGhlIHRpbWUsIHRoZXJlIHdhcyBleHRyZW1lIHJlbGlnaW91cwogICAgZGlzY3JpbWluYXRpb24gYmV0d2VlbiBIaW5kdSBhbmQgTXVzbGltLiBUaGUgYmVoYXZpb3VyIG9mIHRoZSBuZXcgdGVhY2hlciB3YXMgYSB0cnVlIHBpY3R1cmUgb2YgdGhlIHRoZW4gc29jaWV0eS4gSGUKICAgIGNvdWxkIG5vdCBkaWdlc3QgdGhlIGZyaWVuZHNoaXAgYmV0d2VlbiBhIEhpbmR1IGJveSBhbmQgYSBNdXNsaW0gYm95LCBzbyBoZSBmb3JiYWRlZCBBYmR1bCB0byBzaXQgY2xvc2UgdG8gaGlzCiAgICBCcmFobWluIGZyaWVuZC4gQWJkdWwgd2FzIHRvdGFsbHkgdXBzZXQgYnkgdGhpcyBiZWhhdmlvdXIuIEJ5IHRoaXMgaW5jaWRlbnQsIEFiZHVsIHdhbnRzIHRvIHNob3cgdGhlIHBpY3R1cmUgb2YgdGhlCiAgICBzb2NpZXR5IHRoYXQgd2FzIHBhcnRlZCBiZXR3ZWVuIHR3byBzZWN0cyAtIEhpbmR1IGFuZCBNdXNsaW0uIEZldyBwZW9wbGUgZGVuaWVkIHN1Y2ggZGl2aXNpb25zLCBidXQgbW9zdCBvZiB0aGUKICAgIHBlb3BsZSwgaW5jbHVkaW5nIGVkdWNhdGVkIHBlb3BsZSBiZWxpZXZlZCBpbiBwYXJ0aXRpb24uCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8aDM+V3JpdGluZzwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5Xcml0ZSBhIHNob3J0IGF1dG9iaW9ncmFwaHkgZmVhdHVyaW5nIHlvdXIgY2hpbGRob29kIGxpZmUgdXNpbmcgdGhlIGZvbGxvd2luZyBndWlkZWxpbmVzLjwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIEkgd2FzIGJvcm4gaW4gYSBzbWFsbCB2aWxsYWdlIG9mIG5vcnRoIC0gZWFzdGVybiBwYXJ0IG9mIE5lcGFsZ3VuaiBEaXN0cmljdC4gSSZyc3F1bzttIGZyb20gYSBtaWRkbGUgY2xhc3MgZmFtaWx5LgogICAgVGhlcmUgYXJlIGZpdmUgbWVtYmVycyBpbiBteSBmYW1pbHkgaW5jbHVkaW5nIG1lLiBGaXJzdCBvZiBteSByZXNwZWN0ZWQgRmF0aGVyIHdobyBpcyB0YWlsb3IsIHRoZW4gbXkgbG92ZWx5IG1vdGhlcgogICAgc2hlIGlzIEhvdXNlIHdpZmUuIE90aGVyIG15IGZhbWlseSBtZW1iZXJzIGFyZSBhIGVsZGVzdCBicm90aGVyIGFuZCBhIHlvdW5nZXIgc2lzdGVyIGFuZCBib3RoIG9mIHRoZW0gYXJlIHN0dWR5aW5nCiAgICB0b28uCiAgICA8YnI+CiAgICA8YnI+CiAgICBTaW5jZSBJJnJzcXVvO20gYSBzdHVkZW50LCBteSBkYWlseSByb3V0aW5lIGZvY3VzZXMgb24gc3R1ZHlpbmcgYW5kIGNsYXNzZXMuIEkgdXN1YWxseSB3YWtlIHVwIGF0IDY6MDAgYW0gYW5kIGRvIG15CiAgICBkYWlseSByb3V0aW5lcyBsaWtlIGJydXNoaW5nIG15IHRlZXRoLCB0YWtpbmcgYSBzaG93ZXIgYW5kIGdldHRpbmcgcmVhZHkgZm9yIGNsYXNzLiBBZnRlciB3aGljaCBJIGNoZWNrIG15IG5vdGVzIGFuZAogICAgcmV2aXNlIGZvciB0aGUgZGF5LiBNeSBjbGFzc2VzIHVzdWFsbHkgdXNlZCB0byBzdGFydCBieSA4OjAwIGFtIGFuZCBlbmRzIGJ5IDE6MDAgcG0uIEkgdXNlZCB0byBhdHRlbmQgY2xhc3NlcwogICAgcmVndWxhcmx5LiBBZnRlciBjbGFzc2VzLCBJIGhhbmcgb3V0IHdpdGggbXkgZnJpZW5kcyBmb3IgYSB3aGlsZSBhbmQgZ28gYmFjayBob21lLiBJIHJlYWNoIGhvbWUgYW5kIHRoZW4gdXN1YWxseQogICAgdGFrZSBhIG5hcCB0aWxsIDQ6MzAgcG0uIEFmdGVyIHRha2luZyBhIG5hcCwgSSBnbyBvdXQgYW5kIHBsYXkuIEkgdXN1YWxseSBjb21lIGJhY2sgYnkgNiBhbmQgaGF2ZSBhIGJhdGguIEFmdGVyCiAgICB3aGljaCBJIGdldCByZWFkeSB0byBzdHVkeSBhbmQgYnkgOTowMCwgSSBnbyB0byB0aGUgYmVkLgogICAgPGJyPgogICAgPGJyPgogICAgSSB1c2VkIHRvIHBsYXkgYSBsb3Qgd2l0aCBteSBzaWJsaW5ncy4gSSByZW1lbWJlciB2ZXJ5IGZvbmRseSB0aGUgZ2FtZXMgd2UgdXNlIHRvIHBsYXkuIEVzcGVjaWFsbHksIGluIHRoZSBldmVuaW5ncywKICAgIHdlIHVzZWQgdG8gZ28gb3V0IGluIHRoZSBwYXJrIHdpdGggb3VyIHNwb3J0cyBlcXVpcG1lbnQuIEVhY2ggZGF5IHdlIHBsYXllZCBkaWZmZXJlbnQgZ2FtZXMsIGZvciBleGFtcGxlLCBmb290YmFsbAogICAgb24gb25lIGRheSBhbmQgY3JpY2tldCBvbiB0aGUgb3RoZXIuIFRoZXNlIG1lbW9yaWVzIG9mIHBsYXlpbmcgaW4gdGhlIHBhcmsgYXJlIHZlcnkgZGVhciB0byBtZS4gTW9zdCBpbXBvcnRhbnRseSwgSQogICAgcmVtZW1iZXIgdGhpcyBpbnN0YW5jZSB2ZXJ5IGNsZWFybHkgd2hlbiB3ZSB3ZW50IG91dCBmb3IgYSBwaWNuaWMgd2l0aCBteSBmYW1pbHkuIFdlIHBhaWQgYSB2aXNpdCB0byB0aGUgem9vIGFuZCBoYWQKICAgIGFuIGluY3JlZGlibGUgZGF5LiBNeSBtb3RoZXIgcGFja2VkIGRlbGVjdGFibGUgZGlzaGVzIHdoaWNoIHdlIGF0ZSBpbiB0aGUgem9vLiBNeSBmYXRoZXIgY2xpY2tlZCBzbyBtYW55IHBpY3R1cmVzCiAgICB0aGF0IGRheS4gV2hlbiBJIGxvb2sgYXQgdGhlc2UgcGljdHVyZXMsIHRoZSBtZW1vcnkgaXMgc28gY2xlYXIsIGl0IHNlZW1zIGxpa2UgaXQgaGFwcGVuZWQganVzdCB5ZXN0ZXJkYXkuIFRodXMsIG15CiAgICBjaGlsZGhvb2QgbWVtb3JpZXMgYXJlIHZlcnkgZGVhciB0byBtZSBhbmQgbWFrZSBtZSBzbWlsZSB3aGVuIEkgZmVlbCBsb3cuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8aDM+R3JhbW1hcjwvaDM+CiAgICA8YnI+CiAgICA8c3Bhbj5BLiBTdHVkeSB0aGUgZm9sbG93aW5nIHNlbnRlbmNlcyBhbmQgdW5kZXJsaW5lIHRoZSBjb25uZWN0aXZlcy48L3NwYW4+CiAgICA8YnI+CiAgICA8YnI+CiAgICBhLiA8Yj5BbHRob3VnaDwvYj4gc2hlIHNwb2tlIHZlcnkgZmFzdCwgSSB1bmRlcnN0b29kIHdoYXQgc2hlIG1lYW50IHRvIHNheS4KICAgIDxicj4KICAgIDxicj4KICAgIGIuIDxiPkluIHNwaXRlIG9mPC9iPiBoZXIgaGFyZCBsYWJvdXIsIHNoZSBmYWlsZWQgaGVyIGV4YW0uCiAgICA8YnI+CiAgICA8YnI+CiAgICBjLiA8Yj5UaG91Z2g8L2I+IGhlIGhhZCBhbGwgdGhlIHJlcXVpcmVkIHF1YWxpZmljYXRpb25zLCBoZSBkaWQgbm90IGdldCB0aGUgam9iLgogICAgPGJyPgogICAgPGJyPgogICAgZC4gPGI+RGVzcGl0ZTwvYj4gaGF2aW5nIGFsbCB0aGUgcXVhbGlmaWNhdGlvbnMsIGhlIGRpZCBub3QgZ2V0IHRoZSBqb2IuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5CLiBKb2luIHRoZSBmb2xsb3dpbmcgcGFpcnMgb2Ygc2VudGVuY2VzIHR3aWNlLCB1c2luZyBhbHRob3VnaC90aG91Z2gvZXZlbiB0aG91Z2ggYW5kIGRlc3BpdGUvaW4gc3BpdGUgb2YgYXMgaW4gdGhlIGV4YW1wbGUuPC9zcGFuPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+YS4gSGUgaXMgYSBtaWxsaW9uYWlyZS4gSGUgbGl2ZXMgaW4gYSBzaW1wbGUgaG91c2UuPC9zcGFuPgogICAgPGJyPgogICAgJm5kYXNoOyBBbHRob3VnaCBoZSBpcyBhIG1pbGxpb25haXJlLCBoZSBsaXZlcyBpbiBhIHNpbXBsZSBob3VzZS4KICAgIDxicj4KICAgICZuZGFzaDsgRGVzcGl0ZSBvZiBiZWluZyBhIG1pbGxpb25haXJlLCBoZSBsaXZlcyBpbiBhIHNpbXBsZSBob3VzZS4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmIuIFRoZSB3ZWF0aGVyIHdhcyBleHRyZW1lbHkgYmFkLiBUaGUgcGlsb3QgbGFuZGVkIHRoZSBwbGFuZSBzYWZlbHkuPC9zcGFuPgogICAgPGJyPgogICAgJm5kYXNoOyBJbiBzcGl0ZSBvZiBleHRyZW1lbHkgYmFkIHdlYXRoZXIsIHRoZSBwaWxvdCBsYW5kZWQgdGhlIHBsYW5lIHNhZmVseS4KICAgIDxicj4KICAgICZuZGFzaDsgQWx0aG91Z2ggdGhlIHdlYXRoZXIgd2FzIGV4dHJlbWVseSBiYWQsIHRoZSBwaWxvdCBsYW5kZWQgdGhlIHBsYW5lIHNhZmVseS4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmMuIFdlIHN0dWR5IGluIHRoZSBzYW1lIGNvbGxlZ2UuIFdlIGhhcmRseSBzZWUgZWFjaCBvdGhlci48L3NwYW4+CiAgICA8YnI+CiAgICAmbmRhc2g7IERlc3BpdGUgc3R1ZHlpbmcgaW4gdGhlIHNhbWUgY29sbGVnZSwgd2UgaGFyZGx5IHNlZSBlYWNoIG90aGVyLgogICAgPGJyPgogICAgJm5kYXNoOyBBbHRob3VnaCB3ZSBzdHVkeSBpbiB0aGUgc2FtZSBjb2xsZWdlLCB3ZSBoYXJkbHkgc2VlIGVhY2ggb3RoZXIuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5kLiBJdCByYWluZWQgaGVhdmlseS4gV2UgZW5qb3llZCBvdXIgaG9saWRheS48L3NwYW4+CiAgICA8YnI+CiAgICAmbmRhc2g7IEFsdGhvdWdoIGl0IHJhaW5lZCBoZWF2aWx5LCB3ZSBlbmpveWVkIG91ciBob2xpZGF5LgogICAgPGJyPgogICAgJm5kYXNoOyBJbiBzcGl0ZSBvZiB0aGUgaGVhdnkgcmFpbiwgd2UgZW5qb3llZCBvdXIgaG9saWRheS4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPmUuIEkgaGFkIGFuIHVtYnJlbGxhLiBJIGdvdCB3ZXQgaW4gdGhlIHJhaW4uPC9zcGFuPgogICAgPGJyPgogICAgJm5kYXNoOyBEZXNwaXRlIGhhdmluZyBhbiB1bWJyZWxsYSwgSSBnb3Qgd2V0IGluIHRoZSByYWluLgogICAgPGJyPgogICAgJm5kYXNoOyBBbHRob3VnaCBJIGhhZCBhbiB1bWJyZWxsYSwgSSBnb3Qgd2V0IGluIHRoZSByYWluLgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+Zi4gSSB3YXMgcmVhbGx5IHRpcmVkLiBJIGNvdWxkIG5vdCBzbGVlcCBmb3IgYSBtb21lbnQuPC9zcGFuPgogICAgPGJyPgogICAgJm5kYXNoOyBBbHRob3VnaCBJIHdhcyByZWFsbHkgdGlyZWQsIEkgY291bGQgbm90IHNsZWVwIGZvciBhIG1vbWVudC4KICAgIDxicj4KICAgICZuZGFzaDsgSSBjb3VsZG4mcnNxdW87dCBzbGVlcCBkZXNwaXRlIGJlaW5nIHZlcnkgdGlyZWQuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5nLiBTaGUgaGFzIGEgdmVyeSBnb29kIGFjY2VudCBpbiBFbmdsaXNoLiBTaGUgZmFpbGVkIHRoZSBpbnRlcnZpZXcgb2YgYSBuZXdzcmVhZGVyLjwvc3Bhbj4KICAgIDxicj4KICAgICZuZGFzaDsgRGVzcGl0ZSBoYXZpbmcgYSB2ZXJ5IGdvb2QgYWNjZW50IGluIEVuZ2xpc2gsIHNoZSBmYWlsZWQgdGhlIGludGVydmlldyBvZiBhIG5ld3NyZWFkZXIuCiAgICA8YnI+CiAgICAmbmRhc2g7IEFsdGhvdWdoIHNoZSBoYXMgYSB2ZXJ5IGdvb2QgYWNjZW50IGluIEVuZ2xpc2gsIHNoZSBmYWlsZWQgdGhlIGludGVydmlldyBvZiBhIG5ld3NyZWFkZXIuCiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj5oLiBMaGFzYSBoYXMgZXh0cmVtZWx5IGNvbGQgd2VhdGhlciBpbiB3aW50ZXIuIE1pbGxpb25zIG9mIHRvdXJpc3RzIGdvIHRoZXJlIGluIEphbnVhcnkuPC9zcGFuPgogICAgPGJyPgogICAgJm5kYXNoOyBNaWxsaW9ucyBvZiB0b3VyaXN0cyBnbyB0byBMaGFzYSBpbiBKYW51YXJ5LCBldmVuIHRob3VnaCBpdCBoYXMgZXh0cmVtZWx5IGNvbGQgd2VhdGhlciBpbiB3aW50ZXIuCiAgICA8YnI+CiAgICAmbmRhc2g7IERlc3BpdGUgaGF2aW5nIGV4dHJlbWVseSBjb2xkIHdlYXRoZXIgaW4gd2ludGVyLCBtaWxsaW9ucyBvZiB0b3VyaXN0cyBnbyB0byBMaGFzYSBpbiBKYW51YXJ5LgogICAgPGJyPgogICAgPGJyPgogICAgPGJyPgogICAgPHNwYW4+aS4gSGUgd2FzIGJhZGx5IGluanVyZWQgaW4gdGhlIGZpcnN0IHJvdW5kIG9mIHRoZSBib3hpbmcgbWF0Y2guIEhlIHdhcyB2aWN0b3Jpb3VzIGluIHRoZSB0aGlyZCByb3VuZC48L3NwYW4+CiAgICA8YnI+CiAgICAmbmRhc2g7IEluIHNwaXRlIG9mIGJlaW5nIGJhZGx5IGluanVyZWQgaW4gdGhlIGZpcnN0IHJvdW5kIG9mIHRoZSBib3hpbmcgbWF0Y2gsIGhlIHdhcyB2aWN0b3Jpb3VzIGluIHRoZSB0aGlyZCByb3VuZC4KICAgIDxicj4KICAgICZuZGFzaDsgQWx0aG91Z2ggaGUgd2FzIGJhZGx5IGluanVyZWQgaW4gdGhlIGZpcnN0IHJvdW5kIG9mIHRoZSBib3hpbmcgbWF0Y2gsIGhlIHdhcyB2aWN0b3Jpb3VzIGluIHRoZSB0aGlyZCByb3VuZC4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPkMuIENvbXBsZXRlIGVhY2ggc2VudGVuY2UgaW4gYW4gYXBwcm9wcmlhdGUgd2F5Ljwvc3Bhbj4KICAgIDxicj4KICAgIDxicj4KICAgIGEuIEhlIHBhc3NlZCB0aGUgZXhhbSA8Yj48dT5hbHRob3VnaCBoZSBoYWRuJ3QgcHJlcGFyZWQgd2VsbC48L3U+PC9iPgogICAgPGJyPgogICAgPGJyPgogICAgYi4gU2hlIGNsaW1iZWQgdGhlIG1vdW50YWluIGluIHNwaXRlIG9mIGhlciA8Yj48dT5sZWcgaW5qdXJ5LjwvdT48L2I+CiAgICA8YnI+CiAgICA8YnI+CiAgICBjLiBIZSBkaWQgbm90IGdpdmUgYW55IGFsbXMgdG8gdGhlIGJlZ2dhcnMgZXZlbiB0aG91Z2ggPGI+PHU+aGUgZWFybmVkIGEgbG90LjwvdT48L2I+CiAgICA8YnI+CiAgICA8YnI+CiAgICBkLiBJbiBzcGl0ZSBvZiBoaXMgcG9vciBleWVzaWdodCwgPGI+PHU+aGUgaXMgY29uZHVjdGluZyBvbmxpbmUgY291cnNlcy48L3U+PC9iPgogICAgPGJyPgogICAgPGJyPgogICAgZSA8Yj48dT5TaGUgZG9lcyBub3QgZ28gdG8gcGFydGllczwvdT48L2I+LCB0aG91Z2ggc2hlIGlzIHZlcnkgc29jaWFibGUuCiAgICA8YnI+CiAgICA8YnI+CiAgICBmLiA8Yj48dT5IZSBjb3VsZCBub3QgcGFzcyB0aGUgdGVzdDwvdT48L2I+LCBpbiBzcGl0ZSBvZiBoaXMgdGVuIGF0dGVtcHRzLgogICAgPGJyPgogICAgPGJyPgogICAgZy4gSGUgcmVmdXNlZCB0byBlYXQgYW55dGhpbmcgZGVzcGl0ZSA8Yj48dT5oYXZpbmcgYW4gYXBwZXRpdGUuPC91PjwvYj4KICAgIDxicj4KICAgIDxicj4KICAgIGguIEhlIGNvdWxkIG5vdCBzY29yZSBnb29kcyBncmFkZXMgaW4gdGhlIFNFRSBleGFtcyBpbiBzcGl0ZSBvZiA8Yj48dT5oaXMgaGFyZCB3aXRoIHByaXZhdGUgY29hY2hpbmcuPC91PjwvYj4KICAgIDxicj4KICAgIDxicj4KICAgIGkuIFNoZSBhY2NlcHRlZCB0aGUgam9iIGFsdGhvdWdoIDxiPjx1PnNoZSBjb3VsZG4ndCBtZWV0IGhlciBzYWxhcnkgZXhwZWN0YXRpb24uPC91PjwvYj4KICAgIDxicj4KICAgIDxicj4KICAgIGouIEV2ZW4gdGhvdWdoIHdlIGhhZCBwbGFubmVkIGV2ZXJ5dGhpbmcgY2FyZWZ1bGx5LCA8Yj48dT53ZSBjb3VsZCBub3QgY29tcGxldGUgb3VyIG1pc3Npb24uPC91PjwvYj4KICAgIDxicj4KCiAgICA8YnI+CiAgICA8YnI+CgogICAgPGJyPgoKICAgIDxicj4KCiAgICA8YnI+CiAgICA8c3Bhbj5JZiB5b3UgaGF2ZSBhbnkgc3VnZ2VzdGlvbnMgb3IgZmVlZGJhY2tzLCBwbGVhc2Ugd3JpdGUgdG8gdXMgYXQgcGx1czJoZWxwQGdtYWlsLmNvbTwvc3Bhbj4KICAgIDxicj4KCiAgICA8YnI+CjwvYm9keT4KCjwvaHRtbD4=",
        "6": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "7": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "8": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "9": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "10": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "11": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "12": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "13": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "14": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "15": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "16": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "17": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "18": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "19": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "20": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="
    },
    "ss": {
        "1": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KICAgIDx0aXRsZT5Eb2M8L3RpdGxlPgogICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChldnQpIHsKICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgfSwgZmFsc2UpOwogICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNvcHkiLCBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICAgIC8vIENoYW5nZSB0aGUgY29waWVkIHRleHQgaWYgeW91IHdhbnQKICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuc2V0RGF0YSgidGV4dC9wbGFpbiIsICJDb3B5aW5nIGlzIG5vdCBhbGxvd2VkIG9uIHRoaXMgd2VicGFnZSIpOwogICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSBkZWZhdWx0IGNvcHkgYWN0aW9uCiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgIH0sIGZhbHNlKTsKICAgIDwvc2NyaXB0PgogICAgPHN0eWxlPgogICAgICAgIEBpbXBvcnQgdXJsKCdodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PU9wZW4rU2Fuczp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAnKTsKCiAgICAgICAgLyogTk8gU0VMRUNUICsgSElHSExJR0hUIENPTE9SICovCiAgICAgICAgKiB7CiAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgfQoKICAgICAgICAqOjpzZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgKjo6LW1vei1zZWxlY3Rpb24gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLyogc3R5bGluZyB0ZXh0IGNvbnRlbnQgKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDRweDsKICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxNXB4OwogICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjNweDsKICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDsKICAgICAgICAgICAgd29yZC1zcGFjaW5nOiAycHg7CiAgICAgICAgfQoKICAgICAgICBjZW50ZXIgewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMjhweDsKICAgICAgICB9CgogICAgICAgIGgzIHsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KCjxib2R5PgoKICAgIDxicj4KICAgIDxjZW50ZXI+TmVpZ2hib3VyczwvY2VudGVyPgogICAgPGJyPgogICAgPGJyPgogICAgPGgzPlVuZGVyc3RhbmRpbmcgdGhlIHRleHQ8YnI+PC9oMz4KICAgIDxicj4KICAgIDxzcGFuPkFuc3dlciB0aGUgZm9sbG93aW5nIHF1ZXN0aW9ucy48YnI+PC9zcGFuPgogICAgPHNwYW4+YS4gRGVzY3JpYmUgaG93IHRoZSB5b3VuZyBjb3VwbGUmcnNxdW87cyBob3VzZSBsb29rZWQgbGlrZS48L3NwYW4+Cjxicj48YnI+CiAgICBBbnMuIFRoZSB5b3VuZyBjb3VwbGUncyBob3VzZSB3YXMgc21hbGwsIGJ1dCBpdCBoYWQgdGhlIGZlZWwgb2YgYW4gZWxlZ2FudCBjb3R0YWdlIHRoYW5rcyB0byBpdHMgaGlnaAogICAgY2VpbGluZ3MgYW5kIHBhbmVkIHdpbmRvd3MuIFRoZSB5b3VuZyBtYW4gY291bGQgc2VlIG91dCBvdmVyIHRoZSByb29mdG9wcyBmcm9tIGhpcyBzdHVkeSB3aW5kb3cgYW5kIHVzZWQKICAgIGNhciB5YXJkcyB0aGUgTW9yZXRvbiBCYXkgZmlncyBpbiB0aGUgcGFyayB3aGVyZSB0aGV5IHdhbGtlZCB0aGVpciBkb2cuPGJyPgogICAgCjxicj48YnI+CiAgICA8c3Bhbj5iLiBIb3cgZGlkIHRoZSB5b3VuZyBjb3VwbGUgaWRlbnRpZnkgdGhlaXIgbmVpZ2hib3VycyBpbiB0aGUgYmVnaW5uaW5nIG9mIHRoZWlyIGFycml2YWw/PC9zcGFuPgo8YnI+PGJyPgogICAgQW5zLiBXaGVuIHRoZSB5b3VuZyBjb3VwbGUgYXJyaXZlZCBmb3IgdGhlIGZpcnN0IHRpbWUsIHRoZXkgaGFkIGEgbmVnYXRpdmUgaW1wcmVzc2lvbiBvZiB0aGVpcgogICAgbmVpZ2hib3Vycy4gTWFueSB0aGluZ3MgaXJyaXRhdGVkIHRoZW0uIFRoZSBjcmllcyBhbmQgc2hvdXRzIG9mIHRoZWlyIG5laWdoYm91cnMgY2FtZSBmaXJzdCwgZm9sbG93ZWQgYnkKICAgIHRoZSB0b2RkbGVyIHVyaW5hdGluZyBpbiB0aGUgc3RyZWV0IGFuZCBwZWVyaW5nIGF0IHRoZSBmZW5jZS4gSW4gYWRkaXRpb24sIHRoZSB5b3VuZyBtYW4gZGVzcGlzZWQgdGhlCiAgICBuZWlnaGJvdXJzJyBpbnZvbHZlbWVudCB3aXRoIHRoZWlyIGdhcmRlbmluZyBlZmZvcnRzLiBUaGVpciBuZWlnaGJvdXJzIHdlcmUgYWxzbyBjb25jZXJuZWQgYWJvdXQgdGhlaXIKICAgIGRvZywgcmFpc2VkIGV5ZWJyb3dzIHdoZW4gdGhleSBhd29rZSBsYXRlLCBhbmQgZGlzYXBwcm92ZWQgb2YgdGhlIHlvdW5nIG1hbiBiZWluZyBhdCBob21lIHdoaWxlIGhpcyB3aWZlCiAgICB3b3JrZWQgb3V0c2lkZS4KPGJyPjxicj4KICAgIDxicj4KICAgIDxzcGFuPmMuIEhvdyBkaWQgdGhlIG5laWdoYm91cnMgaGVscCB0aGUgeW91bmcgY291cGxlIGluIHRoZSBraXRjaGVuIGdhcmRlbj88L3NwYW4+Cjxicj48YnI+CiAgICBBbnMuIFRoZSBuZWlnaGJvdXJzIGhlbHBlZCB0aGUgeW91bmcgY291cGxlIHRvIHJlbW92ZSB0aGUgdHJhc2ggZnJvbSB0aGVpciBiYWNreWFyZCBhbmQgcGxvdWdoZWQgYW5kCiAgICBtYW51cmVkIHRoZSBzb2lsIGluIHRoZSBhdXR1bW4uIFRoZXkgcGxhbnRlZCBsZWVrcywgb25pb25zLCBjYWJiYWdlLCBicnVzc2VscyBzcHJvdXRzLCBhbmQgYnJvYWQgYmVhbnMsCiAgICBwcm9tcHRpbmcgbmVpZ2hib3VycyB0byBhcHByb2FjaCB0aGUgZmVuY2UgYW5kIHByb3ZpZGUgc3VnZ2VzdGlvbnMgZm9yIHNwYWNpbmcsIGhpbGxpbmcsIGFuZCBtdWxjaGluZy4KICAgIFRoZSB5b3VuZyBtYW4gd2FzIGFubm95ZWQgYnkgdGhlIGludGVycnVwdGlvbiwgYnV0IGhlIGxpc3RlbmVkIGNhcmVmdWxseSB0byB3aGF0IHdhcyBzYWlkLiBBbHNvLCB0aGUgYmlnCiAgICB3b21hbiB3aXRoIHRoZSBidXRjaGVyJ3MgYXJtcyBoYW5kZWQgaGVyIGEgYmFnIG9mIGdhcmxpYyBjbG92ZXMgdG8gcGxhbnQuIEluIHRoaXMgd2F5LCB0aGUgbmVpZ2hib3VycwogICAgaGVscGVkIHRoZSB5b3VuZyBjb3VwbGUgaW4gdGhlIGtpdGNoZW4gZ2FyZGVuLjxicj4KICAgIAo8YnI+PGJyPgogICAgPHNwYW4+ZC4gV2h5IHdlcmUgdGhlIHBlb3BsZSBpbiB0aGUgbmVpZ2hib3Job29kIHN1cnByaXNlZCBhdCB0aGUgcm9sZSBvZiB0aGUgeW91bmcgbWFuIGFuZCBoaXMgd2lmZSBpbiB0aGVpciBmYW1pbHk/PC9zcGFuPgo8YnI+PGJyPgogICAgQW5zLiBUaGUgcGVvcGxlIGluIHRoZSBuZWlnaGJvcmhvb2Qgd2VyZSBzdXJwcmlzZWQgYXQgdGhlIHJvbGUgb2YgdGhlIHlvdW5nIG1hbiBhbmQgaGlzIHdpZmUgaW4gdGhlaXIKICAgIGZhbWlseSBiZWNhdXNlIHRoZSB5b3VuZyBtYW4gc3RheWVkIGF0IGhvbWUgdG8gd3JpdGUgaGlzIHRoZXNpcyBhbmQgaGlzIHdpZmUgd29ya2VkIG91dCB3aGljaCB3YXMgbmV3CiAgICBmb3IgdGhlIG5laWdoYm91cnMuPGJyPgogICAgCjxicj48YnI+CiAgICA8c3Bhbj5lLiBIb3cgZGlkIHRoZSBuZWlnaGJvdXJzIHJlc3BvbmQgdG8gdGhlIHdvbWFuJnJzcXVvO3MgcHJlZ25hbmN5PyA8L3NwYW4+Cjxicj48YnI+CiAgICBBbnMuIFRoZSBuZWlnaGJvdXJzIHJlc3BvbmRlZCB0byB0aGUgd29tYW4mcnNxdW87cyBwcmVnbmFuY3kgYnkgc21pbGluZyB0aXJlbGVzc2x5LiBUaGUgbWFuIGluIHRoZSBkZWxpCiAgICBnYXZlIGhlciBzbWFsbCBwcmVzZW50cyBvZiBjaG9jb2xhdGVzIGFuZCBoaW0gcGFja2V0cyBvZiBjaWdhcmV0dGVzLiBJbiB0aGUgc3VtbWVyLCBJdGFsaWFuIHdvbWVuIGJlZ2FuCiAgICB0byBvZmZlciBuYW1lcy4gR3JlZWsgd29tZW4gc3RvcHBlZCB0aGUgeW91bmcgd29tYW4gaW4gdGhlIHN0cmVldCwgcHVsbGVkIGhlciBza2lydCB1cCBhbmQgZmVsdCBoZXIKICAgIGJlbGx5LCB0ZWxsaW5nIGhlciBpdCB3YXMgYm91bmQgdG8gYmUgYSBib3kuIEJ5IGxhdGUgc3VtbWVyIHRoZSB3b21hbiBuZXh0IGRvb3IgaGFkIGtuaXR0ZWQgdGhlIGJhYnkgYQogICAgc3VpdCwgY29tcGxldGUgd2l0aCBib290aWVzIGFuZCBiZWFuaWUgYW5kIHRoZSBQb2xpc2ggd2lkb3dlciBuZXh0IGRvb3IgaGFkIGFsbW9zdCBmaW5pc2hlZCBoaXMgdHdvLWNhcgogICAgZ2FyYWdlLgo8YnI+PGJyPgogICAgPGJyPgogICAgPHNwYW4+Zi4gV2h5IGRpZCB0aGUgeW91bmcgbWFuIGJlZ2luIHRvIHdlZXAgYXQgdGhlIGVuZCBvZiB0aGUgc3Rvcnk/PC9zcGFuPgo8YnI+PGJyPgogICAgQW5zLiBUaGUgeW91bmcgbWFuIGJlZ2FuIHRvIHdlZXAgYXQgdGhlIGVuZCBvZiB0aGUgc3RvcnkgYmVjYXVzZSBoaXMgbmVpZ2hib3VycyB3ZXJlIGxvb2tpbmcgdGhlbSB3aXRoCiAgICBibGVhcnkgZmFjZXMgYW5kIGNoZWVyaW5nIHRoZSBjb3VwbGVzIHdoaWxlIGhpcyB3aWZlIHdhcyBnaXZpbmcgYmlydGguIFRodXMsIHRoZWlyIGxvdmUgYW5kIGNhcmUgZm9yIGhpcwogICAgZmFtaWx5IG1hZGUgaGltIHdlZXAuPGJyPgogICAgCjxicj48YnI+CiAgICA8c3Bhbj5nLiBXaHkgZG8geW91IHRoaW5rIHRoZSBhdXRob3IgZGlkIG5vdCBjaGFyYWN0ZXJpemUgdGhlIHBlcnNvbnMgaW4gdGhlIHN0b3J5IHdpdGggcHJvcGVyIG5hbWVzPzwvc3Bhbj4KPGJyPjxicj4KICAgIEFucy4gSW4gdmlsbGFnZSBhcmVhcywgdGhlIHBlb3BsZSBhcmUga25vd24gYnkgdGhlaXIgYXBwZWFyYW5jZSwgd29yayBldGMuIHJhdGhlciB0aGFuIG5hbWUuIFNvLCBJIHRoaW5rCiAgICB0aGUgYXV0aG9yIGRpZCBub3QgY2hhcmFjdGVyaXplIHRoZSBwZXJzb25zIGJ5IHByb3BlciBuYW1lcyB0byBtYWtlIHRoZSBzdG9yeSBtb3JlIHJlYWxpc3RpYy4KPGJyPjxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxoMz5SZWZlcmVuY2UgdG8gdGhlIGNvbnRleHQ8L2gzPgo8YnI+PGJyPgogICAgPHNwYW4+CiAgICAgICAgYS4gVGhlIHN0b3J5IHNob3dzIHRoYXQgbGluZ3Vpc3RpYyBhbmQgY3VsdHVyYWwgYmFycmllcnMgZG8gbm90IGNyZWF0ZSBhbnkgb2JzdGFjbGUgaW4gaHVtYW4KICAgICAgICByZWxhdGlvbnNoaXAuIENpdGUgc29tZSBleGFtcGxlcyBmcm9tIHRoZSBzdG9yeSB3aGVyZSB0aGUgbmVpZ2hib3VycyBoYXZlIHRyYW5zY2VuZGVkIHN1Y2gKICAgICAgICBiYXJyaWVycy4KICAgIDwvc3Bhbj4KPGJyPjxicj4KICAgIEFucy4gVGhlIHN0b3J5IHNob3dzIHRoYXQgbGluZ3Vpc3RpYyBhbmQgY3VsdHVyYWwgYmFycmllcnMgZG8gbm90IGNyZWF0ZSBhbnkgb2JzdGFjbGUgaW4gaHVtYW4KICAgIHJlbGF0aW9uc2hpcC4gU29tZSBleGFtcGxlcyB3aGVyZSB0aGUgbmVpZ2hib3VycyBoYXZlIHRyYW5zY2VuZGVkIHN1Y2ggYmFycmllcnMgYXJlIGFzIGZvbGxvd3M6Cjxicj48YnI+CiAgICAxLiBJbiBzcGl0ZSBvZiB0aGUgZGlmZmVyZW50IGxhbmd1YWdlcyBhbmQgY3VsdHVyZXMsIHRoZSBuZWlnaGJvdXJzIGdhdmUgYWR2aWNlIHRvIHRoZSB5b3VuZyBjb3VwbGUKICAgIGFib3V0IHNwYWNpbmcsIGhpbGxpbmcgYW5kIG11bGNoaW5nIHRoZSB2ZWdldGFibGVzIGluIHRoZSBraXRjaGVuIGdhcmRlbi4KPGJyPjxicj4KICAgIDIuIFRoZSBwb2xpc2ggd2lkb3dlciByZWJ1aWx0IHRoZSBmYWxsaW5nIGhlbmhvdXNlIG9mIHRoZSB5b3VuZyBjb3VwbGUgYWx0aG91Z2ggdGhleSBkaWRuJnJzcXVvO3QKICAgIHVuZGVyc3RhbmQgaGlzIHdvcmRzLgo8YnI+PGJyPgogICAgMy4gVGhlIHlvdW5nIGNvdXBsZSBvZmZlcmVkIGhlYWRzIG9mIGNhYmJhZ2UgYW5kIHRvb2sgZ2lmdHMgb2YgZ3JhcGVzIGFuZCBmaXJld29vZCBmcm9tCiAgICBuZWlnaGJvdXJzLgo8YnI+PGJyPgogICAgNC4gVGhlIG5laWdoYm91cnMgZ2lmdGVkIGNob2NvbGF0ZXMsIGtuaXR0ZWQgdGhlIGJhYnkgYSBzdWl0IHdoZW4gdGhlIGNvdXBsZXMgd2VyZSBnb2luZyB0byBiZQogICAgcGFyZW43cy48YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj4KICAgICAgICBiLiBUaGUgbGFzdCBzZW50ZW5jZSBvZiB0aGUgc3RvcnkgcmVhZHMgJmxkcXVvO1RoZSB0d2VudGlldGgtY2VudHVyeSBub3ZlbCBoYWQgbm90IHByZXBhcmVkIGhpbSBmb3IKICAgICAgICB0aGlzLiZyZHF1bzsgSW4geW91ciB2aWV3LCB3aGF0IGRpZmZlcmVuY2VzIGRpZCB0aGUgeW91bmcgbWFuIGZpbmQgYmV0d2VlbiB0d2VudGlldGgtY2VudHVyeSBub3ZlbHMgYW5kIGh1bWFuIHJlbGF0aW9ucz8KICAgIDwvc3Bhbj4KPGJyPjxicj4KICAgIEFucy4gSW4gbXkgdmlldywgdGhlIG1ham9yIGRpZmZlcmVuY2VzIHRoZSB5b3VuZyBtYW4gZm91bmQgYmV0d2VlbiB0aGUgdHdlbnRpZXRoLWNlbnR1cnkgbm92ZWxzIGFuZAogICAgaHVtYW4gcmVsYXRpb25zIGFyZSB0aGF0LCB1bmxpa2UgY2hhcmFjdGVycyBpbiBub3ZlbHMsIGh1bWFucyBoYXZlIHRvIGRlYWwgd2l0aCBhbmQgb3ZlcmNvbWUgYSB2YXJpZXR5CiAgICBvZiB1bnByZWRpY3RhYmxlIGFuZCBzdGFydGxpbmcgc2l0dWF0aW9ucyB0aHJvdWdob3V0IHRoZWlyIGxpdmVzLiBFdmVyeXRoaW5nIGRvZXMgbm90IGdvIGFzIHdlbGwgaW4gcmVhbAogICAgbGlmZSBhcyBpdCBkb2VzIGluIHRoZSBub3ZlbC4gVG8gb3ZlcmNvbWUgdGhlc2Ugc2l0dWF0aW9ucywgb25lIG11c3QgcHJlcGFyZSBoaW1zZWxmIGluIHdheXMgdGhhdCBub3ZlbHMKICAgIGNhbm5vdCB0ZWFjaC48YnI+CiAgICA8YnI+CiAgICA8YnI+CiAgICA8c3Bhbj4KICAgICAgICBjLiBBIE5lcGFsaSBwcm92ZXJiIHNheXMgJmxkcXVvO05laWdoYm9ycyBhcmUgY29tcGFuaW9ucyBmb3Igd2VkZGluZyBwcm9jZXNzaW9uIGFzIHdlbGwgYXMgZm9yIGZ1bmVyYWwKICAgICAgICBwcm9jZXNzaW9uLiZyZHF1bzsgRG9lcyB0aGlzIHByb3ZlcmIgYXBwbHkgaW4gdGhlIHN0b3J5PyBKdXN0aWZ5LgogICAgPC9zcGFuPgo8YnI+PGJyPgogICAgQW5zLiBZZXMsIHRoZSBwcm92ZXJiICZsZHF1bztOZWlnaGJvcnMgYXJlIGNvbXBhbmlvbnMgZm9yIHdlZGRpbmcgcHJvY2Vzc2lvbiBhcyB3ZWxsIGFzIGZvciBmdW5lcmFsCiAgICBwcm9jZXNzaW9uJnJkcXVvOyBhcHBsaWVzIGluIHRoZSBzdG9yeS4gSW4gdGhlIHN0b3J5IHRoZSBuZWlnaGJvdXJzIGhlbHBlZCB0aGUgeW91bmcgY291cGxlIGEgbG90CiAgICBhbHRob3VnaCB0aGVpciBsYW5ndWFnZSwgY3VsdHVyZSB3YXMgdG90YWxseSBkaWZmZXJlbnQuIEluaXRpYWxseSB0aGVpciByZWxhdGlvbnNoaXAgd2FzIG5vdCBnb29kIGJ1dAogICAgc2xvd2x5IHRoZXkgc3RhcnRlZCBzaGFyaW5nIGxvdmUsIGNvbXBhc3Npb24gYW5kIGhlbHBpbmcgb25lIGFub3RoZXIgaW4gbmVlZHMuIFRoZSBleGNpdGVtZW50IG9mIHRoZQogICAgeW91bmcgd29tYW4ncyBwcmVnbmFuY3kgd2FzIHNoYXJlZCBieSBldmVyeW9uZSBpbiB0aGUgbmVpZ2hib3VyaG9vZC4gVGh1cywgdGhpcyBzdG9yeSBzaG93cyB0aGF0CiAgICBuZWlnaGJvdXJzIGFyZSBjb21wYW5pb25zIGZvciB3ZWRkaW5nIHByb2Nlc3Npb24gYXMgd2VsbCBhcyBmb3IgZnVuZXJhbCBwcm9jZXNzaW9uLgo8YnI+PGJyPgogICAgPGJyPgogICAgPHNwYW4+CiAgICAgICAgZC4gVGhlIGF1dGhvciBoYXMgZGVhbHQgd2l0aCBhbiBpc3N1ZSBvZiBtdWx0aWN1bHR1cmFsaXNtIGluIHRoZSBzdG9yeS4gV2h5IGRvIHlvdSB0aGluawogICAgICAgIG11bHRpY3VsdHVyYWxpc20gaGFzIGJlY29tZSBhIG1ham9yIGlzc3VlIGluIHRoZSBwcmVzZW50IHdvcmxkPwogICAgPC9zcGFuPgo8YnI+PGJyPgogICAgQW5zLiBNdWx0aWN1bHR1cmFsaXNtIHJlZmVycyB0byB0aGUgcHJlc2VuY2Ugb2YgZGl2ZXJzZSBjdWx0dXJlcyBpbiBhIGNvbW11bml0eS4gSXQgaXMgbWFpbmx5IGFwcGxpZWQgdG8KICAgIHRoZSBkZW1vZ3JhcGhpYyBtYWtlLXVwIG9mIGEgY2VydGFpbiBwbGFjZSwgc29tZXRpbWVzIGF0IHRoZSBvcmdhbml6YXRpb25hbCBsZXZlbCwgc3VjaCBhcyBzY2hvb2xzLAogICAgYnVzaW5lc3NlcywgbmVpZ2hib3VyaG9vZHMsIGNpdGllcywgb3IgbmF0aW9ucywgYXMgYSBkZXNjcmlwdGl2ZSBwaHJhc2UuCjxicj48YnI+CiAgICBJIHRoaW5rIG11bHRpY3VsdHVyYWxpc20gaGFzIGJlY29tZSBhIG1ham9yIGlzc3VlIGluIHRoZSBwcmVzZW50IHdvcmxkIGJlY2F1c2UgYWxvbmcgd2l0aCBtYWtpbmcgcGVvcGxlCiAgICBvZiBkaWZmZXJlbnQgZXRobmljIGFuZCBjdWx0dXJhbCBiYWNrZ3JvdW5kcyB0b2dldGhlciwgaXQgaW52aXRlcyB2YXJpb3VzIHNvY2lhbCBwcm9ibGVtcyBzdWNoIGFzCiAgICBmYWlsdXJlIHRvIGFzc2ltaWxhdGUsIGV0aG5pYyBzZWdyZWdhdGlvbiwgYW5kIGFkYXB0YXRpb24gaXNzdWVzIHN1Y2ggYXMgc2Nob29sIGRyb3BvdXQsIHVuZW1wbG95bWVudCwKICAgIGFuZCBoaWdoIGNyaW1lIHJhdGVzIGV0Yy4gQWxzbywgbWlncmF0aW9uIGlzIGFub3RoZXIgcmVhc29uIGZvciBtdWx0aWN1bHR1cmFsaXNtLiBQZW9wbGUgdHJhdmVsIGFjcm9zcwogICAgZGlmZmVyZW50IHBsYWNlcyBvZiBkaWZmZXJlbnQgY291bnRyaWVzIGFuZCB0aGV5IHNldHRsZSBpbiBhbnkgcGxhY2Ugd2hlcmUgdGhleSBnZXQgcHJvcGVyIGZhY2lsaXRpZXMKICAgIGFuZCBqb2IgZHVlIHRvIHdoaWNoIG11bHRpY3VsdHVyYWwgcGVvcGxlcyBhcmUgZm91bmQgaW4gc2FtZSBjaXR5IG9yIHJlZ2lvbi4gRHVlIHRvIHRoaXMgbWFueSBwZW9wbGVzIGluCiAgICBuZWlnaGJvdXJob29kIGRvbiZyc3F1bzt0IGtub3cgZWFjaCBvdGhlciBhbmQgdGhlIHJlbGF0aW9uLCBsb3ZlLCBjb21wYXNzaW9uIGJldHdlZW4gdGhlIG5laWdoYm91cnMKICAgIGZvdW5kIGluIHRoZSBwYXN0IGRheXMgYXJlIG5vdCBmb3VuZCBpbiB0aGUgcHJlc2VudCBkYXlzLiBJbiB0aGlzIHdheSwgbXVsdGljdWx0dXJhbGlzbSBoYXMgYmVjb21lIGEKICAgIG1ham9yIGlzc3VlIGluIHRoZSBwcmVzZW50IHdvcmxkLjxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxoMz5SZWZlcmVuY2UgYmV5b25kIHRoZSB0ZXh0PC9oMz4KPGJyPjxicj4KICAgIDxzcGFuPmEuIFdyaXRlIGFuIGVzc2F5IG9uIENlbGVicmF0aW9uIG9mIENoaWxkYmlydGggaW4gbXkgQ29tbXVuaXR5Ljwvc3Bhbj4KPGJyPjxicj4KICAgIEFucy4gQ2hpbGRiaXJ0aCBjZWxlYnJhdGlvbiBpcyB0aGUgY2VyZW1vbnkgb3Igcml0dWFsIHRvIGNlbGVicmF0ZSB0aGUgYmlydGggb2YgYSBjaGlsZCB3aXRoIGpveSBhbmQKICAgIGhhcHBpbmVzcy4gVmFyaW91cyBjb21tdW5pdGllcyBoYXZlIHZhcmlvdXMgcml0dWFscyBhbmQgdHJhZGl0aW9ucyB0byBjZWxlYnJhdGUgY2hpbGRiaXJ0aC4gSG93ZXZlciwgaW4KICAgIG15IGNvbW11bml0eSwgcGVvcGxlIHVzZSB0byBnYXRoZXIgYXQgdGhlIGhvbWUgb2YgdGhlIGNoaWxkYmlydGggYW5kIGNvbmdyYXR1bGF0ZSB0aGVpciBwYXJlbnRzIGFuZAogICAgZmFtaWx5IG1lbWJlcnMuIFRoZXkgYWxzbyBjZWxlYnJhdGUgdGhpcyBhdXNwaWNpb3VzIG9jY2FzaW9uIGJ5IHNpbmdpbmcsIGRhbmNpbmcgYW5kIGVhdGluZyBkZWxpY2lvdXMKICAgIGZvb2RzLgo8YnI+PGJyPgogICAgRXZlcnkgeWVhciwgdGhlIGJpcnRoIG9mIGEgY2hpbGQgaXMgY2VsZWJyYXRlZCB3aXRoIGFsbCBwb21wIGFuZCBzaG93IGJ5IHRoZSBjb21tdW5pdHkgYW5kIGZyaWVuZHMuIFRvCiAgICBtYWtlIHRoZSBiaXJ0aCBvZiBhIGNoaWxkIGEgbWVtb3JhYmxlIGFuZCBoYXBweSBvY2Nhc2lvbiwgdGhleSB3b3VsZCBjb29rIGRpZmZlcmVudCBmb29kIGRlbGljYWNpZXMgYW5kCiAgICBvZmZlciB0aGVtIHRvIHRoZSBlbGRlcnMgd2hvIGFyZSBjb25zaWRlcmVkIGFzIHRoZSBjdXN0b2RpYW4gb2Ygb3VyIHRyYWRpdGlvbi4gVGhleSBhbHNvIGFycmFuZ2Ugc21hbGwKICAgIGdpZnRzIGFuZCBnaXZlIHRoZW0gdG8gdGhlIGJhYmllcyBtb3RoZXIgYW5kIGZhbWlsaWVzLgo8YnI+PGJyPgogICAgTW90aGVycyBhcmUgdHJlYXRlZCB3aXRoIGEgbG90IG9mIHJlc3BlY3QgYW5kIGxvdmUgZHVyaW5nIHRoZWlyIGNoaWxkYmlydGguIFRoZXkgYXJlIGdpdmVuIHRoZSBiZXN0IGNhcmUKICAgIGR1cmluZyB0aGlzIHBlcmlvZC4gV2hlbiBhIG1vdGhlciBpcyByZWFkeSB0byBnaXZlIGJpcnRoIHRvIHRoZSBjaGlsZCwgc2hlIHdvdWxkIGxpZ2h0IHVwCiAgICAmbHNxdW87ZGl5byZyc3F1bzsgYW5kIGxldCBpdCBmbG93IG9uIHRoZSByaXZlciB0byB3YXJkIG9mZiBldmlsIHNwaXJpdHMuIFRoZXkgd291bGQgZXZlbiBkbwogICAgJnF1b3Q7YW50aWh1bWFuIHNhY3JpZmljZXMmcXVvdDsgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGNoaWxkIGlzIHByb3RlY3RlZC4gVGhpcyBpcyBhIHRyYWRpdGlvbiB0byBlbnN1cmUKICAgIHRoZSB3ZWxsYmVpbmcgb2YgdGhlIGNoaWxkLjxicj4KICAgIDxicj4KICAgIDxicj4KICAgIDxzcGFuPgogICAgICAgIGIuIERvIHRoZSBwZW9wbGUgaW4geW91ciBjb21tdW5pdHkgcmVzcG9uZCB3aXRoIHNpbWlsYXIgcmVhY3Rpb25zIHVwb24gdGhlIHByZWduYW5jeSBhbmQgY2hpbGRiaXJ0aCBhcwogICAgICAgIGRlcGljdGVkIGluIHRoZSBzdG9yeT8gR2l2ZSBhIGNvdXBsZSBvZiBleGFtcGxlcy4KICAgIDwvc3Bhbj4KPGJyPjxicj4KICAgIEFucy4gWWVzLCB0aGUgcGVvcGxlIGluIG15IGNvbW11bml0eSBhbHNvIHJlc3BvbmQgd2l0aCBzaW1pbGFyIHJlYWN0aW9ucyB1cG9uIHRoZSBwcmVnbmFuY3kgYW5kCiAgICBjaGlsZGJpcnRoIGFzIGRlcGljdGVkIGluIHRoZSBzdG9yeS4gQWZ0ZXIga25vd2luZyBhYm91dCBhIHdvbWFuJ3MgcHJlZ25hbmN5IGluIHRoZSBjb21tdW5pdHksIGNvbW11bml0eQogICAgbWVtYmVycyAoZXNwZWNpYWxseSB3b21lbikgd2lsbCB2aXNpdCBoZXIgYXQgaGVyIGhvbWUgYW5kIHNwZW5kIHRpbWUgZGlzY3Vzc2luZyB0aGUgbW90aGVyJ3MgY29uZGl0aW9uLgogICAgVGhleSBhbHNvIGdpdmUgdGhlIHdvbWFuIGFkdmljZSBvbiBob3cgdG8gbG9vayBhZnRlciBoZXIgb3duIGhlYWx0aCBhcyB3ZWxsIGFzIHRoZSBoZWFsdGggb2YgaGVyIGNoaWxkCiAgICBkdXJpbmcgdGhpcyB0aW1lLjxicj4KICAgIFBlb3BsZSBpbiBteSBuZWlnaGJvdXJob29kIGFsc28gc2hvd2VyIGdpZnRzLCBjaG9jb2xhdGVzLCBhbmQgY2xvdGhpbmcgb24gdGhlIGZhbWlsaWVzIG9mIHByZWduYW50CiAgICB3b21lbi4gVGhleSBhbHNvIGNvbWUgdXAgd2l0aCBhIGxvdCBvZiBuYW1lcyBmb3IgdGhlIHVuYm9ybiBjaGlsZCwgYm90aCBtYWxlIGFuZCBmZW1hbGUuPGJyPgoKICAgIAo8YnI+PGJyPgo8YnI+PGJyPgogICAgPHNwYW4+SWYgeW91IGhhdmUgYW55IHN1Z2dlc3Rpb25zIG9yIGZlZWRiYWNrcywgcGxlYXNlIHdyaXRlIHRvIHVzIGF0IHBsdXMyaGVscEBnbWFpbC5jb208L3NwYW4+CiAgICAKPGJyPjxicj4KPC9ib2R5PgoKPC9odG1sPg==",
        "2": "",
        "3": "",
        "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "5": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "6": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "7": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="
    },
    "poems": {
        "1": "",
        "2": "",
        "3": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "5": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="
    },
    "essays": {
        "1": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "2": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "3": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "4": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "5": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="
    },
    "oap": {
        "1": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "2": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4=",
        "3": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIj4KCjwvaGVhZD4KCjxib2R5PgogICAgPGJyPgogICAgPGNlbnRlcj4KICAgICAgICA8aDMgc3R5bGU9ImNvbG9yOnJlZCI+Tm90ZXMgd2lsbCBiZSBhdmFpbGFibGUgc29vbjwvaDM+CiAgICA8L2NlbnRlcj4KICAgIDxicj4KICAgIElmIHlvdSBoYXZlIGFueSBzdWdnZXN0aW9ucyBvciBmZWVkYmFja3MsIHBsZWFzZSB3cml0ZSB0byB1cyBhdCBwbHVzMmhlbHBAZ21haWwuY29tCjwvYm9keT4KCjwvaHRtbD4="
    }
}